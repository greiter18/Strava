/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={679:(e,t,n)=>{"use strict";var r=n(864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var o=p(n);o&&o!==m&&e(t,o,r)}var i=s(n);f&&(i=i.concat(f(n)));for(var l=u(t),h=u(n),y=0;y<i.length;++y){var v=i[y];if(!(a[v]||r&&r[v]||h&&h[v]||l&&l[v])){var b=d(n,v);try{c(t,v,b)}catch(e){}}}}return t}},826:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,l,u=o(e),c=1;c<arguments.length;c++){for(var s in i=Object(arguments[c]))n.call(i,s)&&(u[s]=i[s]);if(t){l=t(i);for(var f=0;f<l.length;f++)r.call(i,l[f])&&(u[l[f]]=i[l[f]])}}return u}},779:(e,t,n)=>{var r=n(826);e.exports=function e(t,n,o){return r(n)||(o=n||o,n=[]),o=o||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(t,n):r(t)?function(t,n,r){for(var o=[],a=0;a<t.length;a++)o.push(e(t[a],n,r).source);return s(new RegExp("(?:"+o.join("|")+")",f(r)),n)}(t,n,o):function(e,t,n){return d(a(e,n),t,n)}(t,n,o)},e.exports.parse=a,e.exports.compile=function(e,t){return l(a(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,l="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(i,p),i=p+f.length,d)l+=d[1];else{var m=e[i],h=n[2],y=n[3],v=n[4],b=n[5],g=n[6],w=n[7];l&&(r.push(l),l="");var E=null!=h&&null!=m&&m!==h,k="+"===g||"*"===g,S="?"===g||"*"===g,_=n[2]||s,x=v||b;r.push({name:y||a++,prefix:h||"",delimiter:_,optional:S,repeat:k,partial:E,asterisk:!!w,pattern:x?c(x):w?".*":"[^"+u(_)+"]+?"})}}return i<e.length&&(l+=e.substr(i)),l&&r.push(l),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var a="",l=t||{},u=(o||{}).pretty?i:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,d=l[s.name];if(null==d){if(s.optional){s.partial&&(a+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(d)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!n[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===p?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(d),!n[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');a+=s.prefix+f}}else a+=s}return a}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",l=0;l<e.length;l++){var c=e[l];if("string"==typeof c)i+=u(c);else{var d=u(c.prefix),p="(?:"+c.pattern+")";t.push(c),c.repeat&&(p+="(?:"+d+p+")*"),i+=p=c.optional?c.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var m=u(n.delimiter||"/"),h=i.slice(-m.length)===m;return o||(i=(h?i.slice(0,-m.length):i)+"(?:"+m+"(?=$))?"),i+=a?"$":o&&h?"":"(?="+m+"|$)",s(new RegExp("^"+i,f(n)),t)}},703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,t,n)=>{"use strict";var r=n(294),o=n(418),a=n(840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,u={};function c(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,m={},h={};function y(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new y(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new y(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new y(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new y(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new y(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new y(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new y(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new y(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new y(e,5,!1,e.toLowerCase(),null,!1,!1)}));var b=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(h,e)||!p.call(m,e)&&(d.test(e)?h[e]=!0:(m[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(b,g);v[t]=new y(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(b,g);v[t]=new y(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(b,g);v[t]=new y(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new y(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new y("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new y(e,1,!1,e.toLowerCase(),null,!0,!0)}));var E=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=60103,S=60106,_=60107,x=60108,C=60114,O=60109,N=60110,P=60112,R=60113,T=60120,j=60115,L=60116,M=60121,I=60128,D=60129,z=60130,U=60131;if("function"==typeof Symbol&&Symbol.for){var A=Symbol.for;k=A("react.element"),S=A("react.portal"),_=A("react.fragment"),x=A("react.strict_mode"),C=A("react.profiler"),O=A("react.provider"),N=A("react.context"),P=A("react.forward_ref"),R=A("react.suspense"),T=A("react.suspense_list"),j=A("react.memo"),L=A("react.lazy"),M=A("react.block"),A("react.scope"),I=A("react.opaque.id"),D=A("react.debug_trace_mode"),z=A("react.offscreen"),U=A("react.legacy_hidden")}var F,W="function"==typeof Symbol&&Symbol.iterator;function $(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=W&&e[W]||e["@@iterator"])?e:null}function B(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var V=!1;function H(e,t){if(!e||V)return"";V=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{V=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?B(e):""}function q(e){switch(e.tag){case 5:return B(e.type);case 16:return B("Lazy");case 13:return B("Suspense");case 19:return B("SuspenseList");case 0:case 2:case 15:return H(e.type,!1);case 11:return H(e.type.render,!1);case 22:return H(e.type._render,!1);case 1:return H(e.type,!0);default:return""}}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case _:return"Fragment";case S:return"Portal";case C:return"Profiler";case x:return"StrictMode";case R:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case N:return(e.displayName||"Context")+".Consumer";case O:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case j:return Q(e.type);case M:return Q(e._render);case L:t=e._payload,e=e._init;try{return Q(e(t))}catch(e){}}return null}function K(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Y(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=K(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&J(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function ce(e,t){var n=K(t.value),r=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function se(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var me,he,ye=(he=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((me=me||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=me.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return he(e,t)}))}:he);function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var be={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ge=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||be.hasOwnProperty(e)&&be[e]?(""+t).trim():t+"px"}function Ee(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(be).forEach((function(e){ge.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),be[t]=be[e]}))}));var ke=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(ke[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function _e(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Oe=null,Ne=null;function Pe(e){if(e=Jr(e)){if("function"!=typeof Ce)throw Error(i(280));var t=e.stateNode;t&&(t=eo(t),Ce(e.stateNode,e.type,t))}}function Re(e){Oe?Ne?Ne.push(e):Ne=[e]:Oe=e}function Te(){if(Oe){var e=Oe,t=Ne;if(Ne=Oe=null,Pe(e),t)for(e=0;e<t.length;e++)Pe(t[e])}}function je(e,t){return e(t)}function Le(e,t,n,r,o){return e(t,n,r,o)}function Me(){}var Ie=je,De=!1,ze=!1;function Ue(){null===Oe&&null===Ne||(Me(),Te())}function Ae(e,t){var n=e.stateNode;if(null===n)return null;var r=eo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Fe=!1;if(f)try{var We={};Object.defineProperty(We,"passive",{get:function(){Fe=!0}}),window.addEventListener("test",We,We),window.removeEventListener("test",We,We)}catch(he){Fe=!1}function $e(e,t,n,r,o,a,i,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Be=!1,Ve=null,He=!1,qe=null,Qe={onError:function(e){Be=!0,Ve=e}};function Ke(e,t,n,r,o,a,i,l,u){Be=!1,Ve=null,$e.apply(Qe,arguments)}function Ye(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ge(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if(Ye(e)!==e)throw Error(i(188))}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var Ze,et,tt,nt,rt=!1,ot=[],at=null,it=null,lt=null,ut=new Map,ct=new Map,st=[],ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function dt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function pt(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":it=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=dt(t,n,r,o,a),null!==t&&null!==(t=Jr(t))&&et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function ht(e){var t=Xr(e.target);if(null!==t){var n=Ye(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ge(n)))return e.blockedOn=t,void nt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){tt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function yt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Jr(n))&&et(t),e.blockedOn=n,!1;t.shift()}return!0}function vt(e,t,n){yt(e)&&n.delete(t)}function bt(){for(rt=!1;0<ot.length;){var e=ot[0];if(null!==e.blockedOn){null!==(e=Jr(e.blockedOn))&&Ze(e);break}for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&ot.shift()}null!==at&&yt(at)&&(at=null),null!==it&&yt(it)&&(it=null),null!==lt&&yt(lt)&&(lt=null),ut.forEach(vt),ct.forEach(vt)}function gt(e,t){e.blockedOn===t&&(e.blockedOn=null,rt||(rt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,bt)))}function wt(e){function t(t){return gt(t,e)}if(0<ot.length){gt(ot[0],e);for(var n=1;n<ot.length;n++){var r=ot[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&gt(at,e),null!==it&&gt(it,e),null!==lt&&gt(lt,e),ut.forEach(t),ct.forEach(t),n=0;n<st.length;n++)(r=st[n]).blockedOn===e&&(r.blockedOn=null);for(;0<st.length&&null===(n=st[0]).blockedOn;)ht(n),null===n.blockedOn&&st.shift()}function Et(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:Et("Animation","AnimationEnd"),animationiteration:Et("Animation","AnimationIteration"),animationstart:Et("Animation","AnimationStart"),transitionend:Et("Transition","TransitionEnd")},St={},_t={};function xt(e){if(St[e])return St[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in _t)return St[e]=n[t];return e}f&&(_t=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var Ct=xt("animationend"),Ot=xt("animationiteration"),Nt=xt("animationstart"),Pt=xt("transitionend"),Rt=new Map,Tt=new Map,jt=["abort","abort",Ct,"animationEnd",Ot,"animationIteration",Nt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Pt,"transitionEnd","waiting","waiting"];function Lt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Tt.set(r,t),Rt.set(r,o),c(o,[r])}}(0,a.unstable_now)();var Mt=8;function It(e){if(0!=(1&e))return Mt=15,1;if(0!=(2&e))return Mt=14,2;if(0!=(4&e))return Mt=13,4;var t=24&e;return 0!==t?(Mt=12,t):0!=(32&e)?(Mt=11,32):0!=(t=192&e)?(Mt=10,t):0!=(256&e)?(Mt=9,256):0!=(t=3584&e)?(Mt=8,t):0!=(4096&e)?(Mt=7,4096):0!=(t=4186112&e)?(Mt=6,t):0!=(t=62914560&e)?(Mt=5,t):67108864&e?(Mt=4,67108864):0!=(134217728&e)?(Mt=3,134217728):0!=(t=805306368&e)?(Mt=2,t):0!=(1073741824&e)?(Mt=1,1073741824):(Mt=8,e)}function Dt(e,t){var n=e.pendingLanes;if(0===n)return Mt=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)r=a,o=Mt=15;else if(0!=(a=134217727&n)){var u=a&~i;0!==u?(r=It(u),o=Mt):0!=(l&=a)&&(r=It(l),o=Mt)}else 0!=(a=n&~i)?(r=It(a),o=Mt):0!==l&&(r=It(l),o=Mt);if(0===r)return 0;if(r=n&((0>(r=31-$t(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(It(t),o<=Mt)return t;Mt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-$t(t)),r|=e[n],t&=~o;return r}function zt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ut(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=At(24&~t))?Ut(10,t):e;case 10:return 0===(e=At(192&~t))?Ut(8,t):e;case 8:return 0===(e=At(3584&~t))&&0===(e=At(4186112&~t))&&(e=512),e;case 2:return 0===(t=At(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function At(e){return e&-e}function Ft(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Wt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-$t(t)]=n}var $t=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Bt(e)/Vt|0)|0},Bt=Math.log,Vt=Math.LN2,Ht=a.unstable_UserBlockingPriority,qt=a.unstable_runWithPriority,Qt=!0;function Kt(e,t,n,r){De||Me();var o=Gt,a=De;De=!0;try{Le(o,e,t,n,r)}finally{(De=a)||Ue()}}function Yt(e,t,n,r){qt(Ht,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){var o;if(Qt)if((o=0==(4&t))&&0<ot.length&&-1<ft.indexOf(e))e=dt(null,e,t,n,r),ot.push(e);else{var a=Xt(e,t,n,r);if(null===a)o&&pt(e,r);else{if(o){if(-1<ft.indexOf(e))return e=dt(a,e,t,n,r),void ot.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=mt(at,e,t,n,r,o),!0;case"dragenter":return it=mt(it,e,t,n,r,o),!0;case"mouseover":return lt=mt(lt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return ut.set(a,mt(ut.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,ct.set(a,mt(ct.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;pt(e,r)}Rr(e,t,r,null,n)}}}function Xt(e,t,n,r){var o=xe(r);if(null!==(o=Xr(o))){var a=Ye(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Ge(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Rr(e,t,r,o,n),null}var Jt=null,Zt=null,en=null;function tn(){if(en)return en;var e,t,n=Zt,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return en=o.slice(e,1<t?1-t:void 0)}function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function rn(){return!0}function on(){return!1}function an(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?rn:on,this.isPropagationStopped=on,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rn)},persist:function(){},isPersistent:rn}),t}var ln,un,cn,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=an(sn),dn=o({},sn,{view:0,detail:0}),pn=an(dn),mn=o({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:xn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(ln=e.screenX-cn.screenX,un=e.screenY-cn.screenY):un=ln=0,cn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:un}}),hn=an(mn),yn=an(o({},mn,{dataTransfer:0})),vn=an(o({},dn,{relatedTarget:0})),bn=an(o({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=an(o({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),wn=an(o({},sn,{data:0})),En={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function _n(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function xn(){return _n}var Cn=an(o({},dn,{key:function(e){if(e.key){var t=En[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:xn,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),On=an(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Nn=an(o({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:xn})),Pn=an(o({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Rn=an(o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Tn=[9,13,27,32],jn=f&&"CompositionEvent"in window,Ln=null;f&&"documentMode"in document&&(Ln=document.documentMode);var Mn=f&&"TextEvent"in window&&!Ln,In=f&&(!jn||Ln&&8<Ln&&11>=Ln),Dn=String.fromCharCode(32),zn=!1;function Un(e,t){switch(e){case"keyup":return-1!==Tn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function An(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Fn=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Bn(e,t,n,r){Re(r),0<(t=jr(t,"onChange")).length&&(n=new fn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Vn=null,Hn=null;function qn(e){_r(e,0)}function Qn(e){if(X(Zr(e)))return e}function Kn(e,t){if("change"===e)return t}var Yn=!1;if(f){var Gn;if(f){var Xn="oninput"in document;if(!Xn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Xn="function"==typeof Jn.oninput}Gn=Xn}else Gn=!1;Yn=Gn&&(!document.documentMode||9<document.documentMode)}function Zn(){Vn&&(Vn.detachEvent("onpropertychange",er),Hn=Vn=null)}function er(e){if("value"===e.propertyName&&Qn(Hn)){var t=[];if(Bn(t,Hn,e,xe(e)),e=qn,De)e(t);else{De=!0;try{je(e,t)}finally{De=!1,Ue()}}}}function tr(e,t,n){"focusin"===e?(Zn(),Hn=n,(Vn=t).attachEvent("onpropertychange",er)):"focusout"===e&&Zn()}function nr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Hn)}function rr(e,t){if("click"===e)return Qn(t)}function or(e,t){if("input"===e||"change"===e)return Qn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ir=Object.prototype.hasOwnProperty;function lr(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ir.call(t,n[r])||!ar(e[n[r]],t[n[r]]))return!1;return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function sr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?sr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=J((e=t.contentWindow).document)}return t}function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pr=f&&"documentMode"in document&&11>=document.documentMode,mr=null,hr=null,yr=null,vr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;vr||null==mr||mr!==J(r)||(r="selectionStart"in(r=mr)&&dr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&lr(yr,r)||(yr=r,0<(r=jr(hr,"onSelect")).length&&(t=new fn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}Lt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Lt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Lt(jt,2);for(var gr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),wr=0;wr<gr.length;wr++)Tt.set(gr[wr],0);s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Er="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),kr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Er));function Sr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,l,u,c){if(Ke.apply(this,arguments),Be){if(!Be)throw Error(i(198));var s=Ve;Be=!1,Ve=null,He||(He=!0,qe=s)}}(r,t,void 0,e),e.currentTarget=null}function _r(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,c=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;Sr(o,l,c),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,c=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;Sr(o,l,c),a=u}}}if(He)throw e=qe,He=!1,qe=null,e}function xr(e,t){var n=to(t),r=e+"__bubble";n.has(r)||(Pr(t,e,2,!1),n.add(r))}var Cr="_reactListening"+Math.random().toString(36).slice(2);function Or(e){e[Cr]||(e[Cr]=!0,l.forEach((function(t){kr.has(t)||Nr(t,!1,e,null),Nr(t,!0,e,null)})))}function Nr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&kr.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=to(a),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(o|=4),Pr(a,e,o,t),i.add(l))}function Pr(e,t,n,r){var o=Tt.get(t);switch(void 0===o?2:o){case 0:o=Kt;break;case 1:o=Yt;break;default:o=Gt}n=o.bind(null,t,n,e),o=void 0,!Fe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Rr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=Xr(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(ze)return e();ze=!0;try{Ie(e,t,n)}finally{ze=!1,Ue()}}((function(){var r=a,o=xe(n),i=[];e:{var l=Rt.get(e);if(void 0!==l){var u=fn,c=e;switch(e){case"keypress":if(0===nn(n))break e;case"keydown":case"keyup":u=Cn;break;case"focusin":c="focus",u=vn;break;case"focusout":c="blur",u=vn;break;case"beforeblur":case"afterblur":u=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=yn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Nn;break;case Ct:case Ot:case Nt:u=bn;break;case Pt:u=Pn;break;case"scroll":u=pn;break;case"wheel":u=Rn;break;case"copy":case"cut":case"paste":u=gn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=On}var s=0!=(4&t),f=!s&&"scroll"===e,d=s?null!==l?l+"Capture":null:l;s=[];for(var p,m=r;null!==m;){var h=(p=m).stateNode;if(5===p.tag&&null!==h&&(p=h,null!==d&&null!=(h=Ae(m,d))&&s.push(Tr(m,h,p))),f)break;m=m.return}0<s.length&&(l=new u(l,c,null,n,o),i.push({event:l,listeners:s}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(c=n.relatedTarget||n.fromElement)||!Xr(c)&&!c[Yr])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?Xr(c):null)&&(c!==(f=Ye(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=r),u!==c)){if(s=hn,h="onMouseLeave",d="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(s=On,h="onPointerLeave",d="onPointerEnter",m="pointer"),f=null==u?l:Zr(u),p=null==c?l:Zr(c),(l=new s(h,m+"leave",u,n,o)).target=f,l.relatedTarget=p,h=null,Xr(o)===r&&((s=new s(d,m+"enter",c,n,o)).target=p,s.relatedTarget=f,h=s),f=h,u&&c)e:{for(d=c,m=0,p=s=u;p;p=Lr(p))m++;for(p=0,h=d;h;h=Lr(h))p++;for(;0<m-p;)s=Lr(s),m--;for(;0<p-m;)d=Lr(d),p--;for(;m--;){if(s===d||null!==d&&s===d.alternate)break e;s=Lr(s),d=Lr(d)}s=null}else s=null;null!==u&&Mr(i,l,u,s,!1),null!==c&&null!==f&&Mr(i,f,c,s,!0)}if("select"===(u=(l=r?Zr(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var y=Kn;else if($n(l))if(Yn)y=or;else{y=nr;var v=tr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(y=rr);switch(y&&(y=y(e,r))?Bn(i,y,n,o):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&oe(l,"number",l.value)),v=r?Zr(r):window,e){case"focusin":($n(v)||"true"===v.contentEditable)&&(mr=v,hr=r,yr=null);break;case"focusout":yr=hr=mr=null;break;case"mousedown":vr=!0;break;case"contextmenu":case"mouseup":case"dragend":vr=!1,br(i,n,o);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":br(i,n,o)}var b;if(jn)e:{switch(e){case"compositionstart":var g="onCompositionStart";break e;case"compositionend":g="onCompositionEnd";break e;case"compositionupdate":g="onCompositionUpdate";break e}g=void 0}else Fn?Un(e,n)&&(g="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(g="onCompositionStart");g&&(In&&"ko"!==n.locale&&(Fn||"onCompositionStart"!==g?"onCompositionEnd"===g&&Fn&&(b=tn()):(Zt="value"in(Jt=o)?Jt.value:Jt.textContent,Fn=!0)),0<(v=jr(r,g)).length&&(g=new wn(g,e,null,n,o),i.push({event:g,listeners:v}),(b||null!==(b=An(n)))&&(g.data=b))),(b=Mn?function(e,t){switch(e){case"compositionend":return An(t);case"keypress":return 32!==t.which?null:(zn=!0,Dn);case"textInput":return(e=t.data)===Dn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Fn)return"compositionend"===e||!jn&&Un(e,t)?(e=tn(),en=Zt=Jt=null,Fn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return In&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=jr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=b)}_r(i,t)}))}function Tr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function jr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Ae(e,n))&&r.unshift(Tr(e,a,o)),null!=(a=Ae(e,t))&&r.push(Tr(e,a,o))),e=e.return}return r}function Lr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Mr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,c=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==c&&(l=c,o?null!=(u=Ae(n,a))&&i.unshift(Tr(n,u,l)):o||null!=(u=Ae(n,a))&&i.push(Tr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Ir(){}var Dr=null,zr=null;function Ur(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Ar(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Fr="function"==typeof setTimeout?setTimeout:void 0,Wr="function"==typeof clearTimeout?clearTimeout:void 0;function $r(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Br(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Vr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Hr=0,qr=Math.random().toString(36).slice(2),Qr="__reactFiber$"+qr,Kr="__reactProps$"+qr,Yr="__reactContainer$"+qr,Gr="__reactEvents$"+qr;function Xr(e){var t=e[Qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Yr]||n[Qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Vr(e);null!==e;){if(n=e[Qr])return n;e=Vr(e)}return t}n=(e=n).parentNode}return null}function Jr(e){return!(e=e[Qr]||e[Yr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Zr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function eo(e){return e[Kr]||null}function to(e){var t=e[Gr];return void 0===t&&(t=e[Gr]=new Set),t}var no=[],ro=-1;function oo(e){return{current:e}}function ao(e){0>ro||(e.current=no[ro],no[ro]=null,ro--)}function io(e,t){ro++,no[ro]=e.current,e.current=t}var lo={},uo=oo(lo),co=oo(!1),so=lo;function fo(e,t){var n=e.type.contextTypes;if(!n)return lo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function po(e){return null!=e.childContextTypes}function mo(){ao(co),ao(uo)}function ho(e,t,n){if(uo.current!==lo)throw Error(i(168));io(uo,t),io(co,n)}function yo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,Q(t)||"Unknown",a));return o({},n,r)}function vo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||lo,so=uo.current,io(uo,e),io(co,co.current),!0}function bo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=yo(e,t,so),r.__reactInternalMemoizedMergedChildContext=e,ao(co),ao(uo),io(uo,e)):ao(co),io(co,n)}var go=null,wo=null,Eo=a.unstable_runWithPriority,ko=a.unstable_scheduleCallback,So=a.unstable_cancelCallback,_o=a.unstable_shouldYield,xo=a.unstable_requestPaint,Co=a.unstable_now,Oo=a.unstable_getCurrentPriorityLevel,No=a.unstable_ImmediatePriority,Po=a.unstable_UserBlockingPriority,Ro=a.unstable_NormalPriority,To=a.unstable_LowPriority,jo=a.unstable_IdlePriority,Lo={},Mo=void 0!==xo?xo:function(){},Io=null,Do=null,zo=!1,Uo=Co(),Ao=1e4>Uo?Co:function(){return Co()-Uo};function Fo(){switch(Oo()){case No:return 99;case Po:return 98;case Ro:return 97;case To:return 96;case jo:return 95;default:throw Error(i(332))}}function Wo(e){switch(e){case 99:return No;case 98:return Po;case 97:return Ro;case 96:return To;case 95:return jo;default:throw Error(i(332))}}function $o(e,t){return e=Wo(e),Eo(e,t)}function Bo(e,t,n){return e=Wo(e),ko(e,t,n)}function Vo(){if(null!==Do){var e=Do;Do=null,So(e)}Ho()}function Ho(){if(!zo&&null!==Io){zo=!0;var e=0;try{var t=Io;$o(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Io=null}catch(t){throw null!==Io&&(Io=Io.slice(e+1)),ko(No,Vo),t}finally{zo=!1}}}var qo=E.ReactCurrentBatchConfig;function Qo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ko=oo(null),Yo=null,Go=null,Xo=null;function Jo(){Xo=Go=Yo=null}function Zo(e){var t=Ko.current;ao(Ko),e.type._context._currentValue=t}function ea(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ta(e,t){Yo=e,Xo=Go=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(ji=!0),e.firstContext=null)}function na(e,t){if(Xo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Xo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Go){if(null===Yo)throw Error(i(308));Go=t,Yo.dependencies={lanes:0,firstContext:t,responders:null}}else Go=Go.next=t;return e._currentValue}var ra=!1;function oa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function aa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ia(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function la(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ua(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ca(e,t,n,r){var a=e.updateQueue;ra=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,u=a.shared.pending;if(null!==u){a.shared.pending=null;var c=u,s=c.next;c.next=null,null===l?i=s:l.next=s,l=c;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=s:d.next=s,f.lastBaseUpdate=c)}}if(null!==i){for(d=a.baseState,l=0,f=s=c=null;;){u=i.lane;var p=i.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var m=e,h=i;switch(u=t,p=n,h.tag){case 1:if("function"==typeof(m=h.payload)){d=m.call(p,d,u);break e}d=m;break e;case 3:m.flags=-4097&m.flags|64;case 0:if(null==(u="function"==typeof(m=h.payload)?m.call(p,d,u):m))break e;d=o({},d,u);break e;case 2:ra=!0}}null!==i.callback&&(e.flags|=32,null===(u=a.effects)?a.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(s=f=p,c=d):f=f.next=p,l|=u;if(null===(i=i.next)){if(null===(u=a.shared.pending))break;i=u.next,u.next=null,a.lastBaseUpdate=u,a.shared.pending=null}}null===f&&(c=d),a.baseState=c,a.firstBaseUpdate=s,a.lastBaseUpdate=f,Ml|=l,e.lanes=l,e.memoizedState=d}}function sa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var fa=(new r.Component).refs;function da(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pa={isMounted:function(e){return!!(e=e._reactInternals)&&Ye(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=au(),o=iu(e),a=ia(r,o);a.payload=t,null!=n&&(a.callback=n),la(e,a),lu(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=au(),o=iu(e),a=ia(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),la(e,a),lu(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=au(),r=iu(e),o=ia(n,r);o.tag=2,null!=t&&(o.callback=t),la(e,o),lu(e,r,n)}};function ma(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(o,a))}function ha(e,t,n){var r=!1,o=lo,a=t.contextType;return"object"==typeof a&&null!==a?a=na(a):(o=po(t)?so:uo.current,a=(r=null!=(r=t.contextTypes))?fo(e,o):lo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=pa,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ya(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pa.enqueueReplaceState(t,t.state,null)}function va(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=fa,oa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=na(a):(a=po(t)?so:uo.current,o.context=fo(e,a)),ca(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(da(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&pa.enqueueReplaceState(o,o.state,null),ca(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var ba=Array.isArray;function ga(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===fa&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function wa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Ea(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Uu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=$u(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ga(e,t,n),r.return=e,r):((r=Au(n.type,n.key,n.props,null,e.mode,r)).ref=ga(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Bu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Fu(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=$u(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Au(t.type,t.key,t.props,null,e.mode,n)).ref=ga(e,null,t),n.return=e,n;case S:return(t=Bu(t,e.mode,n)).return=e,t}if(ba(t)||$(t))return(t=Fu(t,e.mode,n,null)).return=e,t;wa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===o?n.type===_?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case S:return n.key===o?s(e,t,n,r):null}if(ba(n)||$(n))return null!==o?null:f(e,t,n,r,null);wa(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return e=e.get(null===r.key?n:r.key)||null,r.type===_?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case S:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(ba(r)||$(r))return f(t,e=e.get(n)||null,r,o,null);wa(t,r)}return null}function h(o,i,l,u){for(var c=null,s=null,f=i,h=i=0,y=null;null!==f&&h<l.length;h++){f.index>h?(y=f,f=null):y=f.sibling;var v=p(o,f,l[h],u);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(o,f),i=a(v,i,h),null===s?c=v:s.sibling=v,s=v,f=y}if(h===l.length)return n(o,f),c;if(null===f){for(;h<l.length;h++)null!==(f=d(o,l[h],u))&&(i=a(f,i,h),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);h<l.length;h++)null!==(y=m(f,o,h,l[h],u))&&(e&&null!==y.alternate&&f.delete(null===y.key?h:y.key),i=a(y,i,h),null===s?c=y:s.sibling=y,s=y);return e&&f.forEach((function(e){return t(o,e)})),c}function y(o,l,u,c){var s=$(u);if("function"!=typeof s)throw Error(i(150));if(null==(u=s.call(u)))throw Error(i(151));for(var f=s=null,h=l,y=l=0,v=null,b=u.next();null!==h&&!b.done;y++,b=u.next()){h.index>y?(v=h,h=null):v=h.sibling;var g=p(o,h,b.value,c);if(null===g){null===h&&(h=v);break}e&&h&&null===g.alternate&&t(o,h),l=a(g,l,y),null===f?s=g:f.sibling=g,f=g,h=v}if(b.done)return n(o,h),s;if(null===h){for(;!b.done;y++,b=u.next())null!==(b=d(o,b.value,c))&&(l=a(b,l,y),null===f?s=b:f.sibling=b,f=b);return s}for(h=r(o,h);!b.done;y++,b=u.next())null!==(b=m(h,o,y,b.value,c))&&(e&&null!==b.alternate&&h.delete(null===b.key?y:b.key),l=a(b,l,y),null===f?s=b:f.sibling=b,f=b);return e&&h.forEach((function(e){return t(o,e)})),s}return function(e,r,a,u){var c="object"==typeof a&&null!==a&&a.type===_&&null===a.key;c&&(a=a.props.children);var s="object"==typeof a&&null!==a;if(s)switch(a.$$typeof){case k:e:{for(s=a.key,c=r;null!==c;){if(c.key===s){switch(c.tag){case 7:if(a.type===_){n(e,c.sibling),(r=o(c,a.props.children)).return=e,e=r;break e}break;default:if(c.elementType===a.type){n(e,c.sibling),(r=o(c,a.props)).ref=ga(e,c,a),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}a.type===_?((r=Fu(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=Au(a.type,a.key,a.props,null,e.mode,u)).ref=ga(e,r,a),u.return=e,e=u)}return l(e);case S:e:{for(c=a.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Bu(a,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=$u(a,e.mode,u)).return=e,e=r),l(e);if(ba(a))return h(e,r,a,u);if($(a))return y(e,r,a,u);if(s&&wa(e,a),void 0===a&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,Q(e.type)||"Component"))}return n(e,r)}}var ka=Ea(!0),Sa=Ea(!1),_a={},xa=oo(_a),Ca=oo(_a),Oa=oo(_a);function Na(e){if(e===_a)throw Error(i(174));return e}function Pa(e,t){switch(io(Oa,t),io(Ca,e),io(xa,_a),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ao(xa),io(xa,t)}function Ra(){ao(xa),ao(Ca),ao(Oa)}function Ta(e){Na(Oa.current);var t=Na(xa.current),n=pe(t,e.type);t!==n&&(io(Ca,e),io(xa,n))}function ja(e){Ca.current===e&&(ao(xa),ao(Ca))}var La=oo(0);function Ma(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ia=null,Da=null,za=!1;function Ua(e,t){var n=Du(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Aa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Fa(e){if(za){var t=Da;if(t){var n=t;if(!Aa(e,t)){if(!(t=Br(n.nextSibling))||!Aa(e,t))return e.flags=-1025&e.flags|2,za=!1,void(Ia=e);Ua(Ia,n)}Ia=e,Da=Br(t.firstChild)}else e.flags=-1025&e.flags|2,za=!1,Ia=e}}function Wa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ia=e}function $a(e){if(e!==Ia)return!1;if(!za)return Wa(e),za=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Ar(t,e.memoizedProps))for(t=Da;t;)Ua(e,t),t=Br(t.nextSibling);if(Wa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Da=Br(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Da=null}}else Da=Ia?Br(e.stateNode.nextSibling):null;return!0}function Ba(){Da=Ia=null,za=!1}var Va=[];function Ha(){for(var e=0;e<Va.length;e++)Va[e]._workInProgressVersionPrimary=null;Va.length=0}var qa=E.ReactCurrentDispatcher,Qa=E.ReactCurrentBatchConfig,Ka=0,Ya=null,Ga=null,Xa=null,Ja=!1,Za=!1;function ei(){throw Error(i(321))}function ti(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function ni(e,t,n,r,o,a){if(Ka=a,Ya=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,qa.current=null===e||null===e.memoizedState?Ni:Pi,e=n(r,o),Za){a=0;do{if(Za=!1,!(25>a))throw Error(i(301));a+=1,Xa=Ga=null,t.updateQueue=null,qa.current=Ri,e=n(r,o)}while(Za)}if(qa.current=Oi,t=null!==Ga&&null!==Ga.next,Ka=0,Xa=Ga=Ya=null,Ja=!1,t)throw Error(i(300));return e}function ri(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Xa?Ya.memoizedState=Xa=e:Xa=Xa.next=e,Xa}function oi(){if(null===Ga){var e=Ya.alternate;e=null!==e?e.memoizedState:null}else e=Ga.next;var t=null===Xa?Ya.memoizedState:Xa.next;if(null!==t)Xa=t,Ga=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Ga=e).memoizedState,baseState:Ga.baseState,baseQueue:Ga.baseQueue,queue:Ga.queue,next:null},null===Xa?Ya.memoizedState=Xa=e:Xa=Xa.next=e}return Xa}function ai(e,t){return"function"==typeof t?t(e):t}function ii(e){var t=oi(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Ga,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=a=null,c=o;do{var s=c.lane;if((Ka&s)===s)null!==u&&(u=u.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===e?c.eagerState:e(r,c.action);else{var f={lane:s,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===u?(l=u=f,a=r):u=u.next=f,Ya.lanes|=s,Ml|=s}c=c.next}while(null!==c&&c!==o);null===u?a=r:u.next=l,ar(r,t.memoizedState)||(ji=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function li(e){var t=oi(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);ar(a,t.memoizedState)||(ji=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function ui(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ka&e)===e)&&(t._workInProgressVersionPrimary=r,Va.push(t))),e)return n(t._source);throw Va.push(t),Error(i(350))}function ci(e,t,n,r){var o=Cl;if(null===o)throw Error(i(349));var a=t._getVersion,l=a(t._source),u=qa.current,c=u.useState((function(){return ui(o,t,n)})),s=c[1],f=c[0];c=Xa;var d=e.memoizedState,p=d.refs,m=p.getSnapshot,h=d.source;d=d.subscribe;var y=Ya;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=s;var e=a(t._source);if(!ar(l,e)){e=n(t._source),ar(f,e)||(s(e),e=iu(y),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var u=31-$t(i),c=1<<u;r[u]|=e,i&=~c}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=iu(y);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ar(m,n)&&ar(h,t)&&ar(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ai,lastRenderedState:f}).dispatch=s=Ci.bind(null,Ya,e),c.queue=e,c.baseQueue=null,f=ui(o,t,n),c.memoizedState=c.baseState=f),f}function si(e,t,n){return ci(oi(),e,t,n)}function fi(e){var t=ri();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ai,lastRenderedState:e}).dispatch=Ci.bind(null,Ya,e),[t.memoizedState,e]}function di(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ya.updateQueue)?(t={lastEffect:null},Ya.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function pi(e){return e={current:e},ri().memoizedState=e}function mi(){return oi().memoizedState}function hi(e,t,n,r){var o=ri();Ya.flags|=e,o.memoizedState=di(1|t,n,void 0,void 0===r?null:r)}function yi(e,t,n,r){var o=oi();r=void 0===r?null:r;var a=void 0;if(null!==Ga){var i=Ga.memoizedState;if(a=i.destroy,null!==r&&ti(r,i.deps))return void di(t,n,a,r)}Ya.flags|=e,o.memoizedState=di(1|t,n,a,r)}function vi(e,t){return hi(516,4,e,t)}function bi(e,t){return yi(516,4,e,t)}function gi(e,t){return yi(4,2,e,t)}function wi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ei(e,t,n){return n=null!=n?n.concat([e]):null,yi(4,2,wi.bind(null,t,e),n)}function ki(){}function Si(e,t){var n=oi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ti(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function _i(e,t){var n=oi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ti(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function xi(e,t){var n=Fo();$o(98>n?98:n,(function(){e(!0)})),$o(97<n?97:n,(function(){var n=Qa.transition;Qa.transition=1;try{e(!1),t()}finally{Qa.transition=n}}))}function Ci(e,t,n){var r=au(),o=iu(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Ya||null!==i&&i===Ya)Za=Ja=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=i(l,n);if(a.eagerReducer=i,a.eagerState=u,ar(u,l))return}catch(e){}lu(e,o,r)}}var Oi={readContext:na,useCallback:ei,useContext:ei,useEffect:ei,useImperativeHandle:ei,useLayoutEffect:ei,useMemo:ei,useReducer:ei,useRef:ei,useState:ei,useDebugValue:ei,useDeferredValue:ei,useTransition:ei,useMutableSource:ei,useOpaqueIdentifier:ei,unstable_isNewReconciler:!1},Ni={readContext:na,useCallback:function(e,t){return ri().memoizedState=[e,void 0===t?null:t],e},useContext:na,useEffect:vi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,hi(4,2,wi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return hi(4,2,e,t)},useMemo:function(e,t){var n=ri();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ri();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ci.bind(null,Ya,e),[r.memoizedState,e]},useRef:pi,useState:fi,useDebugValue:ki,useDeferredValue:function(e){var t=fi(e),n=t[0],r=t[1];return vi((function(){var t=Qa.transition;Qa.transition=1;try{r(e)}finally{Qa.transition=t}}),[e]),n},useTransition:function(){var e=fi(!1),t=e[0];return pi(e=xi.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ri();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ci(r,e,t,n)},useOpaqueIdentifier:function(){if(za){var e=!1,t=function(e){return{$$typeof:I,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Hr++).toString(36))),Error(i(355))})),n=fi(t)[1];return 0==(2&Ya.mode)&&(Ya.flags|=516,di(5,(function(){n("r:"+(Hr++).toString(36))}),void 0,null)),t}return fi(t="r:"+(Hr++).toString(36)),t},unstable_isNewReconciler:!1},Pi={readContext:na,useCallback:Si,useContext:na,useEffect:bi,useImperativeHandle:Ei,useLayoutEffect:gi,useMemo:_i,useReducer:ii,useRef:mi,useState:function(){return ii(ai)},useDebugValue:ki,useDeferredValue:function(e){var t=ii(ai),n=t[0],r=t[1];return bi((function(){var t=Qa.transition;Qa.transition=1;try{r(e)}finally{Qa.transition=t}}),[e]),n},useTransition:function(){var e=ii(ai)[0];return[mi().current,e]},useMutableSource:si,useOpaqueIdentifier:function(){return ii(ai)[0]},unstable_isNewReconciler:!1},Ri={readContext:na,useCallback:Si,useContext:na,useEffect:bi,useImperativeHandle:Ei,useLayoutEffect:gi,useMemo:_i,useReducer:li,useRef:mi,useState:function(){return li(ai)},useDebugValue:ki,useDeferredValue:function(e){var t=li(ai),n=t[0],r=t[1];return bi((function(){var t=Qa.transition;Qa.transition=1;try{r(e)}finally{Qa.transition=t}}),[e]),n},useTransition:function(){var e=li(ai)[0];return[mi().current,e]},useMutableSource:si,useOpaqueIdentifier:function(){return li(ai)[0]},unstable_isNewReconciler:!1},Ti=E.ReactCurrentOwner,ji=!1;function Li(e,t,n,r){t.child=null===e?Sa(t,null,n,r):ka(t,e.child,n,r)}function Mi(e,t,n,r,o){n=n.render;var a=t.ref;return ta(t,o),r=ni(e,t,n,r,a,o),null===e||ji?(t.flags|=1,Li(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Ji(e,t,o))}function Ii(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||zu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Au(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Di(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:lr)(o,r)&&e.ref===t.ref)?Ji(e,t,a):(t.flags|=1,(e=Uu(i,r)).ref=t.ref,e.return=t,t.child=e)}function Di(e,t,n,r,o,a){if(null!==e&&lr(e.memoizedProps,r)&&e.ref===t.ref){if(ji=!1,0==(a&o))return t.lanes=e.lanes,Ji(e,t,a);0!=(16384&e.flags)&&(ji=!0)}return Ai(e,t,n,r,a)}function zi(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},mu(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},mu(0,e),null;t.memoizedState={baseLanes:0},mu(0,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,mu(0,r);return Li(e,t,o,n),t.child}function Ui(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ai(e,t,n,r,o){var a=po(n)?so:uo.current;return a=fo(t,a),ta(t,o),n=ni(e,t,n,r,a,o),null===e||ji?(t.flags|=1,Li(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Ji(e,t,o))}function Fi(e,t,n,r,o){if(po(n)){var a=!0;vo(t)}else a=!1;if(ta(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ha(t,n,r),va(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,c=n.contextType;c="object"==typeof c&&null!==c?na(c):fo(t,c=po(n)?so:uo.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==c)&&ya(t,i,r,c),ra=!1;var d=t.memoizedState;i.state=d,ca(t,r,i,o),u=t.memoizedState,l!==r||d!==u||co.current||ra?("function"==typeof s&&(da(t,n,s,r),u=t.memoizedState),(l=ra||ma(t,n,l,r,d,u,c))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=c,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,aa(e,t),l=t.memoizedProps,c=t.type===t.elementType?l:Qo(t.type,l),i.props=c,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?na(u):fo(t,u=po(n)?so:uo.current);var p=n.getDerivedStateFromProps;(s="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&ya(t,i,r,u),ra=!1,d=t.memoizedState,i.state=d,ca(t,r,i,o);var m=t.memoizedState;l!==f||d!==m||co.current||ra?("function"==typeof p&&(da(t,n,p,r),m=t.memoizedState),(c=ra||ma(t,n,c,r,d,m,u))?(s||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=m),i.props=r,i.state=m,i.context=u,r=c):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Wi(e,t,n,r,a,o)}function Wi(e,t,n,r,o,a){Ui(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&bo(t,n,!1),Ji(e,t,a);r=t.stateNode,Ti.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=ka(t,e.child,null,a),t.child=ka(t,null,l,a)):Li(e,t,l,a),t.memoizedState=r.state,o&&bo(t,n,!0),t.child}function $i(e){var t=e.stateNode;t.pendingContext?ho(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ho(0,t.context,!1),Pa(e,t.containerInfo)}var Bi,Vi,Hi,qi={dehydrated:null,retryLane:0};function Qi(e,t,n){var r,o=t.pendingProps,a=La.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),io(La,1&a),null===e?(void 0!==o.fallback&&Fa(t),e=o.children,a=o.fallback,i?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qi,t.lanes=33554432,e):((n=Wu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=function(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=l,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Uu(i,l),null!==e?r=Uu(e,r):(r=Fu(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=qi,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Uu(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Ki(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Wu(t,o,0,null),n=Fu(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Yi(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ea(e.return,t)}function Gi(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function Xi(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Li(e,t,r.children,n),0!=(2&(r=La.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Yi(e,n);else if(19===e.tag)Yi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(io(La,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ma(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Gi(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ma(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Gi(t,!0,n,null,a,t.lastEffect);break;case"together":Gi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ji(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ml|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Uu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Uu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function Zi(e,t){if(!za)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function el(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return po(t.type)&&mo(),null;case 3:return Ra(),ao(co),ao(uo),Ha(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||($a(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:ja(t);var a=Na(Oa.current);if(n=t.type,null!==e&&null!=t.stateNode)Vi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Na(xa.current),$a(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Qr]=t,r[Kr]=l,n){case"dialog":xr("cancel",r),xr("close",r);break;case"iframe":case"object":case"embed":xr("load",r);break;case"video":case"audio":for(e=0;e<Er.length;e++)xr(Er[e],r);break;case"source":xr("error",r);break;case"img":case"image":case"link":xr("error",r),xr("load",r);break;case"details":xr("toggle",r);break;case"input":ee(r,l),xr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},xr("invalid",r);break;case"textarea":ue(r,l),xr("invalid",r)}for(var c in Se(n,l),e=null,l)l.hasOwnProperty(c)&&(a=l[c],"children"===c?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):u.hasOwnProperty(c)&&null!=a&&"onScroll"===c&&xr("scroll",r));switch(n){case"input":G(r),re(r,l,!0);break;case"textarea":G(r),se(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Ir)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(c=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[Qr]=t,e[Kr]=r,Bi(e,t),t.stateNode=e,c=_e(n,r),n){case"dialog":xr("cancel",e),xr("close",e),a=r;break;case"iframe":case"object":case"embed":xr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Er.length;a++)xr(Er[a],e);a=r;break;case"source":xr("error",e),a=r;break;case"img":case"image":case"link":xr("error",e),xr("load",e),a=r;break;case"details":xr("toggle",e),a=r;break;case"input":ee(e,r),a=Z(e,r),xr("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),xr("invalid",e);break;case"textarea":ue(e,r),a=le(e,r),xr("invalid",e);break;default:a=r}Se(n,a);var s=a;for(l in s)if(s.hasOwnProperty(l)){var f=s[l];"style"===l?Ee(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&ye(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ve(e,f):"number"==typeof f&&ve(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&xr("scroll",e):null!=f&&w(e,l,f,c))}switch(n){case"input":G(e),re(e,r,!1);break;case"textarea":G(e),se(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Ir)}Ur(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Hi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Na(Oa.current),Na(xa.current),$a(t)?(r=t.stateNode,n=t.memoizedProps,r[Qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Qr]=t,t.stateNode=r)}return null;case 13:return ao(La),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&$a(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&La.current)?0===Tl&&(Tl=3):(0!==Tl&&3!==Tl||(Tl=4),null===Cl||0==(134217727&Ml)&&0==(134217727&Il)||fu(Cl,Nl))),(r||n)&&(t.flags|=4),null);case 4:return Ra(),null===e&&Or(t.stateNode.containerInfo),null;case 10:return Zo(t),null;case 17:return po(t.type)&&mo(),null;case 19:if(ao(La),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(c=r.rendering))if(l)Zi(r,!1);else{if(0!==Tl||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=Ma(e))){for(t.flags|=64,Zi(r,!1),null!==(l=c.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(c=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=c.childLanes,l.lanes=c.lanes,l.child=c.child,l.memoizedProps=c.memoizedProps,l.memoizedState=c.memoizedState,l.updateQueue=c.updateQueue,l.type=c.type,e=c.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return io(La,1&La.current|2),t.child}e=e.sibling}null!==r.tail&&Ao()>Al&&(t.flags|=64,l=!0,Zi(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Ma(c))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Zi(r,!0),null===r.tail&&"hidden"===r.tailMode&&!c.alternate&&!za)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Ao()-r.renderingStartTime>Al&&1073741824!==n&&(t.flags|=64,l=!0,Zi(r,!1),t.lanes=33554432);r.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=r.last)?n.sibling=c:t.child=c,r.last=c)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Ao(),n.sibling=null,t=La.current,io(La,l?1&t|2:1&t),n):null;case 23:case 24:return hu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function tl(e){switch(e.tag){case 1:po(e.type)&&mo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ra(),ao(co),ao(uo),Ha(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return ja(e),null;case 13:return ao(La),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ao(La),null;case 4:return Ra(),null;case 10:return Zo(e),null;case 23:case 24:return hu(),null;default:return null}}function nl(e,t){try{var n="",r=t;do{n+=q(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function rl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Bi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Vi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Na(xa.current);var i,l=null;switch(n){case"input":a=Z(e,a),r=Z(e,r),l=[];break;case"option":a=ae(e,a),r=ae(e,r),l=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":a=le(e,a),r=le(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Ir)}for(f in Se(n,r),n=null,a)if(!r.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var c=a[f];for(i in c)c.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var s=r[f];if(c=null!=a?a[f]:void 0,r.hasOwnProperty(f)&&s!==c&&(null!=s||null!=c))if("style"===f)if(c){for(i in c)!c.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in s)s.hasOwnProperty(i)&&c[i]!==s[i]&&(n||(n={}),n[i]=s[i])}else n||(l||(l=[]),l.push(f,n)),n=s;else"dangerouslySetInnerHTML"===f?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(l=l||[]).push(f,s)):"children"===f?"string"!=typeof s&&"number"!=typeof s||(l=l||[]).push(f,""+s):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=s&&"onScroll"===f&&xr("scroll",e),l||c===s||(l=[])):"object"==typeof s&&null!==s&&s.$$typeof===I?s.toString():(l=l||[]).push(f,s))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Hi=function(e,t,n,r){n!==r&&(t.flags|=4)};var ol="function"==typeof WeakMap?WeakMap:Map;function al(e,t,n){(n=ia(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Bl||(Bl=!0,Vl=r),rl(0,t)},n}function il(e,t,n){(n=ia(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return rl(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Hl?Hl=new Set([this]):Hl.add(this),rl(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ll="function"==typeof WeakSet?WeakSet:Set;function ul(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){ju(e,t)}else t.current=null}function cl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&$r(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function sl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Pu(n,e),Nu(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Qo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&sa(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}sa(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Ur(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&wt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function fl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function dl(e,t){if(wo&&"function"==typeof wo.onCommitFiberUnmount)try{wo.onCommitFiberUnmount(go,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Pu(t,n);else{r=t;try{o()}catch(e){ju(r,e)}}n=n.next}while(n!==e)}break;case 1:if(ul(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){ju(t,e)}break;case 5:ul(t);break;case 4:bl(e,t)}}function pl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function ml(e){return 5===e.tag||3===e.tag||4===e.tag}function hl(e){e:{for(var t=e.return;null!==t;){if(ml(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ml(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?yl(e,n,t):vl(e,n,t)}function yl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Ir));else if(4!==r&&null!==(e=e.child))for(yl(e,t,n),e=e.sibling;null!==e;)yl(e,t,n),e=e.sibling}function vl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(vl(e,t,n),e=e.sibling;null!==e;)vl(e,t,n),e=e.sibling}function bl(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,c=u;;)if(dl(l,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===u)break e;for(;null===c.sibling;){if(null===c.return||c.return===u)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}r?(l=n,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(dl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function gl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Kr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),_e(e,o),t=_e(e,r),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?Ee(n,u):"dangerouslySetInnerHTML"===l?ye(n,u):"children"===l?ve(n,u):w(n,l,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":ce(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,wt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Ul=Ao(),fl(t.child,!0)),void wl(t);case 19:return void wl(t);case 17:return;case 23:case 24:return void fl(t,null!==t.memoizedState)}throw Error(i(163))}function wl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ll),t.forEach((function(t){var r=Mu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function El(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var kl=Math.ceil,Sl=E.ReactCurrentDispatcher,_l=E.ReactCurrentOwner,xl=0,Cl=null,Ol=null,Nl=0,Pl=0,Rl=oo(0),Tl=0,jl=null,Ll=0,Ml=0,Il=0,Dl=0,zl=null,Ul=0,Al=1/0;function Fl(){Al=Ao()+500}var Wl,$l=null,Bl=!1,Vl=null,Hl=null,ql=!1,Ql=null,Kl=90,Yl=[],Gl=[],Xl=null,Jl=0,Zl=null,eu=-1,tu=0,nu=0,ru=null,ou=!1;function au(){return 0!=(48&xl)?Ao():-1!==eu?eu:eu=Ao()}function iu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Fo()?1:2;if(0===tu&&(tu=Ll),0!==qo.transition){0!==nu&&(nu=null!==zl?zl.pendingLanes:0),e=tu;var t=4186112&~nu;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Fo(),e=Ut(0!=(4&xl)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),tu)}function lu(e,t,n){if(50<Jl)throw Jl=0,Zl=null,Error(i(185));if(null===(e=uu(e,t)))return null;Wt(e,t,n),e===Cl&&(Il|=t,4===Tl&&fu(e,Nl));var r=Fo();1===t?0!=(8&xl)&&0==(48&xl)?du(e):(cu(e,n),0===xl&&(Fl(),Vo())):(0==(4&xl)||98!==r&&99!==r||(null===Xl?Xl=new Set([e]):Xl.add(e)),cu(e,n)),zl=e}function uu(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-$t(l),c=1<<u,s=a[u];if(-1===s){if(0==(c&r)||0!=(c&o)){s=t,It(c);var f=Mt;a[u]=10<=f?s+250:6<=f?s+5e3:-1}}else s<=t&&(e.expiredLanes|=c);l&=~c}if(r=Dt(e,e===Cl?Nl:0),t=Mt,0===r)null!==n&&(n!==Lo&&So(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Lo&&So(n)}15===t?(n=du.bind(null,e),null===Io?(Io=[n],Do=ko(No,Ho)):Io.push(n),n=Lo):n=14===t?Bo(99,du.bind(null,e)):Bo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),su.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function su(e){if(eu=-1,nu=tu=0,0!=(48&xl))throw Error(i(327));var t=e.callbackNode;if(Ou()&&e.callbackNode!==t)return null;var n=Dt(e,e===Cl?Nl:0);if(0===n)return null;var r=n,o=xl;xl|=16;var a=bu();for(Cl===e&&Nl===r||(Fl(),yu(e,r));;)try{Eu();break}catch(t){vu(e,t)}if(Jo(),Sl.current=a,xl=o,null!==Ol?r=0:(Cl=null,Nl=0,r=Tl),0!=(Ll&Il))yu(e,0);else if(0!==r){if(2===r&&(xl|=64,e.hydrate&&(e.hydrate=!1,$r(e.containerInfo)),0!==(n=zt(e))&&(r=gu(e,n))),1===r)throw t=jl,yu(e,0),fu(e,n),cu(e,Ao()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:_u(e);break;case 3:if(fu(e,n),(62914560&n)===n&&10<(r=Ul+500-Ao())){if(0!==Dt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){au(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Fr(_u.bind(null,e),r);break}_u(e);break;case 4:if(fu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-$t(n);a=1<<l,(l=r[l])>o&&(o=l),n&=~a}if(n=o,10<(n=(120>(n=Ao()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*kl(n/1960))-n)){e.timeoutHandle=Fr(_u.bind(null,e),n);break}_u(e);break;case 5:_u(e);break;default:throw Error(i(329))}}return cu(e,Ao()),e.callbackNode===t?su.bind(null,e):null}function fu(e,t){for(t&=~Dl,t&=~Il,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-$t(t),r=1<<n;e[n]=-1,t&=~r}}function du(e){if(0!=(48&xl))throw Error(i(327));if(Ou(),e===Cl&&0!=(e.expiredLanes&Nl)){var t=Nl,n=gu(e,t);0!=(Ll&Il)&&(n=gu(e,t=Dt(e,t)))}else n=gu(e,t=Dt(e,0));if(0!==e.tag&&2===n&&(xl|=64,e.hydrate&&(e.hydrate=!1,$r(e.containerInfo)),0!==(t=zt(e))&&(n=gu(e,t))),1===n)throw n=jl,yu(e,0),fu(e,t),cu(e,Ao()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,_u(e),cu(e,Ao()),null}function pu(e,t){var n=xl;xl|=1;try{return e(t)}finally{0===(xl=n)&&(Fl(),Vo())}}function mu(e,t){io(Rl,Pl),Pl|=t,Ll|=t}function hu(){Pl=Rl.current,ao(Rl)}function yu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Wr(n)),null!==Ol)for(n=Ol.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&mo();break;case 3:Ra(),ao(co),ao(uo),Ha();break;case 5:ja(r);break;case 4:Ra();break;case 13:case 19:ao(La);break;case 10:Zo(r);break;case 23:case 24:hu()}n=n.return}Cl=e,Ol=Uu(e.current,null),Nl=Pl=Ll=t,Tl=0,jl=null,Dl=Il=Ml=0}function vu(e,t){for(;;){var n=Ol;try{if(Jo(),qa.current=Oi,Ja){for(var r=Ya.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Ja=!1}if(Ka=0,Xa=Ga=Ya=null,Za=!1,_l.current=null,null===n||null===n.return){Tl=1,jl=t,Ol=null;break}e:{var a=e,i=n.return,l=n,u=t;if(t=Nl,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u;if(0==(2&l.mode)){var s=l.alternate;s?(l.updateQueue=s.updateQueue,l.memoizedState=s.memoizedState,l.lanes=s.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&La.current),d=i;do{var p;if(p=13===d.tag){var m=d.memoizedState;if(null!==m)p=null!==m.dehydrated;else{var h=d.memoizedProps;p=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!f)}}if(p){var y=d.updateQueue;if(null===y){var v=new Set;v.add(c),d.updateQueue=v}else y.add(c);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var b=ia(-1,1);b.tag=2,la(l,b)}l.lanes|=1;break e}u=void 0,l=t;var g=a.pingCache;if(null===g?(g=a.pingCache=new ol,u=new Set,g.set(c,u)):void 0===(u=g.get(c))&&(u=new Set,g.set(c,u)),!u.has(l)){u.add(l);var w=Lu.bind(null,a,c,l);c.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((Q(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Tl&&(Tl=2),u=nl(u,l),d=i;do{switch(d.tag){case 3:a=u,d.flags|=4096,t&=-t,d.lanes|=t,ua(d,al(0,a,t));break e;case 1:a=u;var E=d.type,k=d.stateNode;if(0==(64&d.flags)&&("function"==typeof E.getDerivedStateFromError||null!==k&&"function"==typeof k.componentDidCatch&&(null===Hl||!Hl.has(k)))){d.flags|=4096,t&=-t,d.lanes|=t,ua(d,il(d,a,t));break e}}d=d.return}while(null!==d)}Su(n)}catch(e){t=e,Ol===n&&null!==n&&(Ol=n=n.return);continue}break}}function bu(){var e=Sl.current;return Sl.current=Oi,null===e?Oi:e}function gu(e,t){var n=xl;xl|=16;var r=bu();for(Cl===e&&Nl===t||yu(e,t);;)try{wu();break}catch(t){vu(e,t)}if(Jo(),xl=n,Sl.current=r,null!==Ol)throw Error(i(261));return Cl=null,Nl=0,Tl}function wu(){for(;null!==Ol;)ku(Ol)}function Eu(){for(;null!==Ol&&!_o();)ku(Ol)}function ku(e){var t=Wl(e.alternate,e,Pl);e.memoizedProps=e.pendingProps,null===t?Su(e):Ol=t,_l.current=null}function Su(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=el(n,t,Pl)))return void(Ol=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Pl)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=tl(t)))return n.flags&=2047,void(Ol=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ol=t);Ol=t=e}while(null!==t);0===Tl&&(Tl=5)}function _u(e){var t=Fo();return $o(99,xu.bind(null,e,t)),null}function xu(e,t){do{Ou()}while(null!==Ql);if(0!=(48&xl))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<a;){var c=31-$t(a),s=1<<c;o[c]=0,l[c]=-1,u[c]=-1,a&=~s}if(null!==Xl&&0==(24&r)&&Xl.has(e)&&Xl.delete(e),e===Cl&&(Ol=Cl=null,Nl=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=xl,xl|=32,_l.current=null,Dr=Qt,dr(l=fr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(s=u.getSelection&&u.getSelection())&&0!==s.rangeCount){u=s.anchorNode,a=s.anchorOffset,c=s.focusNode,s=s.focusOffset;try{u.nodeType,c.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,m=0,h=0,y=l,v=null;t:for(;;){for(var b;y!==u||0!==a&&3!==y.nodeType||(d=f+a),y!==c||0!==s&&3!==y.nodeType||(p=f+s),3===y.nodeType&&(f+=y.nodeValue.length),null!==(b=y.firstChild);)v=y,y=b;for(;;){if(y===l)break t;if(v===u&&++m===a&&(d=f),v===c&&++h===s&&(p=f),null!==(b=y.nextSibling))break;v=(y=v).parentNode}y=b}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;zr={focusedElem:l,selectionRange:u},Qt=!1,ru=null,ou=!1,$l=r;do{try{Cu()}catch(e){if(null===$l)throw Error(i(330));ju($l,e),$l=$l.nextEffect}}while(null!==$l);ru=null,$l=r;do{try{for(l=e;null!==$l;){var g=$l.flags;if(16&g&&ve($l.stateNode,""),128&g){var w=$l.alternate;if(null!==w){var E=w.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(1038&g){case 2:hl($l),$l.flags&=-3;break;case 6:hl($l),$l.flags&=-3,gl($l.alternate,$l);break;case 1024:$l.flags&=-1025;break;case 1028:$l.flags&=-1025,gl($l.alternate,$l);break;case 4:gl($l.alternate,$l);break;case 8:bl(l,u=$l);var k=u.alternate;pl(u),null!==k&&pl(k)}$l=$l.nextEffect}}catch(e){if(null===$l)throw Error(i(330));ju($l,e),$l=$l.nextEffect}}while(null!==$l);if(E=zr,w=fr(),g=E.focusedElem,l=E.selectionRange,w!==g&&g&&g.ownerDocument&&sr(g.ownerDocument.documentElement,g)){null!==l&&dr(g)&&(w=l.start,void 0===(E=l.end)&&(E=w),"selectionStart"in g?(g.selectionStart=w,g.selectionEnd=Math.min(E,g.value.length)):(E=(w=g.ownerDocument||document)&&w.defaultView||window).getSelection&&(E=E.getSelection(),u=g.textContent.length,k=Math.min(l.start,u),l=void 0===l.end?k:Math.min(l.end,u),!E.extend&&k>l&&(u=l,l=k,k=u),u=cr(g,k),a=cr(g,l),u&&a&&(1!==E.rangeCount||E.anchorNode!==u.node||E.anchorOffset!==u.offset||E.focusNode!==a.node||E.focusOffset!==a.offset)&&((w=w.createRange()).setStart(u.node,u.offset),E.removeAllRanges(),k>l?(E.addRange(w),E.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),E.addRange(w))))),w=[];for(E=g;E=E.parentNode;)1===E.nodeType&&w.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof g.focus&&g.focus(),g=0;g<w.length;g++)(E=w[g]).element.scrollLeft=E.left,E.element.scrollTop=E.top}Qt=!!Dr,zr=Dr=null,e.current=n,$l=r;do{try{for(g=e;null!==$l;){var S=$l.flags;if(36&S&&sl(g,$l.alternate,$l),128&S){w=void 0;var _=$l.ref;if(null!==_){var x=$l.stateNode;switch($l.tag){case 5:w=x;break;default:w=x}"function"==typeof _?_(w):_.current=w}}$l=$l.nextEffect}}catch(e){if(null===$l)throw Error(i(330));ju($l,e),$l=$l.nextEffect}}while(null!==$l);$l=null,Mo(),xl=o}else e.current=n;if(ql)ql=!1,Ql=e,Kl=t;else for($l=r;null!==$l;)t=$l.nextEffect,$l.nextEffect=null,8&$l.flags&&((S=$l).sibling=null,S.stateNode=null),$l=t;if(0===(r=e.pendingLanes)&&(Hl=null),1===r?e===Zl?Jl++:(Jl=0,Zl=e):Jl=0,n=n.stateNode,wo&&"function"==typeof wo.onCommitFiberRoot)try{wo.onCommitFiberRoot(go,n,void 0,64==(64&n.current.flags))}catch(e){}if(cu(e,Ao()),Bl)throw Bl=!1,e=Vl,Vl=null,e;return 0!=(8&xl)||Vo(),null}function Cu(){for(;null!==$l;){var e=$l.alternate;ou||null===ru||(0!=(8&$l.flags)?Je($l,ru)&&(ou=!0):13===$l.tag&&El(e,$l)&&Je($l,ru)&&(ou=!0));var t=$l.flags;0!=(256&t)&&cl(e,$l),0==(512&t)||ql||(ql=!0,Bo(97,(function(){return Ou(),null}))),$l=$l.nextEffect}}function Ou(){if(90!==Kl){var e=97<Kl?97:Kl;return Kl=90,$o(e,Ru)}return!1}function Nu(e,t){Yl.push(t,e),ql||(ql=!0,Bo(97,(function(){return Ou(),null})))}function Pu(e,t){Gl.push(t,e),ql||(ql=!0,Bo(97,(function(){return Ou(),null})))}function Ru(){if(null===Ql)return!1;var e=Ql;if(Ql=null,0!=(48&xl))throw Error(i(331));var t=xl;xl|=32;var n=Gl;Gl=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));ju(a,e)}}for(n=Yl,Yl=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===a)throw Error(i(330));ju(a,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return xl=t,Vo(),!0}function Tu(e,t,n){la(e,t=al(0,t=nl(n,t),1)),t=au(),null!==(e=uu(e,1))&&(Wt(e,1,t),cu(e,t))}function ju(e,t){if(3===e.tag)Tu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Tu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hl||!Hl.has(r))){var o=il(n,e=nl(t,e),1);if(la(n,o),o=au(),null!==(n=uu(n,1)))Wt(n,1,o),cu(n,o);else if("function"==typeof r.componentDidCatch&&(null===Hl||!Hl.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Lu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=au(),e.pingedLanes|=e.suspendedLanes&n,Cl===e&&(Nl&n)===n&&(4===Tl||3===Tl&&(62914560&Nl)===Nl&&500>Ao()-Ul?yu(e,0):Dl|=n),cu(e,t)}function Mu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Fo()?1:2:(0===tu&&(tu=Ll),0===(t=At(62914560&~tu))&&(t=4194304))),n=au(),null!==(e=uu(e,t))&&(Wt(e,t,n),cu(e,n))}function Iu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Du(e,t,n,r){return new Iu(e,t,n,r)}function zu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Uu(e,t){var n=e.alternate;return null===n?((n=Du(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Au(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)zu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case _:return Fu(n.children,o,a,t);case D:l=8,o|=16;break;case x:l=8,o|=1;break;case C:return(e=Du(12,n,t,8|o)).elementType=C,e.type=C,e.lanes=a,e;case R:return(e=Du(13,n,t,o)).type=R,e.elementType=R,e.lanes=a,e;case T:return(e=Du(19,n,t,o)).elementType=T,e.lanes=a,e;case z:return Wu(n,o,a,t);case U:return(e=Du(24,n,t,o)).elementType=U,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case O:l=10;break e;case N:l=9;break e;case P:l=11;break e;case j:l=14;break e;case L:l=16,r=null;break e;case M:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Du(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Fu(e,t,n,r){return(e=Du(7,e,r,t)).lanes=n,e}function Wu(e,t,n,r){return(e=Du(23,e,r,t)).elementType=z,e.lanes=n,e}function $u(e,t,n){return(e=Du(6,e,null,t)).lanes=n,e}function Bu(e,t,n){return(t=Du(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Vu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ft(0),this.expirationTimes=Ft(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ft(0),this.mutableSourceEagerHydrationData=null}function Hu(e,t,n,r){var o=t.current,a=au(),l=iu(o);e:if(n){t:{if(Ye(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(po(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var c=n.type;if(po(c)){n=yo(n,c,u);break e}}n=u}else n=lo;return null===t.context?t.context=n:t.pendingContext=n,(t=ia(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),la(o,t),lu(o,l,a),l}function qu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Qu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ku(e,t){Qu(e,t),(e=e.alternate)&&Qu(e,t)}function Yu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Vu(e,t,null!=n&&!0===n.hydrate),t=Du(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,oa(t),e[Yr]=n.current,Or(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Gu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xu(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=qu(i);l.call(e)}}Hu(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Yu(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var u=o;o=function(){var e=qu(i);u.call(e)}}!function(e,t){var n=xl;xl&=-2,xl|=8;try{e(t)}finally{0===(xl=n)&&(Fl(),Vo())}}((function(){Hu(t,i,e,o)}))}return qu(i)}Wl=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||co.current)ji=!0;else{if(0==(n&r)){switch(ji=!1,t.tag){case 3:$i(t),Ba();break;case 5:Ta(t);break;case 1:po(t.type)&&vo(t);break;case 4:Pa(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;io(Ko,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Qi(e,t,n):(io(La,1&La.current),null!==(t=Ji(e,t,n))?t.sibling:null);io(La,1&La.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Xi(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),io(La,La.current),r)break;return null;case 23:case 24:return t.lanes=0,zi(e,t,n)}return Ji(e,t,n)}ji=0!=(16384&e.flags)}else ji=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=fo(t,uo.current),ta(t,n),o=ni(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,po(r)){var a=!0;vo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,oa(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&da(t,r,l,e),o.updater=pa,t.stateNode=o,o._reactInternals=t,va(t,r,e,n),t=Wi(null,t,r,!0,a,n)}else t.tag=0,Li(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return zu(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===j)return 14}return 2}(o),e=Qo(o,e),a){case 0:t=Ai(null,t,o,e,n);break e;case 1:t=Fi(null,t,o,e,n);break e;case 11:t=Mi(null,t,o,e,n);break e;case 14:t=Ii(null,t,o,Qo(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ai(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Fi(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 3:if($i(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,aa(e,t),ca(t,r,null,n),(r=t.memoizedState.element)===o)Ba(),t=Ji(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&(Da=Br(t.stateNode.containerInfo.firstChild),Ia=t,a=za=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Va.push(a);for(n=Sa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Li(e,t,r,n),Ba();t=t.child}return t;case 5:return Ta(t),null===e&&Fa(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,Ar(r,o)?l=null:null!==a&&Ar(r,a)&&(t.flags|=16),Ui(e,t),Li(e,t,l,n),t.child;case 6:return null===e&&Fa(t),null;case 13:return Qi(e,t,n);case 4:return Pa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ka(t,null,r,n):Li(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Mi(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 7:return Li(e,t,t.pendingProps,n),t.child;case 8:case 12:return Li(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var u=t.type._context;if(io(Ko,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0==(a=ar(u,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!co.current){t=Ji(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){l=u.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&a)){1===u.tag&&((s=ia(-1,n&-n)).tag=2,la(u,s)),u.lanes|=n,null!==(s=u.alternate)&&(s.lanes|=n),ea(u.return,n),c.lanes|=n;break}s=s.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Li(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,ta(t,n),r=r(o=na(o,a.unstable_observedBits)),t.flags|=1,Li(e,t,r,n),t.child;case 14:return a=Qo(o=t.type,t.pendingProps),Ii(e,t,o,a=Qo(o.type,a),r,n);case 15:return Di(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Qo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,po(r)?(e=!0,vo(t)):e=!1,ta(t,n),ha(t,r,o),va(t,r,o,n),Wi(null,t,r,!0,e,n);case 19:return Xi(e,t,n);case 23:case 24:return zi(e,t,n)}throw Error(i(156,t.tag))},Yu.prototype.render=function(e){Hu(e,this._internalRoot,null,null)},Yu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Hu(null,e,null,(function(){t[Yr]=null}))},Ze=function(e){13===e.tag&&(lu(e,4,au()),Ku(e,4))},et=function(e){13===e.tag&&(lu(e,67108864,au()),Ku(e,67108864))},tt=function(e){if(13===e.tag){var t=au(),n=iu(e);lu(e,n,t),Ku(e,n)}},nt=function(e,t){return t()},Ce=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=eo(r);if(!o)throw Error(i(90));X(r),ne(r,o)}}}break;case"textarea":ce(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},je=pu,Le=function(e,t,n,r,o){var a=xl;xl|=4;try{return $o(98,e.bind(null,t,n,r,o))}finally{0===(xl=a)&&(Fl(),Vo())}},Me=function(){0==(49&xl)&&(function(){if(null!==Xl){var e=Xl;Xl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cu(e,Ao())}))}Vo()}(),Ou())},Ie=function(e,t){var n=xl;xl|=2;try{return e(t)}finally{0===(xl=n)&&(Fl(),Vo())}};var Ju={findFiberByHostInstance:Xr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},Zu={bundleType:Ju.bundleType,version:Ju.version,rendererPackageName:Ju.rendererPackageName,rendererConfig:Ju.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:E.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=function(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ye(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Xe(o),e;if(a===r)return Xe(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},findFiberByHostInstance:Ju.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ec=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ec.isDisabled&&ec.supportsFiber)try{go=ec.inject(Zu),wo=ec}catch(he){}}t.render=function(e,t,n){if(!Gu(t))throw Error(i(200));return Xu(null,e,t,!1,n)},t.unstable_batchedUpdates=pu},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,m=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,y=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,b=n?Symbol.for("react.fundamental"):60117,g=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function E(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case c:case d:case y:case h:case u:return e;default:return t}}case o:return t}}}function k(e){return E(e)===f}t.AsyncMode=s,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=a,t.Lazy=y,t.Memo=h,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return k(e)||E(e)===s},t.isConcurrentMode=k,t.isContextConsumer=function(e){return E(e)===c},t.isContextProvider=function(e){return E(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return E(e)===d},t.isFragment=function(e){return E(e)===a},t.isLazy=function(e){return E(e)===y},t.isMemo=function(e){return E(e)===h},t.isPortal=function(e){return E(e)===o},t.isProfiler=function(e){return E(e)===l},t.isStrictMode=function(e){return E(e)===i},t.isSuspense=function(e){return E(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===l||e===i||e===p||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===h||e.$$typeof===u||e.$$typeof===c||e.$$typeof===d||e.$$typeof===b||e.$$typeof===g||e.$$typeof===w||e.$$typeof===v)},t.typeOf=E},864:(e,t,n)=>{"use strict";e.exports=n(921)},408:(e,t,n)=>{"use strict";var r=n(418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,u=60112;t.Suspense=60113;var c=60115,s=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),c=f("react.memo"),s=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h={};function y(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||m}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||m}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var g=b.prototype=new v;g.constructor=b,r(g,y.prototype),g.isPureReactComponent=!0;var w={current:null},E=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r,a={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)E.call(t,r)&&!k.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];a.children=c}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:w.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var x=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,n,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return i=i(u=e),e=""===r?"."+C(u,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(x,"$&/")+"/"),O(i,t,n,"",(function(e){return e}))):null!=i&&(_(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(x,"$&/")+"/")+e)),t.push(i)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var c=0;c<e.length;c++){var s=r+C(l=e[c],c);u+=O(l,t,n,s,i)}else if("function"==typeof(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=s.call(e),c=0;!(l=e.next()).done;)u+=O(l=l.value,t,n,s=r+C(l,c++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function N(e,t,n){if(null==e)return e;var r=[],o=0;return O(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function P(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var R={current:null};function T(){var e=R.current;if(null===e)throw Error(p(321));return e}var j={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!_(e))throw Error(p(143));return e}},t.Component=y,t.PureComponent=b,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=j,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)E.call(t,s)&&!k.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=_,t.lazy=function(e){return{$$typeof:s,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return T().useCallback(e,t)},t.useContext=function(e,t){return T().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return T().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return T().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return T().useLayoutEffect(e,t)},t.useMemo=function(e,t){return T().useMemo(e,t)},t.useReducer=function(e,t,n){return T().useReducer(e,t,n)},t.useRef=function(e){return T().useRef(e)},t.useState=function(e){return T().useState(e)},t.version="17.0.1"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,r,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,s=null,f=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==c?setTimeout(n,0,e):(c=e,setTimeout(f,0))},r=function(e,t){s=setTimeout(e,t)},o=function(){clearTimeout(s)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var h=!1,y=null,v=-1,b=5,g=0;t.unstable_shouldYield=function(){return t.unstable_now()>=g},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,E=w.port2;w.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();g=e+b;try{y(!0,e)?E.postMessage(null):(h=!1,y=null)}catch(e){throw E.postMessage(null),e}}else h=!1},n=function(e){y=e,h||(h=!0,E.postMessage(null))},r=function(e,n){v=d((function(){e(t.unstable_now())}),n)},o=function(){p(v),v=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<x(o,t)))break e;e[r]=t,e[n]=o,n=r}}function S(e){return void 0===(e=e[0])?null:e}function _(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>x(i,n))void 0!==u&&0>x(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==u&&0>x(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function x(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],O=[],N=1,P=null,R=3,T=!1,j=!1,L=!1;function M(e){for(var t=S(O);null!==t;){if(null===t.callback)_(O);else{if(!(t.startTime<=e))break;_(O),t.sortIndex=t.expirationTime,k(C,t)}t=S(O)}}function I(e){if(L=!1,M(e),!j)if(null!==S(C))j=!0,n(D);else{var t=S(O);null!==t&&r(I,t.startTime-e)}}function D(e,n){j=!1,L&&(L=!1,o()),T=!0;var a=R;try{for(M(n),P=S(C);null!==P&&(!(P.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=P.callback;if("function"==typeof i){P.callback=null,R=P.priorityLevel;var l=i(P.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?P.callback=l:P===S(C)&&_(C),M(n)}else _(C);P=S(C)}if(null!==P)var u=!0;else{var c=S(O);null!==c&&r(I,c.startTime-n),u=!1}return u}finally{P=null,R=a,T=!1}}var z=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){j||T||(j=!0,n(D))},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_getFirstCallbackNode=function(){return S(C)},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_scheduleCallback=function(e,a,i){var l=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:N++,callback:a,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,k(O,e),null===S(C)&&e===S(O)&&(L?o():L=!0,r(I,i-l))):(e.sortIndex=u,k(C,e),j||T||(j=!0,n(D))),e},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},121:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r}),e=n.hmd(e);const r=function(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:e)}},n={};function r(e){if(n[e])return n[e].exports;var o=n[e]={id:e,loaded:!1,exports:{}};return t[e](o,o.exports,r),o.loaded=!0,o.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var t=r(294),n=r(935),o=r(697),a=r.n(o),i=t.createContext(null),l=function(e){e()},u=function(){return l},c={notify:function(){}},s=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=c,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=function(){var e=u(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=c)},e}();const f=function(e){var n=e.store,r=e.context,o=e.children,a=(0,t.useMemo)((function(){var e=new s(n);return e.onStateChange=e.notifyNestedSubs,{store:n,subscription:e}}),[n]),l=(0,t.useMemo)((function(){return n.getState()}),[n]);(0,t.useEffect)((function(){var e=a.subscription;return e.trySubscribe(),l!==n.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[a,l]);var u=r||i;return t.createElement(u.Provider,{value:a},o)};function d(){return(d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function p(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var m=r(679),h=r.n(m),y=r(864),v="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?t.useLayoutEffect:t.useEffect,b=[],g=[null,null];function w(e,t){var n=e[1];return[t.payload,n+1]}function E(e,t,n){v((function(){return e.apply(void 0,t)}),n)}function k(e,t,n,r,o,a,i){e.current=r,t.current=o,n.current=!1,a.current&&(a.current=null,i())}function S(e,t,n,r,o,a,i,l,u,c){if(e){var s=!1,f=null,d=function(){if(!s){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===a.current?i.current||u():(a.current=e,l.current=e,i.current=!0,c({type:"STORE_UPDATED",payload:{error:n}}))}};return n.onStateChange=d,n.trySubscribe(),d(),function(){if(s=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var _=function(){return[null,0]};function x(e,n){void 0===n&&(n={});var r=n,o=r.getDisplayName,a=void 0===o?function(e){return"ConnectAdvanced("+e+")"}:o,l=r.methodName,u=void 0===l?"connectAdvanced":l,c=r.renderCountProp,f=void 0===c?void 0:c,m=r.shouldHandleStateChanges,v=void 0===m||m,x=r.storeKey,C=void 0===x?"store":x,O=(r.withRef,r.forwardRef),N=void 0!==O&&O,P=r.context,R=void 0===P?i:P,T=p(r,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),j=R;return function(n){var r=n.displayName||n.name||"Component",o=a(r),i=d({},T,{getDisplayName:a,methodName:u,renderCountProp:f,shouldHandleStateChanges:v,storeKey:C,displayName:o,wrappedComponentName:r,WrappedComponent:n}),l=T.pure,c=l?t.useMemo:function(e){return e()};function m(r){var o=(0,t.useMemo)((function(){var e=r.reactReduxForwardedRef,t=p(r,["reactReduxForwardedRef"]);return[r.context,e,t]}),[r]),a=o[0],l=o[1],u=o[2],f=(0,t.useMemo)((function(){return a&&a.Consumer&&(0,y.isContextConsumer)(t.createElement(a.Consumer,null))?a:j}),[a,j]),m=(0,t.useContext)(f),h=Boolean(r.store)&&Boolean(r.store.getState)&&Boolean(r.store.dispatch);Boolean(m)&&Boolean(m.store);var x=h?r.store:m.store,C=(0,t.useMemo)((function(){return function(t){return e(t.dispatch,i)}(x)}),[x]),O=(0,t.useMemo)((function(){if(!v)return g;var e=new s(x,h?null:m.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[x,h,m]),N=O[0],P=O[1],R=(0,t.useMemo)((function(){return h?m:d({},m,{subscription:N})}),[h,m,N]),T=(0,t.useReducer)(w,b,_),L=T[0][0],M=T[1];if(L&&L.error)throw L.error;var I=(0,t.useRef)(),D=(0,t.useRef)(u),z=(0,t.useRef)(),U=(0,t.useRef)(!1),A=c((function(){return z.current&&u===D.current?z.current:C(x.getState(),u)}),[x,L,u]);E(k,[D,I,U,u,A,z,P]),E(S,[v,x,N,C,D,I,U,z,P,M],[x,N,C]);var F=(0,t.useMemo)((function(){return t.createElement(n,d({},A,{ref:l}))}),[l,n,A]);return(0,t.useMemo)((function(){return v?t.createElement(f.Provider,{value:R},F):F}),[f,F,R])}var x=l?t.memo(m):m;if(x.WrappedComponent=n,x.displayName=o,N){var O=t.forwardRef((function(e,n){return t.createElement(x,d({},e,{reactReduxForwardedRef:n}))}));return O.displayName=o,O.WrappedComponent=n,h()(O,n)}return h()(x,n)}}function C(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function O(e,t){if(C(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!C(e[n[o]],t[n[o]]))return!1;return!0}var N=r(121),P=function(){return Math.random().toString(36).substring(7).split("").join(".")},R={INIT:"@@redux/INIT"+P(),REPLACE:"@@redux/REPLACE"+P(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+P()}};function T(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function j(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(j)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,a=t,i=[],l=i,u=!1;function c(){l===i&&(l=i.slice())}function s(){if(u)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return a}function f(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(u)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return c(),l.push(e),function(){if(t){if(u)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,c();var n=l.indexOf(e);l.splice(n,1),i=null}}}function d(e){if(!T(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(u)throw new Error("Reducers may not dispatch actions.");try{u=!0,a=o(a,e)}finally{u=!1}for(var t=i=l,n=0;n<t.length;n++)(0,t[n])();return e}function p(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,d({type:R.REPLACE})}function m(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(s())}return n(),{unsubscribe:t(n)}}})[N.Z]=function(){return this},e}return d({type:R.INIT}),(r={dispatch:d,subscribe:f,getState:s,replaceReducer:p})[N.Z]=m,r}function L(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function M(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var a,i=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:R.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:R.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+R.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},l=0;l<i.length;l++){var u=i[l],c=n[u],s=e[u],f=c(s,t);if(void 0===f){var d=L(u,t);throw new Error(d)}o[u]=f,r=r||f!==s}return(r=r||i.length!==Object.keys(e).length)?o:e}}function I(e,t){return function(){return t(e.apply(this,arguments))}}function D(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function z(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function U(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?z(n,!0).forEach((function(t){D(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):z(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function A(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function F(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(o)}));return U({},n,{dispatch:r=A.apply(void 0,a)(n.dispatch)})}}}function W(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function B(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function V(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=B(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=B(o),o=r(t,n)),o},r}}const H=[function(e){return"function"==typeof e?V(e):void 0},function(e){return e?void 0:W((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?W((function(t){return function(e,t){if("function"==typeof e)return I(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=I(o,t))}return n}(e,t)})):void 0}],q=[function(e){return"function"==typeof e?V(e):void 0},function(e){return e?void 0:W((function(){return{}}))}];function Q(e,t,n){return d({},n,e,t)}const K=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,a=n.areMergedPropsEqual,i=!1;return function(t,n,l){var u=e(t,n,l);return i?o&&a(u,r)||(r=u):(i=!0,r=u),r}}}(e):void 0},function(e){return e?void 0:function(){return Q}}];function Y(e,t,n,r){return function(o,a){return n(e(o,a),t(r,a),a)}}function G(e,t,n,r,o){var a,i,l,u,c,s=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;return function(o,m){return p?function(o,p){var m,h,y=!f(p,i),v=!s(o,a);return a=o,i=p,y&&v?(l=e(a,i),t.dependsOnOwnProps&&(u=t(r,i)),c=n(l,u,i)):y?(e.dependsOnOwnProps&&(l=e(a,i)),t.dependsOnOwnProps&&(u=t(r,i)),c=n(l,u,i)):v?(m=e(a,i),h=!d(m,l),l=m,h&&(c=n(l,u,i)),c):c}(o,m):(l=e(a=o,i=m),u=t(r,i),c=n(l,u,i),p=!0,c)}}function X(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,a=p(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,a),l=r(e,a),u=o(e,a);return(a.pure?G:Y)(i,l,u,e,a)}function J(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function Z(e,t){return e===t}function ee(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?x:n,o=t.mapStateToPropsFactories,a=void 0===o?q:o,i=t.mapDispatchToPropsFactories,l=void 0===i?H:i,u=t.mergePropsFactories,c=void 0===u?K:u,s=t.selectorFactory,f=void 0===s?X:s;return function(e,t,n,o){void 0===o&&(o={});var i=o,u=i.pure,s=void 0===u||u,m=i.areStatesEqual,h=void 0===m?Z:m,y=i.areOwnPropsEqual,v=void 0===y?O:y,b=i.areStatePropsEqual,g=void 0===b?O:b,w=i.areMergedPropsEqual,E=void 0===w?O:w,k=p(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),S=J(e,a,"mapStateToProps"),_=J(t,l,"mapDispatchToProps"),x=J(n,c,"mergeProps");return r(f,d({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:S,initMapDispatchToProps:_,initMergeProps:x,pure:s,areStatesEqual:h,areOwnPropsEqual:v,areStatePropsEqual:g,areMergedPropsEqual:E},k))}}const te=ee();var ne;function re(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function oe(e){return"/"===e.charAt(0)}function ae(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}ne=n.unstable_batchedUpdates,l=ne;function ie(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}const le=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=ie(t),o=ie(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1};const ue=function(e,t){if(!e)throw new Error("Invariant failed")};function ce(e){return"/"===e.charAt(0)?e:"/"+e}function se(e){return"/"===e.charAt(0)?e.substr(1):e}function fe(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function de(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function pe(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function me(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=d({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],a=e&&oe(e),i=t&&oe(t),l=a||i;if(e&&oe(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var u=o[o.length-1];n="."===u||".."===u||""===u}else n=!1;for(var c=0,s=o.length;s>=0;s--){var f=o[s];"."===f?ae(o,s):".."===f?(ae(o,s),c++):c&&(ae(o,s),c--)}if(!l)for(;c--;c)o.unshift("..");!l||""===o[0]||o[0]&&oe(o[0])||o.unshift("");var d=o.join("/");return n&&"/"!==d.substr(-1)&&(d+="/"),d}(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function he(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):o(!0):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var ye=!("undefined"==typeof window||!window.document||!window.document.createElement);function ve(e,t){t(window.confirm(e))}var be="hashchange",ge={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+se(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:se,decodePath:ce},slash:{encodePath:ce,decodePath:ce}};function we(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function Ee(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function ke(e){window.location.replace(we(window.location.href)+"#"+e)}function Se(e){void 0===e&&(e={}),ye||ue(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?ve:r,a=n.hashType,i=void 0===a?"slash":a,l=e.basename?de(ce(e.basename)):"",u=ge[i],c=u.encodePath,s=u.decodePath;function f(){var e=s(Ee());return l&&(e=fe(e,l)),me(e)}var p=he();function m(e){d(C,e),C.length=t.length,p.notifyListeners(C.location,C.action)}var h=!1,y=null;function v(){var e,t,n=Ee(),r=c(n);if(n!==r)ke(r);else{var a=f(),i=C.location;if(!h&&(t=a,(e=i).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(y===pe(a))return;y=null,function(e){if(h)h=!1,m();else{p.confirmTransitionTo(e,"POP",o,(function(t){t?m({action:"POP",location:e}):function(e){var t=C.location,n=E.lastIndexOf(pe(t));-1===n&&(n=0);var r=E.lastIndexOf(pe(e));-1===r&&(r=0);var o=n-r;o&&(h=!0,k(o))}(e)}))}}(a)}}var b=Ee(),g=c(b);b!==g&&ke(g);var w=f(),E=[pe(w)];function k(e){t.go(e)}var S=0;function _(e){1===(S+=e)&&1===e?window.addEventListener(be,v):0===S&&window.removeEventListener(be,v)}var x=!1,C={length:t.length,action:"POP",location:w,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=we(window.location.href)),n+"#"+c(l+pe(e))},push:function(e,t){var n="PUSH",r=me(e,void 0,void 0,C.location);p.confirmTransitionTo(r,n,o,(function(e){if(e){var t=pe(r),o=c(l+t);if(Ee()!==o){y=t,function(e){window.location.hash=e}(o);var a=E.lastIndexOf(pe(C.location)),i=E.slice(0,a+1);i.push(t),E=i,m({action:n,location:r})}else m()}}))},replace:function(e,t){var n="REPLACE",r=me(e,void 0,void 0,C.location);p.confirmTransitionTo(r,n,o,(function(e){if(e){var t=pe(r),o=c(l+t);Ee()!==o&&(y=t,ke(o));var a=E.indexOf(pe(C.location));-1!==a&&(E[a]=t),m({action:n,location:r})}}))},go:k,goBack:function(){k(-1)},goForward:function(){k(1)},block:function(e){void 0===e&&(e=!1);var t=p.setPrompt(e);return x||(_(1),x=!0),function(){return x&&(x=!1,_(-1)),t()}},listen:function(e){var t=p.appendListener(e);return _(1),function(){_(-1),t()}}};return C}var _e=1073741823,xe="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==r.g?r.g:{};function Ce(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}const Oe=t.createContext||function(e,n){var r,o,i,l="__create-react-context-"+((xe[i="__global_unique_id__"]=(xe[i]||0)+1)+"__"),u=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=Ce(t.props.value),t}re(t,e);var r=t.prototype;return r.getChildContext=function(){var e;return(e={})[l]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,r=this.props.value,o=e.value;((a=r)===(i=o)?0!==a||1/a==1/i:a!=a&&i!=i)?t=0:(t="function"==typeof n?n(r,o):_e,0!=(t|=0)&&this.emitter.set(e.value,t))}var a,i},r.render=function(){return this.props.children},t}(t.Component);u.childContextTypes=((r={})[l]=a().object.isRequired,r);var c=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}re(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?_e:t},r.componentDidMount=function(){this.context[l]&&this.context[l].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?_e:e},r.componentWillUnmount=function(){this.context[l]&&this.context[l].off(this.onUpdate)},r.getValue=function(){return this.context[l]?this.context[l].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(t.Component);return c.contextTypes=((o={})[l]=a().object,o),{Provider:u,Consumer:c}};var Ne=r(779),Pe=r.n(Ne),Re=function(e){var t=Oe();return t.displayName="Router-History",t}(),Te=function(e){var t=Oe();return t.displayName="Router",t}(),je=function(e){function n(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}re(n,e),n.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var r=n.prototype;return r.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},r.componentWillUnmount=function(){this.unlisten&&this.unlisten()},r.render=function(){return t.createElement(Te.Provider,{value:{history:this.props.history,location:this.state.location,match:n.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},t.createElement(Re.Provider,{children:this.props.children||null,value:this.props.history}))},n}(t.Component);t.Component;var Le=function(e){function t(){return e.apply(this,arguments)||this}re(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(t.Component),Me={},Ie=0;function De(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(Me[e])return Me[e];var t=Pe().compile(e);return Ie<1e4&&(Me[e]=t,Ie++),t}(e)(t,{pretty:!0})}function ze(e){var n=e.computedMatch,r=e.to,o=e.push,a=void 0!==o&&o;return t.createElement(Te.Consumer,null,(function(e){e||ue(!1);var o=e.history,i=e.staticContext,l=a?o.push:o.replace,u=me(n?"string"==typeof r?De(r,n.params):d({},r,{pathname:De(r.pathname,n.params)}):r);return i?(l(u),null):t.createElement(Le,{onMount:function(){l(u)},onUpdate:function(e,t){var n,r,o=me(t.to);n=o,r=d({},u,{key:o.key}),n.pathname===r.pathname&&n.search===r.search&&n.hash===r.hash&&n.key===r.key&&le(n.state,r.state)||l(u)},to:r})}))}var Ue={},Ae=0;function Fe(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,a=void 0!==o&&o,i=n.strict,l=void 0!==i&&i,u=n.sensitive,c=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=Ue[n]||(Ue[n]={});if(r[e])return r[e];var o=[],a={regexp:Pe()(e,o,t),keys:o};return Ae<1e4&&(r[e]=a,Ae++),a}(n,{end:a,strict:l,sensitive:c}),o=r.regexp,i=r.keys,u=o.exec(e);if(!u)return null;var s=u[0],f=u.slice(1),d=e===s;return a&&!d?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:d,params:i.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var We=function(e){function n(){return e.apply(this,arguments)||this}return re(n,e),n.prototype.render=function(){var e=this;return t.createElement(Te.Consumer,null,(function(n){n||ue(!1);var r=e.props.location||n.location,o=d({},n,{location:r,match:e.props.computedMatch?e.props.computedMatch:e.props.path?Fe(r.pathname,e.props):n.match}),a=e.props,i=a.children,l=a.component,u=a.render;return Array.isArray(i)&&0===i.length&&(i=null),t.createElement(Te.Provider,{value:o},o.match?i?"function"==typeof i?i(o):i:l?t.createElement(l,o):u?u(o):null:"function"==typeof i?i(o):null)}))},n}(t.Component);function $e(e){var n="withRouter("+(e.displayName||e.name)+")",r=function(n){var r=n.wrappedComponentRef,o=p(n,["wrappedComponentRef"]);return t.createElement(Te.Consumer,null,(function(n){return n||ue(!1),t.createElement(e,d({},o,n,{ref:r}))}))};return r.displayName=n,r.WrappedComponent=e,h()(r,e)}t.Component,t.Component,t.useContext,t.Component;var Be=function(e){function n(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=Se(t.props),t}return re(n,e),n.prototype.render=function(){return t.createElement(je,{history:this.history,children:this.props.children})},n}(t.Component),Ve=function(e,t){return"function"==typeof e?e(t):e},He=function(e,t){return"string"==typeof e?me(e,null,null,t):e},qe=function(e){return e},Qe=t.forwardRef;void 0===Qe&&(Qe=qe);var Ke=Qe((function(e,n){var r=e.innerRef,o=e.navigate,a=e.onClick,i=p(e,["innerRef","navigate","onClick"]),l=i.target,u=d({},i,{onClick:function(e){try{a&&a(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),o())}});return u.ref=qe!==Qe&&n||r,t.createElement("a",u)})),Ye=Qe((function(e,n){var r=e.component,o=void 0===r?Ke:r,a=e.replace,i=e.to,l=e.innerRef,u=p(e,["component","replace","to","innerRef"]);return t.createElement(Te.Consumer,null,(function(e){e||ue(!1);var r=e.history,c=He(Ve(i,e.location),e.location),s=c?r.createHref(c):"",f=d({},u,{href:s,navigate:function(){var t=Ve(i,e.location);(a?r.replace:r.push)(t)}});return qe!==Qe?f.ref=n||l:f.innerRef=l,t.createElement(o,f)}))})),Ge=function(e){return e},Xe=t.forwardRef;void 0===Xe&&(Xe=Ge),Xe((function(e,n){var r=e["aria-current"],o=void 0===r?"page":r,a=e.activeClassName,i=void 0===a?"active":a,l=e.activeStyle,u=e.className,c=e.exact,s=e.isActive,f=e.location,m=e.sensitive,h=e.strict,y=e.style,v=e.to,b=e.innerRef,g=p(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return t.createElement(Te.Consumer,null,(function(e){e||ue(!1);var r=f||e.location,a=He(Ve(v,r),r),p=a.pathname,w=p&&p.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),E=w?Fe(r.pathname,{path:w,exact:c,sensitive:m,strict:h}):null,k=!!(s?s(E,r):E),S=k?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(u,i):u,_=k?d({},y,{},l):y,x=d({"aria-current":k&&o||null,className:S,style:_,to:a},g);return Ge!==Xe?x.ref=n||b:x.innerRef=b,t.createElement(Ye,x)}))}));var Je=function(e){return{loggedIn:Boolean(e.session.id)}},Ze=$e(te(Je,null)((function(e){var n=e.component,r=e.path,o=e.loggedIn,a=e.exact;return t.createElement(We,{path:r,exact:a,render:function(e){return o?t.createElement(ze,{to:"/dashboard"}):t.createElement(n,e)}})}))),et=$e(te(Je)((function(e){var n=e.component,r=e.path,o=e.loggedIn,a=e.exact;return t.createElement(We,{path:r,exact:a,render:function(e){return o?t.createElement(n,e):t.createElement(ze,{to:"/"})}})}))),tt="RECEIVE_CURRENT_USER",nt="LOGOUT_CURRENT_USER",rt="RECEIVE_SESSION_ERRORS",ot="REMOVE_SESSION_ERROR",at=function(e){return{type:tt,user:e}},it=function(e){return{type:rt,errors:e}},lt=function(){return{type:ot}},ut=function(e){return function(t){return function(e){return $.ajax({method:"POST",url:"/api/session",data:{user:e}})}(e).then((function(e){t(at(e))}),(function(e){t(it(e.responseJSON))}))}};const ct=$e((function(e){var n;return n="/"===e.location.pathname||"/signup"===e.location.pathname?t.createElement(Ye,{to:"/login"},"Log In"):t.createElement(Ye,{to:"/signup"},"Sign Up"),t.createElement("div",{className:"session_header"},t.createElement(Ye,{className:"nav_session_logo_header",to:"/"}," TRACE "),t.createElement(Ye,{className:"splash_log_in"},n))}));function st(e){return(st="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ft(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function dt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function pt(e,t){return(pt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function mt(e,t){return!t||"object"!==st(t)&&"function"!=typeof t?ht(e):t}function ht(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function yt(e){return(yt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const vt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&pt(e,t)}(l,e);var n,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=yt(o);if(a){var n=yt(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return mt(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=i.call(this,e)).state={email:"",password:""},t.handleSubmit=t.handleSubmit.bind(ht(t)),t.handleChange=t.handleChange.bind(ht(t)),t.renderErrors=t.renderErrors.bind(ht(t)),t}return n=l,(r=[{key:"componentWillUnmount",value:function(){this.props.removeErrors()}},{key:"handleSubmit",value:function(e){e.preventDefault();var t=Object.assign({},this.state);this.props.processForm(t)}},{key:"handleChange",value:function(e){var t=this;return function(n){t.setState(ft({},e,n.target.value))}}},{key:"renderErrors",value:function(){return t.createElement("ul",null,this.props.errors.map((function(e,n){return t.createElement("li",{key:"error-".concat(n)},e)})))}},{key:"render",value:function(){var e,n,r,o,a,i,l=this,u=this.props.errors.map((function(e){return t.createElement("li",null,e)})),c=this.props.errors.length?t.createElement("ul",null,u):null;return r="login"===this.props.formType?"Log In":"Sign Up",o="login"===this.props.formType?"Log In":"Join Trace today, it's Free.",a="login"===this.props.formType?"Or log in with email":"or sign up with your email address","signup"===this.props.formType&&(i="By signing up for Trace, you agree to the.Terms of Service.View our Privacy Policy"),t.createElement("div",null,t.createElement(ct,null),t.createElement("div",{className:"background_image"},t.createElement("div",{className:"form_background"},t.createElement("body",{className:"form_container"},t.createElement("div",{className:"form_title"},t.createElement("h1",null,o)),t.createElement("section",{className:"error_message"},c),t.createElement("form",{className:"session_form",onSubmit:this.handleSubmit},t.createElement("br",null),t.createElement("div",{className:"form_body"},t.createElement("span",{className:"session_form_lines",id:"session_form_demo",onClick:function(){l.props.login({email:"guest",password:"password"})}}," Demo User "),t.createElement("br",null),t.createElement("section",{className:"orSwitch"},a),t.createElement("br",null),t.createElement("input",(ft(e={className:"session_form_lines"},"className","form_input"),ft(e,"type","text"),ft(e,"value",this.state.email),ft(e,"onChange",this.handleChange("email")),ft(e,"placeholder","     Your Email"),e)),t.createElement("input",(ft(n={className:"session_form_lines"},"className","form_input"),ft(n,"type","password"),ft(n,"value",this.state.password),ft(n,"onChange",this.handleChange("password")),ft(n,"placeholder","     Password"),n)),t.createElement("br",null),t.createElement("button",{className:"session_form_lines",id:"session_button"},r)),t.createElement("p",{className:"session_fine_print"},i))))))}}])&&dt(n.prototype,r),l}(t.Component),bt=te((function(e){var t=e.errors;return{errors:Object.values(t.session),formType:"signup"}}),(function(e){return{processForm:function(t){return e(function(e){return function(t){return function(e){return $.ajax({method:"POST",url:"/api/users",data:{user:e}})}(e).then((function(e){return t(at(e))}),(function(e){return t(it(e.responseJSON))}))}}(t))},login:function(t){return e(ut(t))},removeErrors:function(){return e(lt())}}}))(vt),gt=te((function(e){var t=e.errors;return{errors:Object.values(t.session),formType:"login"}}),(function(e){return{processForm:function(t){return e(ut(t))},login:function(t){return e(ut(t))},removeErrors:function(){return e(lt())}}}))(vt),wt=function(e){return t.createElement("div",null,t.createElement("h1",null,t.createElement("footer",null,t.createElement("div",{className:"session_footer"},t.createElement("p",{className:"footer_logo"},"TRACE"),t.createElement("ul",null,t.createElement("li",{className:"footer_top_list"},"Technologies"),t.createElement("li",{className:"footer_list"},"JavaScript"),t.createElement("li",{className:"footer_list"},"Ruby on Rails"),t.createElement("li",{className:"footer_list"},"React / Redux"),t.createElement("li",{className:"footer_list"},"HTML / CSS"),t.createElement("li",{className:"footer_list"},"PostgreSQL")),t.createElement("ul",null,t.createElement("li",{className:"footer_top_list"},"Social Media"),t.createElement("li",{className:"footer_list"}," ",t.createElement("a",{href:"https://www.linkedin.com/in/gabriel-reiter-7352b2b7/",target:"_blank"}," Linked-In")),t.createElement("li",{className:"footer_list"},t.createElement("a",{href:"https://angel.co/u/gabriel-reiter",target:"_blank"},"Angel List")),t.createElement("li",{className:"footer_list"},t.createElement("a",{href:"https://github.com/greiter18",target:"_blank"},"GitHub")),t.createElement("li",{className:"footer_list"},t.createElement("a",{className:"footer_list",href:"https://github.com/greiter18/Trace",target:"_blank"},"GitHub - Trace"))),t.createElement("ul",null,t.createElement("li",{className:"footer_top_list"},"GET STARTED"),t.createElement("li",{className:"footer_list"},t.createElement(Ye,{to:"/signup"},"SIGN UP")),t.createElement("li",{className:"footer_list"},t.createElement(Ye,{to:"/login"},"LOG IN")))))))};function Et(e){return(Et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function kt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function St(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _t(e,t){return(_t=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function xt(e,t){return!t||"object"!==Et(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ct(e){return(Ct=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const Ot=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_t(e,t)}(l,e);var n,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Ct(o);if(a){var n=Ct(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return xt(this,e)});function l(){return kt(this,l),i.apply(this,arguments)}return n=l,(r=[{key:"componentDidMount",value:function(){this.props.clearRoutes(),this.props.clearWorkouts()}},{key:"render",value:function(){var e=this;return t.createElement("div",null,t.createElement(ct,null),t.createElement("div",{className:"splash_form"},t.createElement("h1",{className:"headLine"},"The #1 app for runners and cyclists"),t.createElement("br",null),t.createElement("div",{className:"splash_middle"},t.createElement("img",{className:"home_image",src:"https://d3nn82uaxijpm6.cloudfront.net/assets/website/show_simple/devices-header-3349320fa849e6a297a3b0d64a6dfdef7307b0fe50f6329a459a0105b76ffff8.jpg"}),t.createElement("div",{className:"splash_center_form"},t.createElement("div",{className:"splash_main_form"},t.createElement("div",{className:"splash_center_form_buttons"},t.createElement(Ye,{className:"splash_buttons",id:"sign_up_button",to:"/signup"},"Sign Up"),t.createElement("div",{className:"or-box"},t.createElement("span",{className:"or_box_line"}),t.createElement("span",{className:"or_box_or"}," or "),t.createElement("span",{className:"or_box_line"})),t.createElement("button",{className:"splash_buttons",id:"splash_demo_button",onClick:function(){e.props.login({email:"guest",password:"password"})}},"Demo User "))),t.createElement("div",{className:"splash_fine_print"},t.createElement("br",null),t.createElement("span",null,"By signing up for Trace, you agree to the Terms of Service. View our Privacy Policy."),t.createElement("br",null),t.createElement("span",{className:"already_a_member"},"Already a member? ",t.createElement(Ye,{className:"member_link",to:"/login"},"Log In"))))),t.createElement("br",null)),t.createElement(wt,null))}}])&&St(n.prototype,r),l}(t.Component);var Nt="RECEIVE_ROUTE",Pt="RECEIVE_ALL_ROUTES",Rt="REMOVE_ROUTE",Tt="CLEAR_ROUTES",jt=function(e){return{type:Nt,route:e}},Lt=function(e){return function(t){return(n=e,$.ajax({method:"Get",url:"/api/routes/".concat(n)})).then((function(e){t(jt(e))}));var n}},Mt=function(e){return function(t){return(n=e,$.ajax({method:"Get",url:"/api/users/".concat(n,"/routes")})).then((function(e){t(function(e){return{type:Pt,routes:e}}(e))}));var n}},It=function(e){return function(t){return function(e){return $.ajax({method:"DELETE",url:"/api/routes/".concat(e)})}(e).then((function(){t(function(e){return{type:Rt,routeId:e}}(e))}))}},Dt="RECEIVE_CURRENT_WORKOUT",zt="RECEIVE_ALL_WORKOUTS",Ut="REMOVE_WORKOUT",At="CLEAR_WORKOUTS",Ft=function(e){return{type:Dt,workout:e}},Wt=function(e){return function(t){return(n=e,$.ajax({method:"Get",url:"/api/workouts/".concat(n)})).then((function(e){t(Ft(e))}));var n}},$t=function(e){return function(t){return(n=e,$.ajax({method:"Get",url:"/api/users/".concat(n,"/workouts")})).then((function(e){t(function(e){return{type:zt,workouts:e}}(e))}));var n}},Bt=function(e){return function(t){return function(e){return $.ajax({method:"DELETE",url:"/api/workouts/".concat(e)})}(e).then((function(){t(function(e){return{type:Ut,workoutId:e}}(e))}))}};const Vt=te((function(e,t){return{}}),(function(e){return{login:function(t){return e(ut(t))},clearRoutes:function(){return e({type:Tt})},clearWorkouts:function(){return e({type:At})}}}))(Ot),Ht=function(e){var n=e.logout;return t.createElement("div",{className:"main_nav_head"},t.createElement("div",{className:"nav-left"},t.createElement(Ye,{className:"nav_main_logo",to:"/dashboard"}," TRACE "),t.createElement("div",{className:"dropdown",id:"dashboardDropdown"},t.createElement("button",{className:"dropbtn"},"Dashboard  ",t.createElement("i",{class:"fa fa-chevron-down","aria-hidden":"true"}," ")),t.createElement("div",{className:"dropdown_content"},t.createElement(Ye,{to:"/dashboard"},"Activity Feed"),t.createElement(Ye,{to:"/workouts"},"My Workouts"),t.createElement(Ye,{to:"/routes"},"My Routes")))),t.createElement("div",{className:"nav-right"},t.createElement("div",{className:"dropdown"},t.createElement("button",{className:"dropbtn"},t.createElement("i",{id:"navUser",class:"far fa-user-circle"})," ",t.createElement("i",{class:"fa fa-chevron-down","aria-hidden":"true"})),t.createElement("div",{className:"dropdown_content",id:"logOut_dropdown"},t.createElement("a",{onClick:n},"Log Out"))),t.createElement("div",{className:"dropdown"},t.createElement("button",{className:"dropbtn"},t.createElement("i",{id:"navCross",className:"fas fa-plus-circle"})),t.createElement("div",{className:"dropdown_content",id:"create_dropdown"},t.createElement(Ye,{to:"/new/routes"}," ",t.createElement("i",{className:"fas fa-angle-up"}),"  Create Route"),t.createElement(Ye,{to:"/new/workouts"},t.createElement("i",{className:"fas fa-arrow-circle-up"}),"  Create Workout")))))},qt=te((function(e){var t=e.session;return{currentUser:e.entities.users[t.id]}}),(function(e){return{logout:function(){return e((function(e){return $.ajax({method:"DELETE",url:"/api/session"}).then((function(t){return e({type:nt})}))}))}}}))(Ht),Qt=function(e){return t.createElement("div",{className:"main_profile"},t.createElement("i",{id:"profileUser",className:"fas fa-user-circle"}),t.createElement("body",{id:"profileBody"},t.createElement("h1",{className:"profile_email"},e.email),t.createElement("br",null),t.createElement("div",{className:"profile_totals"},t.createElement("div",{className:"total_activities"},t.createElement("p",{className:"profile_category"},"Workouts"),t.createElement(Ye,{to:"/workouts",className:"total_number"},e.workoutCount||0)),t.createElement("div",{className:"total_routes"},t.createElement("p",{className:"profile_category"},"Routes"),t.createElement(Ye,{to:"/routes",className:"total_number"},e.routeCount||0)))))},Kt=function(e){var n=e.workout,r=e.email,o=e.route;return t.createElement("div",{id:"feedCard"},t.createElement("div",{id:"feedCardTop"},t.createElement("i",{id:"runnerIcon",className:"fas fa-user-circle"}),t.createElement("h1",{id:"feedEmail"}," ",r)),t.createElement("div",{id:"feedCardMid"},t.createElement("i",{id:"personRunning",className:"fas fa-running"}),t.createElement(Ye,{to:"/workouts/".concat(n.id),id:"feedTitle"}," ",null==n?void 0:n.title)),t.createElement("h1",{id:"feedDescription"}," ",null==n?void 0:n.description),t.createElement("div",{id:"feedCardMid"},t.createElement("div",{id:"feedTime"},t.createElement("h1",{id:"feedTimeTime"},"Time"),t.createElement("h1",{id:"feedTimenums"}," ",null==n?void 0:n.hours,"h ",null==n?void 0:n.minutes,"m ",null==n?void 0:n.seconds,"s")),t.createElement("i",{id:"trophy",class:"fas fa-trophy"})),t.createElement(Ye,{to:"/workouts/".concat(n.id)},t.createElement("img",{id:"routefeedImage",src:o[n.route_id].image,alt:"route image"})))},Yt=function(e){return t.createElement("div",null,t.createElement("footer",{id:"footer"},t.createElement("div",{className:"main_footer"},t.createElement("ul",null,t.createElement("li",null,t.createElement(Ye,{to:"/dashboard",className:"main_footer_logo"},"TRACE"),"  "),t.createElement("li",{className:"main_footer_list"},t.createElement("a",{href:"https://github.com/greiter18/Trace",target:"_blank"},"GitHub - Trace"))),t.createElement("ul",null,t.createElement("li",{className:"main_footer_top_list"},"Technologies"),t.createElement("li",{className:"main_footer_list"},"JavaScript"),t.createElement("li",{className:"main_footer_list"},"Ruby on Rails"),t.createElement("li",{className:"main_footer_list"},"React / Redux"),t.createElement("li",{className:"main_footer_list"},"HTML / CSS"),t.createElement("li",{className:"main_footer_list"},"PostgreSQL")),t.createElement("ul",null,t.createElement("li",{className:"main_footer_top_list",id:"footer_links"},"About Me"),t.createElement("li",{className:"main_footer_list"}," ",t.createElement("a",{href:"https://www.linkedin.com/in/gabriel-reiter-7352b2b7/",target:"_blank"}," Linked-In")),t.createElement("li",{className:"main_footer_list"},t.createElement("a",{href:"https://angel.co/u/gabriel-reiter",target:"_blank"},"Angel List")),t.createElement("li",{className:"main_footer_list"},t.createElement("a",{href:"https://github.com/greiter18",target:"_blank"},"GitHub"))))))};function Gt(e){return(Gt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Xt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Jt(e,t){return(Jt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Zt(e,t){return!t||"object"!==Gt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function en(e){return(en=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const tn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Jt(e,t)}(l,e);var n,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=en(o);if(a){var n=en(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Zt(this,e)});function l(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),i.call(this,e)}return n=l,(r=[{key:"componentDidMount",value:function(){var e,t;this.props.fetchWorkouts(null===(e=this.props)||void 0===e?void 0:e.session.id),this.props.fetchRoutes(null===(t=this.props)||void 0===t?void 0:t.session.id)}},{key:"render",value:function(){var e=this,n=void 0!==this.props.workouts?this.props.workouts.map((function(n){return t.createElement("li",{className:"feed"},t.createElement(Kt,{workout:n,email:e.props.email,route:e.props.route}))})):null;return t.createElement("div",{className:"main_dash"},t.createElement(qt,null),t.createElement("br",null),t.createElement("div",{className:"dash_profile"},t.createElement("div",{className:"dash_profile_body"},t.createElement(Qt,{routeCount:this.props.routeCount,workoutCount:this.props.workoutCount,email:this.props.email})),t.createElement("div",{className:"activityFeed"},t.createElement("p",{id:"workoutfeed"},"Your Activities ",t.createElement("i",{class:"fas fa-chevron-down"})),t.createElement("ul",null,n," ")),t.createElement("div",{id:"dashExtras"},t.createElement("h1",{className:"dashExtrasTitle"},"Challenges"),t.createElement("p",{className:"dashExtrasBody"},"Join a run or cycling Challenge to stay on top of your game, earn new achievements and see how you stack up."),t.createElement("h1",{className:"dashExtrasTitle"},"Clubs"),t.createElement("p",{className:"dashExtrasBody"},"Why do it alone? Get more out of your Trace experience by joining or creating a Club."),t.createElement("h1",{className:"dashExtrasTitle"},"Try a Privacy Zone"),t.createElement("p",{className:"dashExtrasBody"},"You can hide the location of your home, office or other private places in your activities."))),t.createElement(Yt,null))}}])&&Xt(n.prototype,r),l}(t.Component),nn=te((function(e){var t=e.session,n=e.entities;return{session:t,currentUser:n.users[t.id],email:n.users[t.id].email,workoutCount:Object.values(n.workouts).length,routeCount:Object.values(n.routes).length,workouts:Object.values(n.workouts),route:n.routes}}),(function(e){return{fetchWorkouts:function(t){return e($t(t))},fetchRoutes:function(t){return e(Mt(t))}}}))(tn);function rn(e){return(rn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function on(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function an(e,t){return(an=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ln(e,t){return!t||"object"!==rn(t)&&"function"!=typeof t?un(e):t}function un(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function cn(e){return(cn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const sn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&an(e,t)}(l,e);var n,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=cn(o);if(a){var n=cn(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return ln(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=i.call(this,e)).cap=t.cap.bind(un(t)),t}return n=l,(r=[{key:"cap",value:function(e){var t;return(null==e||null===(t=e.charAt(0))||void 0===t?void 0:t.toUpperCase())+(null==e?void 0:e.slice(1))}},{key:"render",value:function(){var e=this.props,n=e.workout,r=e.deleteWorkout,o=n.hours<10?"0".concat(n.hours):n.hours,a=n.minutes<10?"0".concat(n.minutes):n.minutes,i=n.seconds<10?"0".concat(n.seconds):n.seconds;return t.createElement("tr",{id:"workOutRow"},t.createElement("td",null,this.cap(n.run_type)),t.createElement("td",null,n.date),t.createElement("td",{className:"workoutIdxLinks"},t.createElement(Ye,{to:"/workouts/".concat(n.id)},this.cap(n.title))),t.createElement("td",null,o,":",a,":",i),t.createElement("td",{className:"workoutIdxLinks"},t.createElement(Ye,{to:"/workouts/".concat(n.id,"/edit")},"Edit")),t.createElement("td",{className:"workoutIdxLinks",onClick:function(){return r(n.id)}},"Delete"))}}])&&on(n.prototype,r),l}(t.Component);function fn(e){return(fn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function dn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function pn(e,t){return(pn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function mn(e,t){return!t||"object"!==fn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function hn(e){return(hn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const yn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&pn(e,t)}(l,e);var n,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=hn(o);if(a){var n=hn(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return mn(this,e)});function l(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),i.call(this,e)}return n=l,(r=[{key:"componentDidMount",value:function(){this.props.fetchWorkouts(this.props.session.id)}},{key:"render",value:function(){var e=this,n=void 0!==this.props.workouts?this.props.workouts.map((function(n){return t.createElement(sn,{workout:n,deleteWorkout:e.props.deleteWorkout})})):null,r=1===this.props.workoutCount?"Workout":"Workouts";return t.createElement("div",null,t.createElement(qt,null),t.createElement("div",{id:"workoutIdxBody"},t.createElement("div",{id:"workoutIdxBodyTop"},t.createElement("h1",{className:"workoutIndexTitle"},"My Workouts"),t.createElement("h1",{className:"workoutCount"},this.props.workoutCount," ",r)),t.createElement("table",{className:"workoutTable"},t.createElement("tbody",null,t.createElement("tr",{className:"workoutIndexHeader"},t.createElement("th",null,"Sport"),t.createElement("th",null,"Date"),t.createElement("th",null,"Title"),t.createElement("th",null,"Time"),t.createElement("th",null),t.createElement("th",null)),n))),t.createElement(Yt,null))}}])&&dn(n.prototype,r),l}(t.Component),vn=te((function(e){return{session:e.session,workouts:Object.values(e.entities.workouts),workoutCount:Object.values(e.entities.workouts).length}}),(function(e){return{fetchWorkouts:function(t){return e($t(t))},deleteWorkout:function(t){return e(Bt(t))}}}))(yn);function bn(e){return(bn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function gn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function wn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function En(e,t){return(En=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function kn(e,t){return!t||"object"!==bn(t)&&"function"!=typeof t?Sn(e):t}function Sn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _n(e){return(_n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const xn=function(n){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&En(e,t)}(u,n);var r,o,a,i,l=(a=u,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=_n(a);if(i){var n=_n(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return kn(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=l.call(this,e)).state=t.props.workout,t.handleChange=t.handleChange.bind(Sn(t)),t.handleSubmit=t.handleSubmit.bind(Sn(t)),t.toggleDisable=t.toggleDisable.bind(Sn(t)),t}return r=u,(o=[{key:"componentDidMount",value:function(){var e;this.props.fetchRoutes(null===(e=this.props.session)||void 0===e?void 0:e.id)}},{key:"handleSubmit",value:function(e){var t;e.preventDefault(),this.props.action(this.state,this.props.currentUser).then(null===(t=this.props.history)||void 0===t?void 0:t.push("/workouts"))}},{key:"handleChange",value:function(e){var t=this;return function(n){t.setState(gn({},e,n.target.value))}}},{key:"toggleDisable",value:function(){e.target.value.length>0?this.setState({disabled:!1}):this.setState({disabled:!0})}},{key:"render",value:function(){var e,n,r,o,a,i="Edit"===this.props.formType?"/workouts":"/",l=null===(e=this.props)||void 0===e||null===(n=e.routes)||void 0===n?void 0:n.map((function(e){return t.createElement("option",{value:e.id},e.title)})),u="Edit"===this.props.formType?"Update":"Create";return t.createElement("div",null,t.createElement(Ht,null),t.createElement("body",{id:"workoutFormBody"},t.createElement("h1",{className:"woFormTitle"},"Workout Entry"),t.createElement("form",{onSubmit:this.handleSubmit},t.createElement("div",{className:"topWorkoutForm"},t.createElement("div",null,t.createElement("label",{className:"workoutFormlabel"},"Route",t.createElement("select",{onChange:this.handleChange("route_id"),className:"routeOptions"},t.createElement("option",{className:"routeOptionschoices",value:null===(r=this.state)||void 0===r||null===(o=r.route)||void 0===o?void 0:o.title,disabled:!0,selected:!0},"Choose a route"),l))),t.createElement("div",gn({className:"woTimeEntry"},"className","workoutFormlabel"),t.createElement("label",null,"Time",t.createElement("div",{className:"timeinputAreas"},t.createElement("input",{type:"number",onChange:this.handleChange("hours"),value:this.state.hours,placeholder:"hr",className:"timeInpute",min:"0",max:"100"}),t.createElement("input",{type:"number",onChange:this.handleChange("minutes"),value:this.state.minutes,placeholder:"min",className:"timeInpute",min:"0",max:"59"}),t.createElement("input",{type:"number",onChange:this.handleChange("seconds"),value:this.state.seconds,placeholder:"s",className:"timeInpute",min:"0",max:"59"}))))),t.createElement("div",{className:"midWorkoutForm"},t.createElement("div",{className:"midWorkoutForm-top"},t.createElement("label",{className:"workoutFormlabel",id:"run_type"},"Type",t.createElement("select",{onChange:this.handleChange("run_type"),value:this.state.run_type,className:"wOforminput"},t.createElement("option",null,"run"),t.createElement("option",null,"walk"))),t.createElement("label",{className:"workoutFormlabel"},"Date",t.createElement("input",{type:"date",onChange:this.handleChange("date"),className:"wOforminput",min:"2021-01-01",max:"2030-12-31",value:this.state.date,id:"date_entry"}))),t.createElement("label",{className:"workoutFormlabel"},"Title",t.createElement("input",(gn(a={className:"workinput",type:"text",value:this.state.title,onChange:this.handleChange("title")},"className","wOforminput"),gn(a,"placeholder","Afternoon Run"),a)))," ",t.createElement("br",null)),t.createElement("div",{className:"lowWorkoutForm"},t.createElement("label",{className:"workoutFormlabel"},"Description",t.createElement("textarea",{className:"workinput",id:"workDescBox",onChange:this.handleChange("description"),value:this.state.description,placeholder:"How did it go? Were you tired or rested? How was the weather?"})),t.createElement("br",null)),t.createElement("button",{className:"workoutCreatebutton",disabled:!(this.state.title&&this.state.description&&this.state.hours&&this.state.minutes&&this.state.seconds&&this.state.run_type&&this.state.date)},u),t.createElement(Ye,{to:i,className:"cancelButton"},"Cancel"))),t.createElement(Yt,null))}}])&&wn(r.prototype,o),u}(t.Component),Cn=te((function(e,t){return{workout:{title:"",description:"",date:"",hours:"",minutes:"",seconds:"",run_type:"run",route_id:" ",disabled:!0},routes:Object.values(e.entities.routes),session:e.session,history:t.history,currentUser:e.entities.users.id}}),(function(e){return{action:function(t){return e(function(e){return function(t){return function(e,t){return $.ajax({method:"POST",url:"/api/users/".concat(void 0,"/workouts"),data:{workout:e}})}(e).then((function(e){t(Ft(e))}))}}(t))},fetchRoutes:function(t){return e(Mt(t))}}}))(xn);function On(e){return(On="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Nn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Pn(e,t){return(Pn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Rn(e,t){return!t||"object"!==On(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Tn(e){return(Tn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const jn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Pn(e,t)}(l,e);var n,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Tn(o);if(a){var n=Tn(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Rn(this,e)});function l(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),i.call(this,e)}return n=l,(r=[{key:"componentDidMount",value:function(){this.props.workout[this.props.match.params.workoutId]||this.props.fetchWorkout(this.props.match.params.workoutId)}},{key:"render",value:function(){var e=this.props,n=e.workout,r=e.route;return e.currentUser,t.createElement("div",null,t.createElement(Ht,null),t.createElement("div",{id:"workoutShow"},t.createElement("body",{id:"workShowBody"},t.createElement("div",{id:"workShowhead"},t.createElement("h1",null,r.email," - ",n.run_type," ")),t.createElement("div",{className:"workShowMain"},t.createElement("div",{className:"workShowMainLeft"},t.createElement("i",{id:"userWorkShow",className:"fas fa-user-circle"}),t.createElement("div",{className:"workShowMainLeft-inner"},t.createElement("h1",{id:"workShowTitle"}," ",n.title),t.createElement("h1",null,n.description))),t.createElement("div",{className:"workShowitem"},t.createElement("h1",null,n.date),t.createElement("h2",null,"Date")),t.createElement("div",{className:"workShowitem"},t.createElement("h1",null,n.hours,":",n.minutes,":",n.seconds),t.createElement("h2",null,"Moving Time")),t.createElement("div",{className:"workShowitem"},t.createElement("h1",null,null==r?void 0:r.title),t.createElement("h2",null,"Run Name")))),t.createElement("div",{id:"mapContainer"},t.createElement("img",{id:"workShowMap",src:null==r?void 0:r.image,alt:"route image"}))))}}])&&Nn(n.prototype,r),l}(t.Component),Ln=te((function(e,t){var n,r=t.match.params.workoutId;return{workout:e.entities.workouts[r]||{},route:(null===(n=e.entities.workouts[r])||void 0===n?void 0:n.route)||{}}}),(function(e){return{fetchWorkout:function(t){return e(Wt(t))},deleteWorkout:function(t){return e(Bt(t))}}}))(jn);function Mn(e){return(Mn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function In(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Dn(e,t){return(Dn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function zn(e,t){return!t||"object"!==Mn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Un(e){return(Un=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var An=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Dn(e,t)}(l,e);var n,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Un(o);if(a){var n=Un(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return zn(this,e)});function l(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),i.call(this,e)}return n=l,(r=[{key:"componentDidMount",value:function(){var e=this.props.match.params.workoutId;this.props.workout[e]||this.props.fetchWorkout(e)}},{key:"render",value:function(){var e,n=this.props,r=n.currentUser,o=n.workout,a=n.formType,i=n.action,l=n.history,u=n.fetchRoutes,c=n.session,s=n.routes,f=n.route,d=null===(e=this.props.match.params)||void 0===e?void 0:e.workoutId;return o[d]?t.createElement("div",null,t.createElement(xn,{workout:o[d],formType:a,action:i,history:l,fetchRoutes:u,currentUser:r,session:c,routes:s,route:f,workoutId:d})):null}}])&&In(n.prototype,r),l}(t.Component);const Fn=te((function(e,t){return{id:t.match.params.workoutId,workout:e.entities.workouts,route:e.entities.workouts.route,formType:"Edit",routes:Object.values(e.entities.routes),session:e.session,history:t.history,currentUser:e.entities.users.id}}),(function(e){return{fetchWorkout:function(t){return e(Wt(t))},action:function(t){return e(function(e){return function(t){return function(e){return $.ajax({method:"PATCH",url:"/api/workouts/".concat(e.id),data:{workout:e}})}(e).then((function(e){t(Ft(e))}))}}(t))},fetchRoutes:function(t){return e(Mt(t))}}}))(An),Wn=function(e){var n=e.route,r=e.deleteRoute;return e.session,t.createElement("div",{className:"routeIdxItem"},t.createElement("div",{className:"routeIdxItemImage"},t.createElement(Ye,{to:"/routes/".concat(n.id),className:"routeIndexImage"},t.createElement("img",{className:"routeIndexImage",src:n.image,alt:"route image"})),t.createElement("div",{className:"dropdownRt"},t.createElement("button",{className:"dropbtnRt"}," ",t.createElement("i",{className:"fas fa-wrench"})),t.createElement("div",{className:"dropdown_contentRt"},t.createElement("a",{onClick:function(){r(n.id)}},"Delete Route"),t.createElement(Ye,{to:"/routes/".concat(n.id,"/edit")},"Edit Route")))),t.createElement("div",{id:"routeCardBottom"},t.createElement(Ye,{to:"/routes/".concat(n.id),className:"rtIdxTitle"},n.title),t.createElement("br",null)))};function $n(e){return($n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Bn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Vn(e,t){return(Vn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Hn(e,t){return!t||"object"!==$n(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function qn(e){return(qn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const Qn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Vn(e,t)}(l,e);var n,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=qn(o);if(a){var n=qn(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Hn(this,e)});function l(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),i.call(this,e)}return n=l,(r=[{key:"componentDidMount",value:function(){this.props.fetchRoutes(this.props.session.id)}},{key:"render",value:function(){var e=this,n=void 0!==this.props.routes?this.props.routes.map((function(n){return t.createElement(Wn,{route:n,deleteRoute:e.props.deleteRoute,session:e.props.session})})):null;return t.createElement("div",null,t.createElement(qt,null),t.createElement("body",{id:"rtIdxBody"},t.createElement("div",{className:"routeIndexTop"},t.createElement("div",{className:"routeIndexTopLeft"},t.createElement("h1",{className:"routeIndexTitle"},"My Routes"),t.createElement("button",{className:"routeIndexCreate"},t.createElement(Ye,{to:"/new/routes"},"Create New Route"))),t.createElement("div",{id:"routeIndexFinePrint"},t.createElement("p",{className:"routeIndexFinePrint"},"Learn more about sharing & exporting routes to a variety of devices.")),t.createElement("div",null,t.createElement("img",{src:"https://d3nn82uaxijpm6.cloudfront.net/assets/routes/route-list-mobile-upsell-c1aec554d010e3c86411ad560615802162318875f086d1e3ed4850d6c7014b8f.png"}))),t.createElement("div",{className:"routeIndexList"},n)),t.createElement(Yt,null))}}])&&Bn(n.prototype,r),l}(t.Component),Kn=te((function(e){return{session:e.session,routes:Object.values(e.entities.routes)}}),(function(e){return{fetchRoutes:function(t){return e(Mt(t))},deleteRoute:function(t){return e(It(t))}}}))(Qn);function Yn(e){return(Yn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Gn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Xn(e,t){return(Xn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Jn(e,t){return!t||"object"!==Yn(t)&&"function"!=typeof t?Zn(e):t}function Zn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function er(e){return(er=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const tr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Xn(e,t)}(l,e);var n,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=er(o);if(a){var n=er(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Jn(this,e)});function l(e){var t,n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(o=i.call(this,e)).state={title:null===(t=o.props)||void 0===t?void 0:t.title,description:null===(n=o.props)||void 0===n?void 0:n.description,disabled:!0,id:null===(r=o.props)||void 0===r?void 0:r.routeId},o.openModal=o.openModal.bind(Zn(o)),o.toggleDisable=o.toggleDisable.bind(Zn(o)),o.handleSubmit=o.handleSubmit.bind(Zn(o)),o}return n=l,(r=[{key:"handleSubmit",value:function(e){var t,n,r,o,a,i,l,u;e.preventDefault(),this.props.action({title:this.state.title,start_long:null===(t=this.props.cords[0])||void 0===t?void 0:t.lng,start_lat:null===(n=this.props.cords[0])||void 0===n?void 0:n.lat,end_long:null===(r=this.props.cords[1])||void 0===r?void 0:r.lng,end_lat:null===(o=this.props.cords[1])||void 0===o?void 0:o.lat,user_id:null===(a=this.props.session)||void 0===a?void 0:a.id,image:null===(i=this.props)||void 0===i?void 0:i.image,description:this.state.description,distance:4,id:null===(l=this.state)||void 0===l?void 0:l.id}).then(null===(u=this.props.history)||void 0===u?void 0:u.push("/routes"))}},{key:"handleChange",value:function(e){var t=this;return function(n){var r,o,a;t.setState((r={},o=e,a=n.currentTarget.value,o in r?Object.defineProperty(r,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[o]=a,r))}}},{key:"openModal",value:function(){document.querySelector(".modal").classList.toggle("open-modal"),document.querySelector(".modal-background").classList.toggle("open-modal")}},{key:"toggleDisable",value:function(e){e.target.value.length>0?this.setState({disabled:!1}):this.setState({disabled:!0})}},{key:"render",value:function(){return this.props.cords[0],this.props.cords[1],t.createElement("div",{className:"modal-form"},t.createElement("div",{className:"modal-top"},t.createElement("h1",{className:"myRoute"},"My Route"),t.createElement("i",{id:"runningMain",className:"fas fa-running"}),t.createElement("i",{id:"star",className:"fas fa-star"})),t.createElement("form",{id:"routeModalForm",onSubmit:this.handleSubmit},t.createElement("div",{className:"modal-text"},t.createElement("label",null," Route name (required) ",t.createElement("br",null),t.createElement("input",{id:"modalTitle",className:"input-area",type:"text",onChange:this.handleChange("title"),value:this.state.title}))),t.createElement("div",{className:"modal-text"},t.createElement("label",null," Description ",t.createElement("br",null),t.createElement("textarea",{className:"input-area",id:"modal-description",type:"text",onChange:this.handleChange("description"),placeholder:"Add some more details or notes",value:this.props.description}))),t.createElement("div",{className:"modal-fineprint"},"Public routes are for the whole Trace community to enjoy. If you ever decide to delete your account, please know that public route you create may remain."),t.createElement("div",{className:"modal-buttons"},t.createElement("h1",{className:"modal-edit-button",onClick:this.openModal},"Edit Route"),t.createElement("button",{id:"modalSave",className:"modal-save-button",disabled:!this.state.title},"Save to My Routes"))))}}])&&Gn(n.prototype,r),l}(t.Component),nr=function(e){return t.createElement("div",{className:"route_nav_head"},t.createElement("div",{className:"nav-routes-left"},t.createElement(Ye,{className:"nav_main_logo",to:"/dashboard"}," TRACE "),t.createElement("h1",{className:"nav-routes-left-route"},"Routes")),t.createElement("div",{className:"nav-routes-right"},t.createElement(Ye,{to:"/routes"},"Back to My Routes")))};function rr(e){return(rr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function or(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ar(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ir(e,t){return(ir=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function lr(e,t){return!t||"object"!==rr(t)&&"function"!=typeof t?ur(e):t}function ur(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function cr(e){return(cr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const sr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ir(e,t)}(l,e);var n,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=cr(o);if(a){var n=cr(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return lr(this,e)});function l(e){var t,n,r,o,a,u,c,s,f,d,p,m,h,y,v,b;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(b=i.call(this,e)).state={showh1:!1,title:null===(t=b.props)||void 0===t||null===(n=t.route)||void 0===n?void 0:n.title,description:null===(r=b.props)||void 0===r||null===(o=r.route)||void 0===o?void 0:o.description,disabled:!0,location:"",address:"",image:"",marks:"Edit Route"===b.props.formType?[{lat:b.props.route.start_lat,lng:b.props.route.start_long},{lat:b.props.route.end_lat,lng:b.props.route.end_long}]:[]},b.points=null===(a=b.state)||void 0===a?void 0:a.marks,b.directionsService=new google.maps.DirectionsService,b.directionsRenderer=new google.maps.DirectionsRenderer,b.geocoder=new google.maps.Geocoder,b.renderMarkers=b.renderMarkers.bind(ur(b)),b.removeLastPoint=b.removeLastPoint.bind(ur(b)),b.removeAllPoints=b.removeAllPoints.bind(ur(b)),b.id=null===(u=b.props)||void 0===u||null===(c=u.session)||void 0===c?void 0:c.id,b.openModal=b.openModal.bind(ur(b)),b.searchAddress=b.searchAddress.bind(ur(b)),b.update=b.update.bind(ur(b)),b.getThumbnail=b.getThumbnail.bind(ur(b)),b.startLat=null===(s=ur(b))||void 0===s||null===(f=s.points[0])||void 0===f?void 0:f.lat,b.startLng=null===(d=ur(b))||void 0===d||null===(p=d.points[0])||void 0===p?void 0:p.lng,b.endLat=null===(m=ur(b))||void 0===m||null===(h=m.points[1])||void 0===h?void 0:h.lat,b.endLang=null===(y=ur(b))||void 0===y||null===(v=y.points[1])||void 0===v?void 0:v.lng,b}return n=l,(r=[{key:"componentDidMount",value:function(){var e=this;this.map=new google.maps.Map(this.mapstart,{center:{lat:40.6302923,lng:-74.1077045},zoom:15,mapId:"2cf9dff401d20cef",clickableIcons:!1,maxZoom:15}),this.directionsRenderer.setMap(this.map),this.map.addListener("click",(function(t){e.points.length>1&&e.points.pop(),e.points.push({lat:t.latLng.lat(),lng:t.latLng.lng()}),e.toggleDisable(),e.renderMarkers()})),"Edit Route"===this.props.formType&&(this.renderMarkers(),this.toggleDisable())}},{key:"renderMarkers",value:function(){var e=this,t=this.points[0],n=this.points[this.points.length-1];this.setState(or({},"marks",this.points)),this.directionsService.route({origin:t,destination:n,travelMode:google.maps.TravelMode.WALKING,unitSystem:google.maps.UnitSystem.IMPERIAL},(function(t,n){if("OK"===n){var r=e.getThumbnail(t);e.directionsRenderer.setDirections(t),e.setState({image:r})}else window.alert("Directions request faile due to "+n)}))}},{key:"update",value:function(e){var t=this;return function(n){t.setState(or({},e,n.currentTarget.value))}}},{key:"searchAddress",value:function(e){var t=this;this.geocoder.geocode({address:e},(function(e,n){e[0],"OK"===n&&(t.map.setCenter(e[0].geometry.location),t.setState(or({},"location",e[0])))}))}},{key:"removeLastPoint",value:function(){this.points.pop(),this.renderMarkers(),1===this.points.length&&(this.points=[],this.renderMarkers(),this.setState({disabled:!0})),this.directionsRenderer.setDirections({routes:[]})}},{key:"getThumbnail",value:function(e){var t,n,r,o,a,i,l,u,c="markers=size:tiny|".concat(null==this||null===(t=this.points[0])||void 0===t?void 0:t.lat,",").concat(null==this||null===(n=this.points[0])||void 0===n?void 0:n.lng,"|").concat(null==this||null===(r=this.points[1])||void 0===r?void 0:r.lat,",").concat(null==this||null===(o=this.points[1])||void 0===o?void 0:o.lng),s="path=color:0xff0000ff|".concat(null==this||null===(a=this.points[0])||void 0===a?void 0:a.lat,",").concat(null==this||null===(i=this.points[0])||void 0===i?void 0:i.lng,"|").concat(null==this||null===(l=this.points[1])||void 0===l?void 0:l.lat,",").concat(null==this||null===(u=this.points[1])||void 0===u?void 0:u.lng),f=[];return f.push("https://maps.googleapis.com/maps/api/staticmap?","size=200x200","scale=2",c,s,"key=AIzaSyD-zUIawAgtQ3qXH71ektYyDm_DBo-CZGo"),f.join("&")}},{key:"removeAllPoints",value:function(){this.points.length>0&&(this.points=[],this.setState({disabled:!0})),this.directionsRenderer.setDirections({routes:[]})}},{key:"openModal",value:function(){document.querySelector(".modal").classList.toggle("open-modal"),document.querySelector(".modal-background").classList.toggle("open-modal")}},{key:"toggleDisable",value:function(){"Edit Route"===this.props.formType&&2===this.points.length&&this.setState({disabled:!1}),2===this.points.length?this.setState({disabled:!1}):this.setState({disabled:!0})}},{key:"render",value:function(){var e,n,r,o,a,i,l=this;return t.createElement("div",null,console.log("point0000000000000",(null==this||null===(e=this.points[0])||void 0===e?void 0:e.lat)+","+(null==this||null===(n=this.points[0])||void 0===n?void 0:n.lng))||"",t.createElement(nr,null),t.createElement("div",{className:"mapButtons"},t.createElement("div",{id:"searchBarMain"},t.createElement("form",{className:"search-bar",onSubmit:function(){return l.searchAddress(address)}},t.createElement("input",{id:"search-bar",className:"input geocoder",type:"text",placeholder:"Coming Soon (Search address) - Click on map to add markers - 2 Markers needed to make route",value:this.state.address,onChange:this.update("address")}))),t.createElement("div",{id:"mapButtonsRight"},t.createElement("button",{className:"mapOtherButtons",onClick:this.removeLastPoint},t.createElement("i",{className:"fas fa-undo-alt"})),t.createElement("button",{className:"mapOtherButtons",onClick:this.removeAllPoints},t.createElement("i",{className:"far fa-trash-alt"})),t.createElement("button",{className:"mapSaveButtons",onClick:this.openModal,disabled:this.state.disabled},"Save"))),t.createElement("div",{id:"map",ref:function(e){return l.mapstart=e}}),t.createElement("div",{className:"modal-background",onClick:function(){return l.openModal()}},t.createElement("div",{className:"modal",onClick:function(e){return e.stopPropagation()}},t.createElement(tr,{action:null===(r=this.props)||void 0===r?void 0:r.action,cords:this.state.marks,session:this.props.session,image:this.state.image,title:this.state.title,description:null===(o=this.props)||void 0===o||null===(a=o.route)||void 0===a?void 0:a.description,history:null===(i=this.props)||void 0===i?void 0:i.history,route:this.props.route,formType:this.props.formType,routeId:this.props.routeId}))),t.createElement(Yt,null))}}])&&ar(n.prototype,r),l}(t.Component),fr=te((function(e,t){return{title:"",session:e.session,formType:"Create Route",history:t.history}}),(function(e){return{action:function(t){return e(function(e){return function(t){return function(e){return $.ajax({method:"POST",url:"/api/users/".concat(e.user_id,"/routes"),data:{route:e}})}(e).then((function(e){t(jt(e))}))}}(t))}}}))((function(e){var n=e.session,r=e.action,o=e.history;return t.createElement("div",null,t.createElement("br",null),t.createElement("div",{className:"routeFormTop"}),t.createElement(sr,{session:n,action:r,history:o}),t.createElement("br",null))}));function dr(e){return(dr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function pr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function mr(e,t){return(mr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function hr(e,t){return!t||"object"!==dr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function yr(e){return(yr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const vr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&mr(e,t)}(l,e);var n,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=yr(o);if(a){var n=yr(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return hr(this,e)});function l(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),i.call(this,e)}return n=l,(r=[{key:"componentDidMount",value:function(){this.props.route[this.props.match.params.routeId]||this.props.fetchRoute(this.props.match.params.routeId)}},{key:"render",value:function(){var e,n,r,o=this.props,a=o.route,i=o.currentUser,l=o.deleteRoute;return t.createElement("div",null,t.createElement(Ht,null),t.createElement("div",{className:"routeShowAll"},t.createElement("div",{className:"routeShowTop"},t.createElement("div",{className:"routeShowTitle"},t.createElement(Ye,{to:"/routes/",className:"routeShowTitleLink"},t.createElement("h1",null,"My Running Routes/   ")),t.createElement("h1",{className:"routeShowTitleroute"},a.title)),t.createElement("div",{className:"routeShowHeader"},t.createElement("i",{id:"star",class:"fas fa-star"}),t.createElement("h1",{className:"routeShowHeaderTitle"}," ",a.title)),t.createElement(Ye,{to:"/routes/"}," ",t.createElement("button",{className:"routesShowEdit",onClick:function(){return l(a.id)}},"Delete")),t.createElement(Ye,{to:"/routes/".concat(a.id,"/edit")},t.createElement("button",{className:"routesShowEdit"},"Edit"))),t.createElement("div",{className:"routesShowMain"},t.createElement("img",{className:"routeShowMap",src:a.image}),t.createElement("div",{id:"rtShowExtra"},t.createElement("h1",null," ",t.createElement("i",(r="fas fa-user-circle",(n="className")in(e={className:"icon",id:"showUserIcon"})?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e))," By ",i.email),t.createElement("h1",{id:"rtShowDesc"},a.description)))),t.createElement(Yt,null))}}])&&pr(n.prototype,r),l}(t.Component),br=te((function(e,t){var n=t.match.params.routeId;return{route:e.entities.routes[n]||{},currentUser:e.entities.users[e.session.id]}}),(function(e){return{fetchRoute:function(t){return e(Lt(t))},deleteRoute:function(t){return e(It(t))}}}))(vr);function gr(e){return(gr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function wr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Er(e,t){return(Er=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function kr(e,t){return!t||"object"!==gr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Sr(e){return(Sr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var _r=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Er(e,t)}(l,e);var n,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Sr(o);if(a){var n=Sr(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return kr(this,e)});function l(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),i.call(this,e)}return n=l,(r=[{key:"componentDidMount",value:function(){var e=this.props.match.params.routeId;this.props.routes[e]||this.props.fetchRoute(e)}},{key:"render",value:function(){var e=this.props,n=e.routes,r=e.formType,o=e.action,a=e.history,i=this.props.match.params.routeId;return n[i]?t.createElement("div",null,t.createElement(sr,{route:n[i],formType:r,action:o,routeId:i,history:a})):null}}])&&wr(n.prototype,r),l}(t.Component);const xr=te((function(e,t){return t.match.params.routeId,{routes:e.entities.routes,formType:"Edit Route",history:t.history}}),(function(e){return{fetchRoute:function(t){return e(Lt(t))},action:function(t){return e((n=t,function(e){return function(e){return $.ajax({method:"PATCH",url:"/api/routes/".concat(e.id),data:{route:e}})}(n).then((function(t){e(jt(t))}))}));var n}}}))(_r),Cr=function(){return t.createElement("div",null,t.createElement("header",{className:"header"}),t.createElement(Ze,{exact:!0,path:"/",component:Vt}),t.createElement(Ze,{exact:!0,path:"/login",component:gt}),t.createElement(Ze,{exact:!0,path:"/signup",component:bt}),t.createElement(et,{exact:!0,path:"/new/workouts",component:Cn}),t.createElement(et,{exact:!0,path:"/dashboard",component:nn}),t.createElement(et,{exact:!0,path:"/workouts",component:vn}),t.createElement(et,{exact:!0,path:"/workouts/:workoutId",component:Ln}),t.createElement(et,{exact:!0,path:"/workouts/:workoutId/edit",component:Fn}),t.createElement(et,{exact:!0,path:"/routes",component:Kn}),t.createElement(et,{exact:!0,path:"/routes/:routeId",component:br}),t.createElement(et,{exact:!0,path:"/routes/:routeId/edit",component:xr}),t.createElement(et,{exact:!0,path:"/new/routes",component:fr}))},Or=function(e){var n=e.store;return t.createElement(f,{store:n},t.createElement(Be,null,t.createElement(Cr,null)))};function Nr(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var Pr=Nr();Pr.withExtraArgument=Nr;const Rr=Pr;function Tr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const jr=M({users:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;switch(Object.freeze(e),t.type){case tt:return Object.assign({},e,Tr({},t.user.id,t.user));case nt:return{};default:return e}},workouts:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;switch(Object.freeze(e),t.type){case Dt:return t.workout;case zt:return Object.assign({},e,t.workouts);case Ut:var n=Object.assign({},e,t.workouts);return delete n[t.workoutId],n;case nt:case At:return{};default:return e}},routes:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;switch(Object.freeze(e),t.type){case Nt:return t.route;case Pt:return Object.assign({},e,t.routes);case Rt:var n=Object.assign({},e,t.routes);return delete n[t.routeId],n;case nt:case Tt:return{};default:return e}}});var Lr=Object.freeze({id:null});const Mr=M({session:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;switch(Object.freeze(e),t.type){case rt:return t.errors;case tt:case ot:return[];default:return e}}}),Ir=M({entities:jr,session:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Lr,t=arguments.length>1?arguments[1]:void 0;switch(Object.freeze(e),t.type){case tt:return{id:t.user.id};case nt:return Lr;default:return e}},errors:Mr}),Dr=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return j(Ir,e,F(Rr))};document.addEventListener("DOMContentLoaded",(function(){var e,r,o,a,i=document.getElementById("root");if(window.currentUser){var l={entities:{users:(r={},o=window.currentUser.id,a=window.currentUser,o in r?Object.defineProperty(r,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[o]=a,r)},session:{id:window.currentUser.id}};e=Dr(l),delete window.currentUser}else e=Dr();n.render(t.createElement(Or,{store:e}),i)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TdHJhdmEvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovL1N0cmF2YS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL1N0cmF2YS8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL1N0cmF2YS8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovL1N0cmF2YS8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vU3RyYXZhL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL1N0cmF2YS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vU3RyYXZhL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vU3RyYXZhL3dlYnBhY2svcnVudGltZS9oYXJtb255IG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vU3RyYXZhL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvd3JhcE1hcFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwid2VicGFjazovL1N0cmF2YS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tZXJnZVByb3BzLmpzIiwid2VicGFjazovL1N0cmF2YS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9jb25uZWN0LmpzIiwid2VicGFjazovL1N0cmF2YS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vbm9kZV9tb2R1bGVzL3ZhbHVlLWVxdWFsL2VzbS92YWx1ZS1lcXVhbC5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXNtL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vbm9kZV9tb2R1bGVzL21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lc20vcmVhY3Qtcm91dGVyLmpzIiwid2VicGFjazovL1N0cmF2YS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzbS9yZWFjdC1yb3V0ZXItZG9tLmpzIiwid2VicGFjazovL1N0cmF2YS8uL2Zyb250ZW5kL3V0aWwvcm91dGVfdXRpbC5qc3giLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvYWN0aW9ucy9zZXNzaW9uX2FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvdXRpbC9zZXNzaW9uX2FwaV91dGlsLmpzIiwid2VicGFjazovL1N0cmF2YS8uL2Zyb250ZW5kL2NvbXBvbmVudHMvc2Vzc2lvbl9mb3JtL25hdl9iYXIuanN4Iiwid2VicGFjazovL1N0cmF2YS8uL2Zyb250ZW5kL2NvbXBvbmVudHMvc2Vzc2lvbl9mb3JtL3Nlc3Npb25fZm9ybS5qc3giLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvY29tcG9uZW50cy9zZXNzaW9uX2Zvcm0vc2lnbnVwX2Zvcm1fY29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly9TdHJhdmEvLi9mcm9udGVuZC9jb21wb25lbnRzL3Nlc3Npb25fZm9ybS9sb2dpbl9mb3JtX2NvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvY29tcG9uZW50cy9mb290ZXIvc3BsYXNoX2Zvb3Rlci5qc3giLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvY29tcG9uZW50cy9zZXNzaW9uX2Zvcm0vc3BsYXNoLmpzeCIsIndlYnBhY2s6Ly9TdHJhdmEvLi9mcm9udGVuZC91dGlsL3JvdXRlX2FwaV91dGlsLmpzeCIsIndlYnBhY2s6Ly9TdHJhdmEvLi9mcm9udGVuZC9hY3Rpb25zL3JvdXRlc19hY3Rpb24uanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvYWN0aW9ucy93b3Jrb3V0X2FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvdXRpbC93b3Jrb3V0X2FwaV91dGlsLmpzeCIsIndlYnBhY2s6Ly9TdHJhdmEvLi9mcm9udGVuZC9jb21wb25lbnRzL3Nlc3Npb25fZm9ybS9zcGxhc2hfY29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly9TdHJhdmEvLi9mcm9udGVuZC9jb21wb25lbnRzL21haW5OYXYvbWFpbl9uYXYuanN4Iiwid2VicGFjazovL1N0cmF2YS8uL2Zyb250ZW5kL2NvbXBvbmVudHMvbWFpbk5hdi9tYWluX25hdl9jb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvY29tcG9uZW50cy9kYXNoYm9hcmQvcHJvZmlsZS5qc3giLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvY29tcG9uZW50cy9kYXNoYm9hcmQvZmVlZC5qc3giLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvY29tcG9uZW50cy9mb290ZXIvbWFpbl9mb290ZXIuanN4Iiwid2VicGFjazovL1N0cmF2YS8uL2Zyb250ZW5kL2NvbXBvbmVudHMvZGFzaGJvYXJkL2Rhc2hib2FyZC5qc3giLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvY29tcG9uZW50cy9kYXNoYm9hcmQvZGFzaGJvYXJkX2NvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvY29tcG9uZW50cy93b3Jrb3V0cy93b3Jrb3V0X2luZGV4X2l0ZW0uanN4Iiwid2VicGFjazovL1N0cmF2YS8uL2Zyb250ZW5kL2NvbXBvbmVudHMvd29ya291dHMvd29ya291dF9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvY29tcG9uZW50cy93b3Jrb3V0cy93b3Jrb3V0X2luZGV4X2NvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvY29tcG9uZW50cy93b3Jrb3V0cy93b3Jrb3V0X2Zvcm0uanN4Iiwid2VicGFjazovL1N0cmF2YS8uL2Zyb250ZW5kL2NvbXBvbmVudHMvd29ya291dHMvd29ya291dF9mb3JtX2NvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvY29tcG9uZW50cy93b3Jrb3V0cy93b3Jrb3V0X3Nob3cuanN4Iiwid2VicGFjazovL1N0cmF2YS8uL2Zyb250ZW5kL2NvbXBvbmVudHMvd29ya291dHMvd29ya291dF9zaG93X2NvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvY29tcG9uZW50cy93b3Jrb3V0cy93b3Jrb3V0X2VkaXRfZm9ybV9jb250YWluZXIuanN4Iiwid2VicGFjazovL1N0cmF2YS8uL2Zyb250ZW5kL2NvbXBvbmVudHMvcm91dGVzL3JvdXRlc19pbmRleF9pdGVtLmpzeCIsIndlYnBhY2s6Ly9TdHJhdmEvLi9mcm9udGVuZC9jb21wb25lbnRzL3JvdXRlcy9yb3V0ZXNfaW5kZXguanN4Iiwid2VicGFjazovL1N0cmF2YS8uL2Zyb250ZW5kL2NvbXBvbmVudHMvcm91dGVzL3JvdXRlc19pbmRleF9jb250YWluZXIuanN4Iiwid2VicGFjazovL1N0cmF2YS8uL2Zyb250ZW5kL2NvbXBvbmVudHMvcm91dGVzL21hcF9tb2RhbC5qc3giLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvY29tcG9uZW50cy9yb3V0ZXMvcm91dGVzX25hdi5qc3giLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvY29tcG9uZW50cy9yb3V0ZXMvbWFwLmpzeCIsIndlYnBhY2s6Ly9TdHJhdmEvLi9mcm9udGVuZC9jb21wb25lbnRzL3JvdXRlcy9yb3V0ZXNfZm9ybV9jb250YWluZXIuanN4Iiwid2VicGFjazovL1N0cmF2YS8uL2Zyb250ZW5kL2NvbXBvbmVudHMvcm91dGVzL3JvdXRlc19mb3JtLmpzeCIsIndlYnBhY2s6Ly9TdHJhdmEvLi9mcm9udGVuZC9jb21wb25lbnRzL3JvdXRlcy9yb3V0ZXNfc2hvdy5qc3giLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvY29tcG9uZW50cy9yb3V0ZXMvcm91dGVzX3Nob3dfY29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly9TdHJhdmEvLi9mcm9udGVuZC9jb21wb25lbnRzL3JvdXRlcy9yb3V0ZXNfZWRpdF9jb250YWluZXIuanN4Iiwid2VicGFjazovL1N0cmF2YS8uL2Zyb250ZW5kL2NvbXBvbmVudHMvYXBwLmpzeCIsIndlYnBhY2s6Ly9TdHJhdmEvLi9mcm9udGVuZC9jb21wb25lbnRzL3Jvb3QuanN4Iiwid2VicGFjazovL1N0cmF2YS8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9mcm9udGVuZC9yZWR1Y2Vycy9yb3V0ZV9yZWR1Y2VyLmpzIiwid2VicGFjazovL1N0cmF2YS8uL2Zyb250ZW5kL3JlZHVjZXJzL2VudGl0aWVzX3JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvcmVkdWNlcnMvdXNlcnNfcmVkdWNlci5qcyIsIndlYnBhY2s6Ly9TdHJhdmEvLi9mcm9udGVuZC9yZWR1Y2Vycy93b3Jrb3V0X3JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvcmVkdWNlcnMvc2Vzc2lvbl9yZWR1Y2VyLmpzIiwid2VicGFjazovL1N0cmF2YS8uL2Zyb250ZW5kL3JlZHVjZXJzL2Vycm9yc19yZWR1Y2VyLmpzIiwid2VicGFjazovL1N0cmF2YS8uL2Zyb250ZW5kL3JlZHVjZXJzL3Nlc3Npb25fZXJyb3JzX3JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vU3RyYXZhLy4vZnJvbnRlbmQvcmVkdWNlcnMvcm9vdF9yZWR1Y2VyLmpzIiwid2VicGFjazovL1N0cmF2YS8uL2Zyb250ZW5kL3N0b3JlL3N0b3JlLmpzIiwid2VicGFjazovL1N0cmF2YS8uL2Zyb250ZW5kL2luZGV4LmpzeCJdLCJuYW1lcyI6WyJyZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsInR5cGUiLCJLTk9XTl9TVEFUSUNTIiwibmFtZSIsImxlbmd0aCIsInByb3RvdHlwZSIsImNhbGxlciIsImNhbGxlZSIsImFyZ3VtZW50cyIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsImRlZmluZVByb3BlcnR5IiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50Iiwia2V5cyIsImNvbmNhdCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiaSIsImtleSIsImRlc2NyaXB0b3IiLCJlIiwiQXJyYXkiLCJpc0FycmF5IiwiYXJyIiwidG9TdHJpbmciLCJjYWxsIiwiaGFzT3duUHJvcGVydHkiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInZhbCIsIlR5cGVFcnJvciIsImFzc2lnbiIsInRlc3QxIiwiU3RyaW5nIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJtYXAiLCJuIiwiam9pbiIsInRlc3QzIiwic3BsaXQiLCJmb3JFYWNoIiwibGV0dGVyIiwiZXJyIiwic2hvdWxkVXNlTmF0aXZlIiwidGFyZ2V0Iiwic291cmNlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsInMiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwicGF0aCIsIm9wdGlvbnMiLCJSZWdFeHAiLCJncm91cHMiLCJtYXRjaCIsInB1c2giLCJwcmVmaXgiLCJkZWxpbWl0ZXIiLCJvcHRpb25hbCIsInJlcGVhdCIsInBhcnRpYWwiLCJhc3RlcmlzayIsInBhdHRlcm4iLCJhdHRhY2hLZXlzIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImZsYWdzIiwiYXJyYXlUb1JlZ2V4cCIsInRva2Vuc1RvUmVnRXhwIiwicGFyc2UiLCJzdHJpbmdUb1JlZ2V4cCIsImNvbXBpbGUiLCJzdHIiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwiUEFUSF9SRUdFWFAiLCJyZXMiLCJ0b2tlbnMiLCJpbmRleCIsImRlZmF1bHREZWxpbWl0ZXIiLCJleGVjIiwibSIsImVzY2FwZWQiLCJvZmZzZXQiLCJzbGljZSIsIm5leHQiLCJjYXB0dXJlIiwiZ3JvdXAiLCJtb2RpZmllciIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwic3Vic3RyIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwicmVwbGFjZSIsImMiLCJjaGFyQ29kZUF0IiwidG9VcHBlckNhc2UiLCJtYXRjaGVzIiwib2JqIiwib3B0cyIsImRhdGEiLCJlbmNvZGUiLCJwcmV0dHkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b2tlbiIsInNlZ21lbnQiLCJ2YWx1ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJqIiwidGVzdCIsInJlIiwic2Vuc2l0aXZlIiwic3RyaWN0IiwiZW5kIiwicm91dGUiLCJlbmRzV2l0aERlbGltaXRlciIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wcyIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiRXJyb3IiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiYXJyYXkiLCJib29sIiwiZnVuYyIsIm51bWJlciIsIm9iamVjdCIsInN0cmluZyIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJlbGVtZW50IiwiZWxlbWVudFR5cGUiLCJpbnN0YW5jZU9mIiwibm9kZSIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhYSIsInIiLCJ5IiwiYSIsImIiLCJiYSIsIlNldCIsImNhIiwiZGEiLCJlYSIsImFkZCIsImZhIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaGEiLCJpYSIsImphIiwia2EiLCJCIiwiZCIsImYiLCJnIiwidGhpcyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwiRCIsInRvTG93ZXJDYXNlIiwib2EiLCJwYSIsInFhIiwibWEiLCJpc05hTiIsIm5hIiwibGEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsInJhIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJzYSIsInRhIiwidWEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiU3ltYm9sIiwiZm9yIiwiRSIsIk1hIiwiS2EiLCJpdGVyYXRvciIsIkxhIiwiTmEiLCJzdGFjayIsInRyaW0iLCJPYSIsIlBhIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJzZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiayIsImgiLCJRYSIsInRhZyIsIl9yZW5kZXIiLCJSYSIsIiQkdHlwZW9mIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiY29uc3RydWN0b3IiLCJnZXQiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwiWGEiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsIllhIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJaYSIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCIkYSIsImFiIiwiYmIiLCJjYiIsIm93bmVyRG9jdW1lbnQiLCJlYiIsImNoaWxkcmVuIiwiQ2hpbGRyZW4iLCJkYiIsImZiIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJoYiIsImliIiwiamIiLCJ0ZXh0Q29udGVudCIsImtiIiwibGIiLCJtYiIsIm5iIiwib2IiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwicGIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInFiIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJyYiIsInNiIiwidGIiLCJzdHlsZSIsImluZGV4T2YiLCJzZXRQcm9wZXJ0eSIsImNoYXJBdCIsInN1YnN0cmluZyIsInViIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidmIiLCJ3YiIsImlzIiwieGIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJDYiIsInN0YXRlTm9kZSIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiT2IiLCJQYiIsIlFiIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJSYiIsImwiLCJhcHBseSIsIm9uRXJyb3IiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJaYiIsImFsdGVybmF0ZSIsInJldHVybiIsIiRiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJhYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwia2MiLCJsYyIsIm1jIiwibmMiLCJNYXAiLCJvYyIsInBjIiwicWMiLCJyYyIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJuYXRpdmVFdmVudCIsInRhcmdldENvbnRhaW5lcnMiLCJzYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsInRjIiwidmMiLCJ3YyIsImxhbmVQcmlvcml0eSIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInByaW9yaXR5IiwiaHlkcmF0ZSIsImNvbnRhaW5lckluZm8iLCJ4YyIsInljIiwic2hpZnQiLCJ6YyIsIkFjIiwiQmMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJDYyIsIkRjIiwiRWMiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJGYyIsIkdjIiwiSGMiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwidW5zdGFibGVfbm93IiwiRiIsIlJjIiwiVWMiLCJwZW5kaW5nTGFuZXMiLCJleHBpcmVkTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiVmMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiZXZlbnRUaW1lcyIsIk1hdGgiLCJjbHozMiIsImJkIiwiY2QiLCJsb2ciLCJMTjIiLCJkZCIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZWQiLCJmZCIsImdkIiwiaGQiLCJpZCIsImJpbmQiLCJ1YyIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsInBkIiwicWQiLCJyZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsIndkIiwieGQiLCJ5ZCIsInNkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsInRkIiwidWQiLCJ2aWV3IiwiZGV0YWlsIiwidmQiLCJBZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ6ZCIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJCZCIsIkRkIiwiZGF0YVRyYW5zZmVyIiwiRmQiLCJIZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJKZCIsImNsaXBib2FyZERhdGEiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsIk9kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBkIiwiUmQiLCJjb2RlIiwibG9jYWxlIiwid2hpY2giLCJUZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWmQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIiRkIiwiYWUiLCJiZSIsImRvY3VtZW50TW9kZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwibGUiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGV4dCIsInRpbWUiLCJ1cmwiLCJ3ZWVrIiwibWUiLCJuZSIsIm9lIiwiZXZlbnQiLCJsaXN0ZW5lcnMiLCJwZSIsInFlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIm5leHRTaWJsaW5nIiwiTWUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTmUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiT2UiLCJjb250ZW50RWRpdGFibGUiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImRlZmF1bHRWaWV3IiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJWZSIsIldlIiwiWGUiLCJZZSIsIlplIiwiWWIiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwiRyIsIiRlIiwiaGFzIiwiYWYiLCJiZiIsInJhbmRvbSIsImNmIiwiZGYiLCJwYXNzaXZlIiwiTmIiLCJ4IiwidyIsInoiLCJ1IiwicSIsInQiLCJ2IiwiZWYiLCJmZiIsInBhcmVudFdpbmRvdyIsImdmIiwiaGYiLCJKIiwiSyIsIlEiLCJMIiwiamUiLCJjaGFyIiwia2UiLCJ1bnNoaWZ0IiwiamYiLCJrZiIsImxmIiwibWYiLCJhdXRvRm9jdXMiLCJuZiIsIl9faHRtbCIsIm9mIiwic2V0VGltZW91dCIsInBmIiwiY2xlYXJUaW1lb3V0IiwicWYiLCJyZiIsInNmIiwicHJldmlvdXNTaWJsaW5nIiwidGYiLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsImNoaWxkIiwiemYiLCJBZiIsIkJmIiwiY3VycmVudCIsIkgiLCJJIiwiQ2YiLCJNIiwiTiIsIkRmIiwiRWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJGZiIsIkdmIiwiSGYiLCJJZiIsImdldENoaWxkQ29udGV4dCIsIkpmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIlFmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJSZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIlNmIiwiVGYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIlVmIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJWZiIsIldmIiwiWGYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIllmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiTyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsIl9jdXJyZW50VmFsdWUiLCJzZyIsImNoaWxkTGFuZXMiLCJ0ZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwidWciLCJ2ZyIsImNvbnRleHQiLCJvYnNlcnZlZEJpdHMiLCJyZXNwb25kZXJzIiwid2ciLCJ4ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsInlnIiwiemciLCJldmVudFRpbWUiLCJsYW5lIiwicGF5bG9hZCIsImNhbGxiYWNrIiwiQWciLCJCZyIsIkNnIiwiQSIsInAiLCJDIiwiRGciLCJFZyIsIkZnIiwiQ29tcG9uZW50IiwicmVmcyIsIkdnIiwiS2ciLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbHMiLCJlbnF1ZXVlU2V0U3RhdGUiLCJIZyIsIklnIiwiSmciLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiTGciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIk1nIiwic3RhdGUiLCJ1cGRhdGVyIiwiTmciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJPZyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiUGciLCJRZyIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJSZyIsIlNnIiwibGFzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJmaXJzdEVmZmVjdCIsInNpYmxpbmciLCJUZyIsIlVnIiwibW9kZSIsIlZnIiwiaW1wbGVtZW50YXRpb24iLCJXZyIsIlhnIiwiZG9uZSIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwiZmgiLCJnaCIsImhoIiwiUCIsImloIiwibWVtb2l6ZWRQcm9wcyIsInJldmVhbE9yZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGVuZGluZ1Byb3BzIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInVoIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJ2aCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJ3aCIsInhoIiwiUiIsIlMiLCJUIiwieWgiLCJ6aCIsIkFoIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJiYXNlUXVldWUiLCJxdWV1ZSIsIkloIiwiSmgiLCJLaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsIkxoIiwiTWgiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJtdXRhYmxlUmVhZExhbmVzIiwiTmgiLCJVIiwidXNlU3RhdGUiLCJnZXRTbmFwc2hvdCIsInN1YnNjcmliZSIsInVzZUVmZmVjdCIsInNldFNuYXBzaG90IiwiT2giLCJQaCIsIlFoIiwiUmgiLCJjcmVhdGUiLCJkZXN0cm95IiwiZGVwcyIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlT3BhcXVlSWRlbnRpZmllciIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsInVmIiwiZWkiLCJSZWFjdEN1cnJlbnRPd25lciIsImZpIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImxpIiwibWkiLCJiYXNlTGFuZXMiLCJuaSIsIm9pIiwicGkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJxaSIsInJpIiwicGVuZGluZ0NvbnRleHQiLCJCaSIsIkRpIiwiRWkiLCJzaSIsInJldHJ5TGFuZSIsInRpIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsInVpIiwidW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbE1vZGUiLCJBaSIsIkZpIiwiR2kiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwib25DbGljayIsIm9uY2xpY2siLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJWIiwiSGkiLCJJaSIsIlciLCJKaSIsIktpIiwiTGkiLCJNaSIsIm1lc3NhZ2UiLCJOaSIsImNvbnNvbGUiLCJlcnJvciIsIk9pIiwiV2Vha01hcCIsIlBpIiwiUWkiLCJSaSIsIlNpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJUaSIsImNvbXBvbmVudFN0YWNrIiwiVWkiLCJXZWFrU2V0IiwiVmkiLCJXaSIsIlhpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJZaSIsIlppIiwiJGkiLCJmb2N1cyIsImFqIiwiZGlzcGxheSIsImJqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNqIiwiZGoiLCJlaiIsImZqIiwiZ2oiLCJoaiIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJpaiIsImpqIiwia2oiLCJsaiIsInRoZW4iLCJtaiIsIm5qIiwiY2VpbCIsIm9qIiwicGoiLCJYIiwiWSIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIkluZmluaXR5Iiwid2oiLCJjayIsIloiLCJ4aiIsInlqIiwiemoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIlNjIiwiS2oiLCJMaiIsIk1qIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiY2FsbGJhY2tQcmlvcml0eSIsIlRjIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiVWoiLCJ0aW1lb3V0SGFuZGxlIiwiV2oiLCJwaW5nQ2FjaGUiLCJZaiIsIlpqIiwidmEiLCJhayIsImJrIiwiZGsiLCJyYW5nZUNvdW50IiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImVrIiwibWluIiwiZXh0ZW5kIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJvbkNvbW1pdEZpYmVyUm9vdCIsImZrIiwiZ2siLCJpayIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCJqayIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJsayIsIm1rIiwibmsiLCJvayIsInFrIiwiaHlkcmF0aW9uT3B0aW9ucyIsIm11dGFibGVTb3VyY2VzIiwiX2ludGVybmFsUm9vdCIsInJrIiwidGsiLCJoYXNBdHRyaWJ1dGUiLCJzayIsIlhqIiwiaGsiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJ1bm1vdW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJWaiIsIndrIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwidmVyc2lvbiIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ4ayIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImJjIiwiY2MiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInlrIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsImNoZWNrRENFIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRnJhZ21lbnQiLCJMYXp5IiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiX19zZWxmIiwiX19zb3VyY2UiLCJlc2NhcGUiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsImRlZmF1bHQiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsImNvdW50IiwidG9BcnJheSIsIm9ubHkiLCJQdXJlQ29tcG9uZW50IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwibWVtbyIsInBlcmZvcm1hbmNlIiwiTWVzc2FnZUNoYW5uZWwiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZmxvb3IiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJwb3AiLCJzb3J0SW5kZXgiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJyb290IiwicmVzdWx0Iiwib2JzZXJ2YWJsZSIsInNlbGYiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJsb2FkZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImRlZmluaXRpb24iLCJvIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwiaG1kIiwicHJvcCIsImJhdGNoIiwiZ2V0QmF0Y2giLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiU3Vic2NyaXB0aW9uIiwic3RvcmUiLCJwYXJlbnRTdWIiLCJ1bnN1YnNjcmliZSIsImhhbmRsZUNoYW5nZVdyYXBwZXIiLCJfcHJvdG8iLCJhZGROZXN0ZWRTdWIiLCJ0cnlTdWJzY3JpYmUiLCJub3RpZnlOZXN0ZWRTdWJzIiwib25TdGF0ZUNoYW5nZSIsImlzU3Vic2NyaWJlZCIsIkJvb2xlYW4iLCJmaXJzdCIsImNsZWFyIiwicHJldiIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsInRyeVVuc3Vic2NyaWJlIiwiX3JlZiIsImNvbnRleHRWYWx1ZSIsInN1YnNjcmlwdGlvbiIsInByZXZpb3VzU3RhdGUiLCJnZXRTdGF0ZSIsIkNvbnRleHQiLCJfZXh0ZW5kcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiRU1QVFlfQVJSQVkiLCJOT19TVUJTQ1JJUFRJT05fQVJSQVkiLCJzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIiLCJ1cGRhdGVDb3VudCIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyIsImVmZmVjdEZ1bmMiLCJlZmZlY3RBcmdzIiwiY2FwdHVyZVdyYXBwZXJQcm9wcyIsImxhc3RXcmFwcGVyUHJvcHMiLCJsYXN0Q2hpbGRQcm9wcyIsInJlbmRlcklzU2NoZWR1bGVkIiwid3JhcHBlclByb3BzIiwiYWN0dWFsQ2hpbGRQcm9wcyIsImNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUiLCJzdWJzY3JpYmVVcGRhdGVzIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiY2hpbGRQcm9wc1NlbGVjdG9yIiwiZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCIsImRpZFVuc3Vic2NyaWJlIiwibGFzdFRocm93bkVycm9yIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3Q2hpbGRQcm9wcyIsImxhdGVzdFN0b3JlU3RhdGUiLCJpbml0U3RhdGVVcGRhdGVzIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIiLCJfcmVmMiRnZXREaXNwbGF5TmFtZSIsImdldERpc3BsYXlOYW1lIiwiX3JlZjIkbWV0aG9kTmFtZSIsIm1ldGhvZE5hbWUiLCJfcmVmMiRyZW5kZXJDb3VudFByb3AiLCJyZW5kZXJDb3VudFByb3AiLCJ1bmRlZmluZWQiLCJfcmVmMiRzaG91bGRIYW5kbGVTdGEiLCJfcmVmMiRzdG9yZUtleSIsInN0b3JlS2V5IiwiX3JlZjIkZm9yd2FyZFJlZiIsIndpdGhSZWYiLCJfcmVmMiRjb250ZXh0IiwiY29ubmVjdE9wdGlvbnMiLCJXcmFwcGVkQ29tcG9uZW50Iiwid3JhcHBlZENvbXBvbmVudE5hbWUiLCJzZWxlY3RvckZhY3RvcnlPcHRpb25zIiwicHVyZSIsInVzZVB1cmVPbmx5TWVtbyIsIkNvbm5lY3RGdW5jdGlvbiIsIl91c2VNZW1vIiwicmVhY3RSZWR1eEZvcndhcmRlZFJlZiIsInByb3BzQ29udGV4dCIsIkNvbnRleHRUb1VzZSIsImRpZFN0b3JlQ29tZUZyb21Qcm9wcyIsImNyZWF0ZUNoaWxkU2VsZWN0b3IiLCJfdXNlTWVtbzIiLCJvdmVycmlkZGVuQ29udGV4dFZhbHVlIiwiX3VzZVJlZHVjZXIiLCJwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0IiwicmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50IiwiQ29ubmVjdCIsImZvcndhcmRlZCIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsInJhbmRvbVN0cmluZyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImlzUGxhaW5PYmplY3QiLCJwcm90byIsImNyZWF0ZVN0b3JlIiwicmVkdWNlciIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJzcGxpY2UiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsImdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlIiwiYWN0aW9uVHlwZSIsImNvbWJpbmVSZWR1Y2VycyIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZpbmFsUmVkdWNlcktleXMiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwibmV4dFN0YXRlIiwiX2kiLCJfa2V5IiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImVycm9yTWVzc2FnZSIsImJpbmRBY3Rpb25DcmVhdG9yIiwiYWN0aW9uQ3JlYXRvciIsIl9kZWZpbmVQcm9wZXJ0eSIsIndyaXRhYmxlIiwib3duS2V5cyIsImVudW1lcmFibGVPbmx5IiwiZmlsdGVyIiwic3ltIiwiX29iamVjdFNwcmVhZDIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImNvbXBvc2UiLCJfbGVuIiwiZnVuY3MiLCJhcmciLCJyZWR1Y2UiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJjaGFpbiIsIm1pZGRsZXdhcmUiLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0Q29uc3RhbnQiLCJjb25zdGFudCIsImNvbnN0YW50U2VsZWN0b3IiLCJkZXBlbmRzT25Pd25Qcm9wcyIsImdldERlcGVuZHNPbk93blByb3BzIiwibWFwVG9Qcm9wcyIsIndyYXBNYXBUb1Byb3BzRnVuYyIsInByb3h5Iiwic3RhdGVPckRpc3BhdGNoIiwib3duUHJvcHMiLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJtYXBTdGF0ZVRvUHJvcHMiLCJkZWZhdWx0TWVyZ2VQcm9wcyIsInN0YXRlUHJvcHMiLCJkaXNwYXRjaFByb3BzIiwibWVyZ2VQcm9wcyIsIm1lcmdlZFByb3BzIiwiYXJlTWVyZ2VkUHJvcHNFcXVhbCIsImhhc1J1bk9uY2UiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsIm5leHRPd25Qcm9wcyIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJoYW5kbGVTdWJzZXF1ZW50Q2FsbHMiLCJmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiaW5pdE1hcFN0YXRlVG9Qcm9wcyIsImluaXRNYXBEaXNwYXRjaFRvUHJvcHMiLCJpbml0TWVyZ2VQcm9wcyIsImZhY3RvcmllcyIsInN0cmljdEVxdWFsIiwiY3JlYXRlQ29ubmVjdCIsIl90ZW1wIiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsIl9yZWYzIiwiX3JlZjMkcHVyZSIsIl9yZWYzJGFyZVN0YXRlc0VxdWFsIiwiX3JlZjMkYXJlT3duUHJvcHNFcXVhIiwiX3JlZjMkYXJlU3RhdGVQcm9wc0VxIiwiX3JlZjMkYXJlTWVyZ2VkUHJvcHNFIiwiZXh0cmFPcHRpb25zIiwibmV3QmF0Y2giLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9fcHJvdG9fXyIsImlzQWJzb2x1dGUiLCJwYXRobmFtZSIsInNwbGljZU9uZSIsImxpc3QiLCJ2YWx1ZUVxdWFsIiwiZXZlcnkiLCJpdGVtIiwiYVZhbHVlIiwiYlZhbHVlIiwiY29uZGl0aW9uIiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdHJpcEJhc2VuYW1lIiwiaGFzQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJjcmVhdGVQYXRoIiwiaGFzaCIsImNyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJ1cCIsInBhcnQiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImFwcGVuZExpc3RlbmVyIiwiZm4iLCJpc0FjdGl2ZSIsIm5vdGlmeUxpc3RlbmVycyIsImFyZ3MiLCJjYW5Vc2VET00iLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwiSGFzaENoYW5nZUV2ZW50JDEiLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJzdHJpcEhhc2giLCJnZXRIYXNoUGF0aCIsInJlcGxhY2VIYXNoUGF0aCIsImNyZWF0ZUhhc2hIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImhpc3RvcnkiLCJfcHJvcHMiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsImJhc2VuYW1lIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiZ2V0RE9NTG9jYXRpb24iLCJ0cmFuc2l0aW9uTWFuYWdlciIsImZvcmNlTmV4dFBvcCIsImlnbm9yZVBhdGgiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZW5jb2RlZFBhdGgiLCJwcmV2TG9jYXRpb24iLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbFBhdGhzIiwibGFzdEluZGV4T2YiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwicmV2ZXJ0UG9wIiwiaGFuZGxlUG9wIiwiaW5pdGlhbExvY2F0aW9uIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwiY3JlYXRlSHJlZiIsImJhc2VUYWciLCJxdWVyeVNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwicHVzaEhhc2hQYXRoIiwicHJldkluZGV4IiwibmV4dFBhdGhzIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiYmxvY2siLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJNQVhfU0lHTkVEXzMxX0JJVF9JTlQiLCJjb21tb25qc0dsb2JhbCIsImNyZWF0ZUV2ZW50RW1pdHRlciIsImhhbmRsZXJzIiwib24iLCJoYW5kbGVyIiwib2ZmIiwibmV3VmFsdWUiLCJjaGFuZ2VkQml0cyIsImNhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4IiwiX0NvbnN1bWVyJGNvbnRleHRUeXBlIiwiY29udGV4dFByb3AiLCJfQ29tcG9uZW50IiwiX3RoaXMiLCJlbWl0dGVyIiwibmV4dFByb3BzIiwib2xkVmFsdWUiLCJfQ29tcG9uZW50MiIsIl90aGlzMiIsIm9uVXBkYXRlIiwiX3Byb3RvMiIsImhpc3RvcnlDb250ZXh0IiwiY3JlYXRlTmFtZWRDb250ZXh0IiwiY3JlYXRlTmFtZWRDb250ZXh0JDEiLCJSb3V0ZXIiLCJfUmVhY3QkQ29tcG9uZW50IiwiX2lzTW91bnRlZCIsIl9wZW5kaW5nTG9jYXRpb24iLCJzdGF0aWNDb250ZXh0IiwiY29tcHV0ZVJvb3RNYXRjaCIsInBhcmFtcyIsImlzRXhhY3QiLCJMaWZlY3ljbGUiLCJvbk1vdW50IiwicHJldlByb3BzIiwib25Vbm1vdW50IiwiY2FjaGUiLCJjYWNoZUNvdW50IiwiZ2VuZXJhdGVQYXRoIiwiZ2VuZXJhdG9yIiwiY29tcGlsZVBhdGgiLCJSZWRpcmVjdCIsImNvbXB1dGVkTWF0Y2giLCJfcmVmJHB1c2giLCJtZXRob2QiLCJjYWNoZSQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsIm1hdGNoZWQiLCJfY29tcGlsZVBhdGgiLCJjYWNoZUtleSIsInBhdGhDYWNoZSIsInJlZ2V4cCIsImNvbXBpbGVQYXRoJDEiLCJ2YWx1ZXMiLCJSb3V0ZSIsImNvbnRleHQkMSIsIl90aGlzJHByb3BzIiwid2l0aFJvdXRlciIsIndyYXBwZWRDb21wb25lbnRSZWYiLCJyZW1haW5pbmdQcm9wcyIsIkhhc2hSb3V0ZXIiLCJyZXNvbHZlVG9Mb2NhdGlvbiIsIm5vcm1hbGl6ZVRvTG9jYXRpb24iLCJmb3J3YXJkUmVmU2hpbSIsIkxpbmtBbmNob3IiLCJmb3J3YXJkZWRSZWYiLCJpbm5lclJlZiIsIm5hdmlnYXRlIiwiX29uQ2xpY2siLCJyZXN0IiwiZXgiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiX3JlZjIkY29tcG9uZW50IiwiZm9yd2FyZFJlZlNoaW0kMSIsImZvcndhcmRSZWYkMSIsIl9yZWYkYXJpYUN1cnJlbnQiLCJhcmlhQ3VycmVudCIsIl9yZWYkYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJjbGFzc05hbWVQcm9wIiwiY2xhc3NOYW1lIiwiaXNBY3RpdmVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3R5bGVQcm9wIiwiZXNjYXBlZFBhdGgiLCJjbGFzc25hbWVzIiwiam9pbkNsYXNzbmFtZXMiLCJsb2dnZWRJbiIsInNlc3Npb24iLCJBdXRoUm91dGUiLCJjb25uZWN0IiwiUHJvdGVjdGVkUm91dGUiLCJSRUNFSVZFX0NVUlJFTlRfVVNFUiIsIkxPR09VVF9DVVJSRU5UX1VTRVIiLCJSRUNFSVZFX1NFU1NJT05fRVJST1JTIiwiUkVNT1ZFX1NFU1NJT05fRVJST1IiLCJyZWNlaXZlQ3VycmVudFVzZXIiLCJ1c2VyIiwicmVjZWl2ZUVycm9ycyIsImVycm9ycyIsInJlbW92ZUVycm9ycyIsImxvZ2luIiwiJCIsImFqYXgiLCJTZXNzaW9uQXBpVXRpbCIsInJlc3BvbnNlSlNPTiIsIkJ1dHRvbiIsImhhbmRsZVN1Ym1pdCIsImhhbmRsZUNoYW5nZSIsInJlbmRlckVycm9ycyIsInByb2Nlc3NGb3JtIiwiZmllbGQiLCJidXR0b25OYW1lIiwiZm9ybU5hbWUiLCJPclN3aXRjaCIsImZpbmVQcmludCIsInNob3dFcnJvcnMiLCJmb3JtVHlwZSIsIm9uU3VibWl0IiwiUmVhY3QiLCJzaWdudXAiLCJTZXNzaW9uRm9ybSIsImNsZWFyUm91dGVzIiwiY2xlYXJXb3Jrb3V0cyIsInNyYyIsIlJFQ0VJVkVfUk9VVEUiLCJSRUNFSVZFX0FMTF9ST1VURVMiLCJSRU1PVkVfUk9VVEUiLCJDTEVBUl9ST1VURVMiLCJyZWNlaXZlUm91dGUiLCJmZXRjaFJvdXRlIiwicm91dGVJZCIsImZldGNoUm91dGVzIiwidXNlcl9pZCIsInJvdXRlcyIsInJlY2VpdmVSb3V0ZXMiLCJkZWxldGVSb3V0ZSIsIlJvdXRlc0FwaVV0aWwiLCJyZW1vdmVSb3V0ZSIsIlJFQ0VJVkVfV09SS09VVCIsIlJFQ0VJVkVfQUxMX1dPUktPVVRTIiwiUkVNT1ZFX1dPUktPVVQiLCJDTEVBUl9XT1JLT1VUUyIsInJlY2VpdmVXb3Jrb3V0Iiwid29ya291dCIsImZldGNoV29ya291dCIsIndvcmtvdXRJZCIsImZldGNoV29ya291dHMiLCJ3b3Jrb3V0cyIsInJlY2VpdmVXb3Jrb3V0cyIsImRlbGV0ZVdvcmtvdXQiLCJXb3Jrb3V0QXBpVXRpbCIsInJlbW92ZVdvcmtvdXQiLCJTcGxhc2giLCJsb2dvdXQiLCJjbGFzcyIsImFyaWEtaGlkZGVuIiwiY3VycmVudFVzZXIiLCJlbnRpdGllcyIsInVzZXJzIiwiTWFpbk5hdiIsIndvcmtvdXRDb3VudCIsInJvdXRlQ291bnQiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiaG91cnMiLCJtaW51dGVzIiwic2Vjb25kcyIsInJvdXRlX2lkIiwiaW1hZ2UiLCJhbHQiLCJ3b3Jrb3V0TGlzdCIsImRhc2hib2FyZCIsImNhcCIsIm5ld0hvdXIiLCJuZXdNaW4iLCJuZXdTZWMiLCJydW5fdHlwZSIsIndvcmtvdXRPcndvcmtvdXRzIiwiV29ya291dEluZGV4IiwidG9nZ2xlRGlzYWJsZSIsInJvdXRlc0xpc3QiLCJvbkNoYW5nZSIsInBsYWNlaG9sZGVyIiwibWF4IiwibmV3V29ya291dCIsImNyZWF0ZVdvcmtvdXQiLCJXb3Jrb3V0Rm9ybSIsIldvcmtvdXRTaG93IiwiRWRpdFdvcmtvdXRGb3JtIiwidXBXb3Jrb3V0IiwidXBkYXRlV29ya291dCIsIlJvdXRlc0luZGV4Iiwib3Blbk1vZGFsIiwic3RhcnRfbG9uZyIsImNvcmRzIiwibG5nIiwic3RhcnRfbGF0IiwibGF0IiwiZW5kX2xvbmciLCJlbmRfbGF0IiwiZGlzdGFuY2UiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJzaG93aDEiLCJhZGRyZXNzIiwibWFya3MiLCJwb2ludHMiLCJkaXJlY3Rpb25zU2VydmljZSIsImdvb2dsZSIsIm1hcHMiLCJEaXJlY3Rpb25zU2VydmljZSIsImRpcmVjdGlvbnNSZW5kZXJlciIsIkRpcmVjdGlvbnNSZW5kZXJlciIsImdlb2NvZGVyIiwiR2VvY29kZXIiLCJyZW5kZXJNYXJrZXJzIiwicmVtb3ZlTGFzdFBvaW50IiwicmVtb3ZlQWxsUG9pbnRzIiwic2VhcmNoQWRkcmVzcyIsInVwZGF0ZSIsImdldFRodW1ibmFpbCIsInN0YXJ0TGF0Iiwic3RhcnRMbmciLCJlbmRMYXQiLCJlbmRMYW5nIiwibWFwc3RhcnQiLCJjZW50ZXIiLCJtYXBJZCIsImNsaWNrYWJsZUljb25zIiwibWF4Wm9vbSIsInNldE1hcCIsImFkZExpc3RlbmVyIiwibGF0TG5nIiwiYmVnaW5Qb2ludCIsImVuZFBvaW50Iiwib3JpZ2luIiwiZGVzdGluYXRpb24iLCJ0cmF2ZWxNb2RlIiwiVHJhdmVsTW9kZSIsIldBTEtJTkciLCJ1bml0U3lzdGVtIiwiVW5pdFN5c3RlbSIsIklNUEVSSUFMIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJ0aHVtYm5haWwiLCJzZXREaXJlY3Rpb25zIiwiYWxlcnQiLCJnZW9jb2RlIiwic2V0Q2VudGVyIiwiZ2VvbWV0cnkiLCJtYXJrZXJzIiwibmV3Um91dGUiLCJjcmVhdGVSb3V0ZSIsIlJvdXRlU2hvdyIsIkVkaXRSb3V0ZUZvcm0iLCJ1cFJvdXRlIiwiU3BsYXNoQ29udGFpbmVyIiwiTG9nSW5Gb3JtQ29udGFpbmVyIiwiU2lnblVwRm9ybUNvbnRhaW5lciIsIkRhc2hib2FyZENvbnRhaW5lciIsIldvcmtPdXRJbmRleCIsIldvcmtvdXRFZGl0Rm9ybUNvbnRhaW5lciIsIlJvdXRlc0luZGV4Q29udGFpbmVyIiwiUm91dGVzU2hvd0NvbnRhaW5lciIsIlJvdXRlc0VkaXRDb250YWluZXIiLCJSb3V0ZUZvcm0iLCJjcmVhdGVUaHVua01pZGRsZXdhcmUiLCJleHRyYUFyZ3VtZW50IiwidGh1bmsiLCJ3aXRoRXh0cmFBcmd1bWVudCIsImZyZWV6ZSIsIm5ld1N0YXRlIiwiX05VTExfU1RBVEUiLCJyb290UmVkdWNlciIsImdldEVsZW1lbnRCeUlkIiwiY29uZmlndXJlU3RvcmUiLCJSZWFjdERPTSJdLCJtYXBwaW5ncyI6Ijt3Q0FFQSxJQUFJQSxFQUFVLEVBQVEsS0FNbEJDLEVBQWdCLENBQ2xCQyxtQkFBbUIsRUFDbkJDLGFBQWEsRUFDYkMsY0FBYyxFQUNkQyxjQUFjLEVBQ2RDLGFBQWEsRUFDYkMsaUJBQWlCLEVBQ2pCQywwQkFBMEIsRUFDMUJDLDBCQUEwQixFQUMxQkMsUUFBUSxFQUNSQyxXQUFXLEVBQ1hDLE1BQU0sR0FFSkMsRUFBZ0IsQ0FDbEJDLE1BQU0sRUFDTkMsUUFBUSxFQUNSQyxXQUFXLEVBQ1hDLFFBQVEsRUFDUkMsUUFBUSxFQUNSQyxXQUFXLEVBQ1hDLE9BQU8sR0FTTEMsRUFBZSxDQUNqQixVQUFZLEVBQ1pDLFNBQVMsRUFDVGpCLGNBQWMsRUFDZEMsYUFBYSxFQUNiSyxXQUFXLEVBQ1hDLE1BQU0sR0FFSlcsRUFBZSxHQUluQixTQUFTQyxFQUFXQyxHQUVsQixPQUFJekIsRUFBUTBCLE9BQU9ELEdBQ1ZKLEVBSUZFLEVBQWFFLEVBQW9CLFdBQU14QixFQVZoRHNCLEVBQWF2QixFQUFRMkIsWUFoQkssQ0FDeEIsVUFBWSxF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LE9BQVFGLEVBQ0h3ZixHQUNBdGYsRUFDQThDLEVBQWdCbWMsTUNEeEIvd0QsU0FBU3VPLGlCQUFpQixvQkFBb0IsV0FDMUMsSUFDSW05QixFLE1BREV0QixFQUFPcHFDLFNBQVNxeEQsZUFBZSxRQUVyQyxHQUFJdHhELE9BQU8rcEQsWUFBYSxDQUN0QixJQUFNaFksRUFBaUIsQ0FDckJpWSxTQUFVLENBQ1JDLE8sRUFBTyxHLEVBQUdqcUQsT0FBTytwRCxZQUFZMTBDLEcsRUFBS3JWLE9BQU8rcEQsWSxpR0FFM0NyRSxRQUFTLENBQUVyd0MsR0FBSXJWLE9BQU8rcEQsWUFBWTEwQyxLQUVwQ3MyQixFQUFRNGxCLEdBQWV4ZixVQUNoQi94QyxPQUFPK3BELGlCQUVkcGUsRUFBUTRsQixLQVNWQyxTQUFnQixnQkFBQyxHQUFELENBQU03bEIsTUFBT0EsSUFBVXRCLE8iLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnLCBmbGFncyhvcHRpb25zKSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24geShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IoeSgyMjcpKTt2YXIgYmE9bmV3IFNldCxjYT17fTtmdW5jdGlvbiBkYShhLGIpe2VhKGEsYik7ZWEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGVhKGEsYil7Y2FbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJhLmFkZChiW2FdKX1cbnZhciBmYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5qYT17fSxrYT17fTtmdW5jdGlvbiBsYShhKXtpZihpYS5jYWxsKGthLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoamEsYSkpcmV0dXJuITE7aWYoaGEudGVzdChhKSlyZXR1cm4ga2FbYV09ITA7amFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgb2E9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBwYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxcbnBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KG5hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9sYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIHJhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHNhPTYwMTAzLHRhPTYwMTA2LHVhPTYwMTA3LHdhPTYwMTA4LHhhPTYwMTE0LHlhPTYwMTA5LHphPTYwMTEwLEFhPTYwMTEyLEJhPTYwMTEzLENhPTYwMTIwLERhPTYwMTE1LEVhPTYwMTE2LEZhPTYwMTIxLEdhPTYwMTI4LEhhPTYwMTI5LElhPTYwMTMwLEphPTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIEU9U3ltYm9sLmZvcjtzYT1FKFwicmVhY3QuZWxlbWVudFwiKTt0YT1FKFwicmVhY3QucG9ydGFsXCIpO3VhPUUoXCJyZWFjdC5mcmFnbWVudFwiKTt3YT1FKFwicmVhY3Quc3RyaWN0X21vZGVcIik7eGE9RShcInJlYWN0LnByb2ZpbGVyXCIpO3lhPUUoXCJyZWFjdC5wcm92aWRlclwiKTt6YT1FKFwicmVhY3QuY29udGV4dFwiKTtBYT1FKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7QmE9RShcInJlYWN0LnN1c3BlbnNlXCIpO0NhPUUoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO0RhPUUoXCJyZWFjdC5tZW1vXCIpO0VhPUUoXCJyZWFjdC5sYXp5XCIpO0ZhPUUoXCJyZWFjdC5ibG9ja1wiKTtFKFwicmVhY3Quc2NvcGVcIik7R2E9RShcInJlYWN0Lm9wYXF1ZS5pZFwiKTtIYT1FKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtJYT1FKFwicmVhY3Qub2Zmc2NyZWVuXCIpO0phPUUoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxudmFyIEthPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBMYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9S2EmJmFbS2FdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIE1hO2Z1bmN0aW9uIE5hKGEpe2lmKHZvaWQgMD09PU1hKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO01hPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitNYSthfXZhciBPYT0hMTtcbmZ1bmN0aW9uIFBhKGEsYil7aWYoIWF8fE9hKXJldHVyblwiXCI7T2E9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGspe3ZhciBkPWt9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChrKXtkPWt9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChrKXtkPWt9YSgpfX1jYXRjaChrKXtpZihrJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGsuc3RhY2spe2Zvcih2YXIgZT1rLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pcmV0dXJuXCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTt3aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7T2E9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9OYShhKTpcIlwifVxuZnVuY3Rpb24gUWEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE5hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTmEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE5hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTmEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPVBhKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPVBhKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAyMjpyZXR1cm4gYT1QYShhLnR5cGUuX3JlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9UGEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHVhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEJhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHphOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEFhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO1xucmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBEYTpyZXR1cm4gUmEoYS50eXBlKTtjYXNlIEZhOnJldHVybiBSYShhLl9yZW5kZXIpO2Nhc2UgRWE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFJhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiAkYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnFhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBhYihhLGIpeyRhKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gZGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWIoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih5KDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IoeSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHkoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBrYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuYixvYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuYj1uYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1uYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxYikuZm9yRWFjaChmdW5jdGlvbihhKXtyYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FiW2JdPXFiW2FdfSl9KTtmdW5jdGlvbiBzYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWIuaGFzT3duUHJvcGVydHkoYSkmJnFiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHViPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2YihhLGIpe2lmKGIpe2lmKHViW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IoeSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IoeSg2MikpO319XG5mdW5jdGlvbiB3YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcih5KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj1HYixLYj0hMSxMYj0hMTtmdW5jdGlvbiBNYigpe2lmKG51bGwhPT16Ynx8bnVsbCE9PUFiKUliKCksRmIoKX1cbmZ1bmN0aW9uIE5iKGEsYixjKXtpZihMYilyZXR1cm4gYShiLGMpO0xiPSEwO3RyeXtyZXR1cm4gSmIoYSxiLGMpfWZpbmFsbHl7TGI9ITEsTWIoKX19XG5mdW5jdGlvbiBPYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHkoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgUGI9ITE7aWYoZmEpdHJ5e3ZhciBRYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1BiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYil9Y2F0Y2goYSl7UGI9ITF9ZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIFNiPSExLFRiPW51bGwsVWI9ITEsVmI9bnVsbCxXYj17b25FcnJvcjpmdW5jdGlvbihhKXtTYj0hMDtUYj1hfX07ZnVuY3Rpb24gWGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiPSExO1RiPW51bGw7UmIuYXBwbHkoV2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFliKGEsYixjLGQsZSxmLGcsaCxrKXtYYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoU2Ipe2lmKFNiKXt2YXIgbD1UYjtTYj0hMTtUYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IoeSgxOTgpKTtVYnx8KFViPSEwLFZiPWwpfX1mdW5jdGlvbiBaYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gYWMoYSl7aWYoWmIoYSkhPT1hKXRocm93IEVycm9yKHkoMTg4KSk7fVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9WmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gYWMoZSksYTtpZihmPT09ZClyZXR1cm4gYWMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih5KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHkoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IoeSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBjYyhhKXthPWJjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gZGMoYSxiKXtmb3IodmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWI7KXtpZihiPT09YXx8Yj09PWMpcmV0dXJuITA7Yj1iLnJldHVybn1yZXR1cm4hMX12YXIgZWMsZmMsZ2MsaGMsaWM9ITEsamM9W10sa2M9bnVsbCxsYz1udWxsLG1jPW51bGwsbmM9bmV3IE1hcCxvYz1uZXcgTWFwLHBjPVtdLHFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHJjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLGRvbUV2ZW50TmFtZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wxNixuYXRpdmVFdmVudDplLHRhcmdldENvbnRhaW5lcnM6W2RdfX1mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmtjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpsYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjptYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6bmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6b2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiB0YyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXJjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZmYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBrYz10YyhrYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gbGM9dGMobGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIG1jPXRjKG1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7bmMuc2V0KGYsdGMobmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLG9jLnNldChmLHRjKG9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPXdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9WmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9JGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7aGMoYS5sYW5lUHJpb3JpdHksZnVuY3Rpb24oKXtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Z2MoYyl9KX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiB4YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJmZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIHpjKGEsYixjKXt4YyhhKSYmYy5kZWxldGUoYil9XG5mdW5jdGlvbiBBYygpe2ZvcihpYz0hMTswPGpjLmxlbmd0aDspe3ZhciBhPWpjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYihhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmVjKGEpO2JyZWFrfWZvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXthLmJsb2NrZWRPbj1jO2JyZWFrfWIuc2hpZnQoKX1udWxsPT09YS5ibG9ja2VkT24mJmpjLnNoaWZ0KCl9bnVsbCE9PWtjJiZ4YyhrYykmJihrYz1udWxsKTtudWxsIT09bGMmJnhjKGxjKSYmKGxjPW51bGwpO251bGwhPT1tYyYmeGMobWMpJiYobWM9bnVsbCk7bmMuZm9yRWFjaCh6Yyk7b2MuZm9yRWFjaCh6Yyl9XG5mdW5jdGlvbiBCYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsaWN8fChpYz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxBYykpKX1cbmZ1bmN0aW9uIENjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEJjKGIsYSl9aWYoMDxqYy5sZW5ndGgpe0JjKGpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8amMubGVuZ3RoO2MrKyl7dmFyIGQ9amNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1rYyYmQmMoa2MsYSk7bnVsbCE9PWxjJiZCYyhsYyxhKTtudWxsIT09bWMmJkJjKG1jLGEpO25jLmZvckVhY2goYik7b2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8cGMubGVuZ3RoO2MrKylkPXBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxwYy5sZW5ndGgmJihjPXBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KXZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmcGMuc2hpZnQoKX1cbmZ1bmN0aW9uIERjKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIEVjPXthbmltYXRpb25lbmQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpEYyhcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEZjPXt9LEdjPXt9O1xuZmEmJihHYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBFYy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBFYy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIEhjKGEpe2lmKEZjW2FdKXJldHVybiBGY1thXTtpZighRWNbYV0pcmV0dXJuIGE7dmFyIGI9RWNbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gR2MpcmV0dXJuIEZjW2FdPWJbY107cmV0dXJuIGF9XG52YXIgSWM9SGMoXCJhbmltYXRpb25lbmRcIiksSmM9SGMoXCJhbmltYXRpb25pdGVyYXRpb25cIiksS2M9SGMoXCJhbmltYXRpb25zdGFydFwiKSxMYz1IYyhcInRyYW5zaXRpb25lbmRcIiksTWM9bmV3IE1hcCxOYz1uZXcgTWFwLE9jPVtcImFib3J0XCIsXCJhYm9ydFwiLEljLFwiYW5pbWF0aW9uRW5kXCIsSmMsXCJhbmltYXRpb25JdGVyYXRpb25cIixLYyxcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcblwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLExjLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBQYyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXTtlPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO05jLnNldChkLGIpO01jLnNldChkLGUpO2RhKGUsW2RdKX19dmFyIFFjPXIudW5zdGFibGVfbm93O1FjKCk7dmFyIEY9ODtcbmZ1bmN0aW9uIFJjKGEpe2lmKDAhPT0oMSZhKSlyZXR1cm4gRj0xNSwxO2lmKDAhPT0oMiZhKSlyZXR1cm4gRj0xNCwyO2lmKDAhPT0oNCZhKSlyZXR1cm4gRj0xMyw0O3ZhciBiPTI0JmE7aWYoMCE9PWIpcmV0dXJuIEY9MTIsYjtpZigwIT09KGEmMzIpKXJldHVybiBGPTExLDMyO2I9MTkyJmE7aWYoMCE9PWIpcmV0dXJuIEY9MTAsYjtpZigwIT09KGEmMjU2KSlyZXR1cm4gRj05LDI1NjtiPTM1ODQmYTtpZigwIT09YilyZXR1cm4gRj04LGI7aWYoMCE9PShhJjQwOTYpKXJldHVybiBGPTcsNDA5NjtiPTQxODYxMTImYTtpZigwIT09YilyZXR1cm4gRj02LGI7Yj02MjkxNDU2MCZhO2lmKDAhPT1iKXJldHVybiBGPTUsYjtpZihhJjY3MTA4ODY0KXJldHVybiBGPTQsNjcxMDg4NjQ7aWYoMCE9PShhJjEzNDIxNzcyOCkpcmV0dXJuIEY9MywxMzQyMTc3Mjg7Yj04MDUzMDYzNjgmYTtpZigwIT09YilyZXR1cm4gRj0yLGI7aWYoMCE9PSgxMDczNzQxODI0JmEpKXJldHVybiBGPTEsMTA3Mzc0MTgyNDtcbkY9ODtyZXR1cm4gYX1mdW5jdGlvbiBTYyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gMTU7Y2FzZSA5ODpyZXR1cm4gMTA7Y2FzZSA5NzpjYXNlIDk2OnJldHVybiA4O2Nhc2UgOTU6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19ZnVuY3Rpb24gVGMoYSl7c3dpdGNoKGEpe2Nhc2UgMTU6Y2FzZSAxNDpyZXR1cm4gOTk7Y2FzZSAxMzpjYXNlIDEyOmNhc2UgMTE6Y2FzZSAxMDpyZXR1cm4gOTg7Y2FzZSA5OmNhc2UgODpjYXNlIDc6Y2FzZSA2OmNhc2UgNDpjYXNlIDU6cmV0dXJuIDk3O2Nhc2UgMzpjYXNlIDI6Y2FzZSAxOnJldHVybiA5NTtjYXNlIDA6cmV0dXJuIDkwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzNTgsYSkpO319XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiBGPTA7dmFyIGQ9MCxlPTAsZj1hLmV4cGlyZWRMYW5lcyxnPWEuc3VzcGVuZGVkTGFuZXMsaD1hLnBpbmdlZExhbmVzO2lmKDAhPT1mKWQ9ZixlPUY9MTU7ZWxzZSBpZihmPWMmMTM0MjE3NzI3LDAhPT1mKXt2YXIgaz1mJn5nOzAhPT1rPyhkPVJjKGspLGU9Rik6KGgmPWYsMCE9PWgmJihkPVJjKGgpLGU9RikpfWVsc2UgZj1jJn5nLDAhPT1mPyhkPVJjKGYpLGU9Rik6MCE9PWgmJihkPVJjKGgpLGU9Rik7aWYoMD09PWQpcmV0dXJuIDA7ZD0zMS1WYyhkKTtkPWMmKCgwPmQ/MDoxPDxkKTw8MSktMTtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZnKSl7UmMoYik7aWYoZTw9RilyZXR1cm4gYjtGPWV9Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1WYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIFdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiBYYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE1OnJldHVybiAxO2Nhc2UgMTQ6cmV0dXJuIDI7Y2FzZSAxMjpyZXR1cm4gYT1ZYygyNCZ+YiksMD09PWE/WGMoMTAsYik6YTtjYXNlIDEwOnJldHVybiBhPVljKDE5MiZ+YiksMD09PWE/WGMoOCxiKTphO2Nhc2UgODpyZXR1cm4gYT1ZYygzNTg0Jn5iKSwwPT09YSYmKGE9WWMoNDE4NjExMiZ+YiksMD09PWEmJihhPTUxMikpLGE7Y2FzZSAyOnJldHVybiBiPVljKDgwNTMwNjM2OCZ+YiksMD09PWImJihiPTI2ODQzNTQ1NiksYn10aHJvdyBFcnJvcih5KDM1OCxhKSk7fWZ1bmN0aW9uIFljKGEpe3JldHVybiBhJi1hfWZ1bmN0aW9uIFpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gJGMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iO3ZhciBkPWItMTthLnN1c3BlbmRlZExhbmVzJj1kO2EucGluZ2VkTGFuZXMmPWQ7YT1hLmV2ZW50VGltZXM7Yj0zMS1WYyhiKTthW2JdPWN9dmFyIFZjPU1hdGguY2x6MzI/TWF0aC5jbHozMjphZCxiZD1NYXRoLmxvZyxjZD1NYXRoLkxOMjtmdW5jdGlvbiBhZChhKXtyZXR1cm4gMD09PWE/MzI6MzEtKGJkKGEpL2NkfDApfDB9dmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7S2J8fEliKCk7dmFyIGU9aGQsZj1LYjtLYj0hMDt0cnl7SGIoZSxhLGIsYyxkKX1maW5hbGx5eyhLYj1mKXx8TWIoKX19ZnVuY3Rpb24gaWQoYSxiLGMsZCl7ZWQoZGQsaGQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQpe2lmKGZkKXt2YXIgZTtpZigoZT0wPT09KGImNCkpJiYwPGpjLmxlbmd0aCYmLTE8cWMuaW5kZXhPZihhKSlhPXJjKG51bGwsYSxiLGMsZCksamMucHVzaChhKTtlbHNle3ZhciBmPXljKGEsYixjLGQpO2lmKG51bGw9PT1mKWUmJnNjKGEsZCk7ZWxzZXtpZihlKXtpZigtMTxxYy5pbmRleE9mKGEpKXthPXJjKGYsYSxiLGMsZCk7amMucHVzaChhKTtyZXR1cm59aWYodWMoZixhLGIsYyxkKSlyZXR1cm47c2MoYSxkKX1qZChhLGIsZCxudWxsLGMpfX19fVxuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9eGIoZCk7ZT13YyhlKTtpZihudWxsIT09ZSl7dmFyIGY9WmIoZSk7aWYobnVsbD09PWYpZT1udWxsO2Vsc2V7dmFyIGc9Zi50YWc7aWYoMTM9PT1nKXtlPSRiKGYpO2lmKG51bGwhPT1lKXJldHVybiBlO2U9bnVsbH1lbHNlIGlmKDM9PT1nKXtpZihmLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09Zi50YWc/Zi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGYhPT1lJiYoZT1udWxsKX19amQoYSxiLGQsZSxjKTtyZXR1cm4gbnVsbH12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7XG5mdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31tKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1tKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9bSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9bSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9bSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPW0oe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1tKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPW0oe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1tKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPW0oe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPW0oe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1tKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1tKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1mYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtmYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9ZmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1mYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihmYSl7dmFyIHhlO2lmKGZhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7YT1yZTtpZihLYilhKGIpO2Vsc2V7S2I9ITA7dHJ5e0diKGEsYil9ZmluYWxseXtLYj0hMSxNYigpfX19fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2UsSWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIEplKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFJZS5jYWxsKGIsY1tkXSl8fCFIZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEtlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9S2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2UoYyl9fWZ1bmN0aW9uIE1lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBQZT1mYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmT2UoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSmUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuUGMoXCJjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1c2luIGZvY3VzIGZvY3Vzb3V0IGJsdXIgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSxcbjApO1BjKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO1BjKE9jLDIpO2Zvcih2YXIgVmU9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLFdlPTA7V2U8VmUubGVuZ3RoO1dlKyspTmMuc2V0KFZlW1dlXSwwKTtlYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO1xuZWEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtlYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZGEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtkYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmRhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgWGU9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFllPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KFhlKSk7XG5mdW5jdGlvbiBaZShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztZYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9fX1pZihVYil0aHJvdyBhPVZiLFViPSExLFZiPW51bGwsYTt9XG5mdW5jdGlvbiBHKGEsYil7dmFyIGM9JGUoYiksZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGFmKGIsYSwyLCExKSxjLmFkZChkKSl9dmFyIGJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gY2YoYSl7YVtiZl18fChhW2JmXT0hMCxiYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1llLmhhcyhiKXx8ZGYoYiwhMSxhLG51bGwpO2RmKGIsITAsYSxudWxsKX0pKX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQpe3ZhciBlPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLGY9YztcInNlbGVjdGlvbmNoYW5nZVwiPT09YSYmOSE9PWMubm9kZVR5cGUmJihmPWMub3duZXJEb2N1bWVudCk7aWYobnVsbCE9PWQmJiFiJiZZZS5oYXMoYSkpe2lmKFwic2Nyb2xsXCIhPT1hKXJldHVybjtlfD0yO2Y9ZH12YXIgZz0kZShmKSxoPWErXCJfX1wiKyhiP1wiY2FwdHVyZVwiOlwiYnViYmxlXCIpO2cuaGFzKGgpfHwoYiYmKGV8PTQpLGFmKGYsYSxlLGIpLGcuYWRkKGgpKX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQpe3ZhciBlPU5jLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZT8yOmUpe2Nhc2UgMDplPWdkO2JyZWFrO2Nhc2UgMTplPWlkO2JyZWFrO2RlZmF1bHQ6ZT1oZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshUGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gamQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz13YyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59TmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPU1jLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCx4PWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOng9XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6eD1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgSWM6Y2FzZSBKYzpjYXNlIEtjOms9SGQ7YnJlYWs7Y2FzZSBMYzprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB3PTAhPT0oYiY0KSx6PSF3JiZcInNjcm9sbFwiPT09YSx1PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHQ9ZCxxO251bGwhPT1cbnQ7KXtxPXQ7dmFyIHY9cS5zdGF0ZU5vZGU7NT09PXEudGFnJiZudWxsIT09diYmKHE9dixudWxsIT09dSYmKHY9T2IodCx1KSxudWxsIT12JiZ3LnB1c2goZWYodCx2LHEpKSkpO2lmKHopYnJlYWs7dD10LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLHgsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJjA9PT0oYiYxNikmJih4PWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJih3Yyh4KXx8eFtmZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZih4PWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLHg9eD93Yyh4KTpudWxsLG51bGwhPT1cbngmJih6PVpiKHgpLHghPT16fHw1IT09eC50YWcmJjYhPT14LnRhZykpeD1udWxsfWVsc2Ugaz1udWxsLHg9ZDtpZihrIT09eCl7dz1CZDt2PVwib25Nb3VzZUxlYXZlXCI7dT1cIm9uTW91c2VFbnRlclwiO3Q9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVRkLHY9XCJvblBvaW50ZXJMZWF2ZVwiLHU9XCJvblBvaW50ZXJFbnRlclwiLHQ9XCJwb2ludGVyXCI7ej1udWxsPT1rP2g6dWUoayk7cT1udWxsPT14P2g6dWUoeCk7aD1uZXcgdyh2LHQrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD16O2gucmVsYXRlZFRhcmdldD1xO3Y9bnVsbDt3YyhlKT09PWQmJih3PW5ldyB3KHUsdCtcImVudGVyXCIseCxjLGUpLHcudGFyZ2V0PXEsdy5yZWxhdGVkVGFyZ2V0PXosdj13KTt6PXY7aWYoayYmeCliOnt3PWs7dT14O3Q9MDtmb3IocT13O3E7cT1nZihxKSl0Kys7cT0wO2Zvcih2PXU7djt2PWdmKHYpKXErKztmb3IoOzA8dC1xOyl3PWdmKHcpLHQtLTtmb3IoOzA8cS10Oyl1PVxuZ2YodSkscS0tO2Zvcig7dC0tOyl7aWYodz09PXV8fG51bGwhPT11JiZ3PT09dS5hbHRlcm5hdGUpYnJlYWsgYjt3PWdmKHcpO3U9Z2YodSl9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZoZihnLGgsayx3LCExKTtudWxsIT09eCYmbnVsbCE9PXomJmhmKGcseix4LHcsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIEo9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSlKPUZlO2Vsc2V7Sj1EZTt2YXIgSz1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKEo9RWUpO2lmKEomJihKPUooYSxkKSkpe25lKGcsSixjLGUpO2JyZWFrIGF9SyYmSyhhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKEs9aC5fd3JhcHBlclN0YXRlKSYmXG5LLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX1LPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKEspfHxcInRydWVcIj09PUsuY29udGVudEVkaXRhYmxlKVFlPUssUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciBRO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZpZSYmKFE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSxLPW9lKGQsTCksMDxLLmxlbmd0aCYmKEw9bmV3IExkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpLfSksUT9MLmRhdGE9UTooUT1oZShjKSxudWxsIT09USYmKEwuZGF0YT1RKSkpKTtpZihRPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPVEpfXNlKGcsYil9KX1mdW5jdGlvbiBlZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9T2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoZWYoYSxmLGUpKSxmPU9iKGEsYiksbnVsbCE9ZiYmZC5wdXNoKGVmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gZ2YoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9T2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoZWYoYyxrLGgpKSk6ZXx8KGs9T2IoYyxmKSxudWxsIT1rJiZnLnB1c2goZWYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX1mdW5jdGlvbiBqZigpe312YXIga2Y9bnVsbCxsZj1udWxsO2Z1bmN0aW9uIG1mKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHFmKGEpezE9PT1hLm5vZGVUeXBlP2EudGV4dENvbnRlbnQ9XCJcIjo5PT09YS5ub2RlVHlwZSYmKGE9YS5ib2R5LG51bGwhPWEmJihhLnRleHRDb250ZW50PVwiXCIpKX1cbmZ1bmN0aW9uIHJmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfWZ1bmN0aW9uIHNmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0Zj0wO2Z1bmN0aW9uIHVmKGEpe3JldHVybnskJHR5cGVvZjpHYSx0b1N0cmluZzphLHZhbHVlT2Y6YX19dmFyIHZmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHdmPVwiX19yZWFjdEZpYmVyJFwiK3ZmLHhmPVwiX19yZWFjdFByb3BzJFwiK3ZmLGZmPVwiX19yZWFjdENvbnRhaW5lciRcIit2Zix5Zj1cIl9fcmVhY3RFdmVudHMkXCIrdmY7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj1hW3dmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tmZl18fGNbd2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbd2ZdKXJldHVybiBjO2E9c2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVt3Zl18fGFbZmZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IoeSgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVt4Zl18fG51bGx9XG5mdW5jdGlvbiAkZShhKXt2YXIgYj1hW3lmXTt2b2lkIDA9PT1iJiYoYj1hW3lmXT1uZXcgU2V0KTtyZXR1cm4gYn12YXIgemY9W10sQWY9LTE7ZnVuY3Rpb24gQmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19ZnVuY3Rpb24gSChhKXswPkFmfHwoYS5jdXJyZW50PXpmW0FmXSx6ZltBZl09bnVsbCxBZi0tKX1mdW5jdGlvbiBJKGEsYil7QWYrKzt6ZltBZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxNPUJmKENmKSxOPUJmKCExKSxEZj1DZjtcbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBHZigpe0goTik7SChNKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoTS5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IoeSgxNjgpKTtJKE0sYik7SShOLGMpfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih5KDEwOCxSYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gSmYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPU0uY3VycmVudDtJKE0sYSk7SShOLE4uY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHkoMTY5KSk7Yz8oYT1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKE4pLEgoTSksSShNLGEpKTpIKE4pO0koTixjKX1cbnZhciBMZj1udWxsLE1mPW51bGwsTmY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksT2Y9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFBmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssUWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxSZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxTZj1yLnVuc3RhYmxlX25vdyxUZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFVmPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVmY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxXZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFhmPXIudW5zdGFibGVfTG93UHJpb3JpdHksWWY9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksWmY9e30sJGY9dm9pZCAwIT09UmY/UmY6ZnVuY3Rpb24oKXt9LGFnPW51bGwsYmc9bnVsbCxjZz0hMSxkZz1TZigpLE89MUU0PmRnP1NmOmZ1bmN0aW9uKCl7cmV0dXJuIFNmKCktZGd9O1xuZnVuY3Rpb24gZWcoKXtzd2l0Y2goVGYoKSl7Y2FzZSBVZjpyZXR1cm4gOTk7Y2FzZSBWZjpyZXR1cm4gOTg7Y2FzZSBXZjpyZXR1cm4gOTc7Y2FzZSBYZjpyZXR1cm4gOTY7Y2FzZSBZZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFVmO2Nhc2UgOTg6cmV0dXJuIFZmO2Nhc2UgOTc6cmV0dXJuIFdmO2Nhc2UgOTY6cmV0dXJuIFhmO2Nhc2UgOTU6cmV0dXJuIFlmO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGdnKGEsYil7YT1mZyhhKTtyZXR1cm4gTmYoYSxiKX1mdW5jdGlvbiBoZyhhLGIsYyl7YT1mZyhhKTtyZXR1cm4gT2YoYSxiLGMpfWZ1bmN0aW9uIGlnKCl7aWYobnVsbCE9PWJnKXt2YXIgYT1iZztiZz1udWxsO1BmKGEpfWpnKCl9XG5mdW5jdGlvbiBqZygpe2lmKCFjZyYmbnVsbCE9PWFnKXtjZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1hZztnZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7YWc9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09YWcmJihhZz1hZy5zbGljZShhKzEpKSxPZihVZixpZyksYzt9ZmluYWxseXtjZz0hMX19fXZhciBrZz1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBsZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbWc9QmYobnVsbCksbmc9bnVsbCxvZz1udWxsLHBnPW51bGw7ZnVuY3Rpb24gcWcoKXtwZz1vZz1uZz1udWxsfVxuZnVuY3Rpb24gcmcoYSl7dmFyIGI9bWcuY3VycmVudDtIKG1nKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHNnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKChhLmNoaWxkTGFuZXMmYik9PT1iKWlmKG51bGw9PT1jfHwoYy5jaGlsZExhbmVzJmIpPT09YilicmVhaztlbHNlIGMuY2hpbGRMYW5lc3w9YjtlbHNlIGEuY2hpbGRMYW5lc3w9YixudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9Yik7YT1hLnJldHVybn19ZnVuY3Rpb24gdGcoYSxiKXtuZz1hO3BnPW9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdmcoYSxiKXtpZihwZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcGc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PW9nKXtpZihudWxsPT09bmcpdGhyb3cgRXJyb3IoeSgzMDgpKTtvZz1iO25nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2Ugb2c9b2cubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fWZ1bmN0aW9uIEFnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24gQmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIENnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtpZihudWxsIT09bil7bj1uLnVwZGF0ZVF1ZXVlO3ZhciBBPW4ubGFzdEJhc2VVcGRhdGU7QSE9PWcmJihudWxsPT09QT9uLmZpcnN0QmFzZVVwZGF0ZT1sOkEubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9ayl9fWlmKG51bGwhPT1mKXtBPWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2Rve2g9Zi5sYW5lO3ZhciBwPWYuZXZlbnRUaW1lO2lmKChkJmgpPT09aCl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnAsbGFuZTowLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIEM9YSx4PWY7aD1iO3A9Yztzd2l0Y2goeC50YWcpe2Nhc2UgMTpDPXgucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyl7QT1DLmNhbGwocCxBLGgpO2JyZWFrIGF9QT1DO2JyZWFrIGE7Y2FzZSAzOkMuZmxhZ3M9Qy5mbGFncyYtNDA5N3w2NDtjYXNlIDA6Qz14LnBheWxvYWQ7aD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQz9DLmNhbGwocCxBLGgpOkM7aWYobnVsbD09PWh8fHZvaWQgMD09PWgpYnJlYWsgYTtBPW0oe30sQSxoKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWYuY2FsbGJhY2smJihhLmZsYWdzfD0zMixoPWUuZWZmZWN0cyxudWxsPT09aD9lLmVmZmVjdHM9W2ZdOmgucHVzaChmKSl9ZWxzZSBwPXtldmVudFRpbWU6cCxsYW5lOmgsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXAsaz1BKTpuPW4ubmV4dD1wLGd8PWg7Zj1mLm5leHQ7aWYobnVsbD09PVxuZilpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBmPWgubmV4dCxoLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPWgsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz1BKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO0RnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9QX19ZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHkoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgRmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBHZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgS2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/WmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1IZygpLGQ9SWcoYSksZT16ZyhjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPVxuYik7QWcoYSxlKTtKZyhhLGQsYyl9fTtmdW5jdGlvbiBMZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFKZShjLGQpfHwhSmUoZSxmKTohMH1cbmZ1bmN0aW9uIE1nKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXZnKGYpOihlPUZmKGIpP0RmOk0uY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1LZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE9nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Rmc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD12ZyhmKTooZj1GZihiKT9EZjpNLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO0NnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihHZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxDZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00KX12YXIgUGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih5KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1GZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih5KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih5KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IoeSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIpKTt9XG5mdW5jdGlvbiBTZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmZsYWdzPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVRnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzPTIsXG5jKTpkO2IuZmxhZ3M9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3M9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVVnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1RZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbldnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1YZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVVnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjPVZnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB0YTpyZXR1cm4gYj1XZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoUGcoYil8fExhKGIpKXJldHVybiBiPVhnKGIsXG5hLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09dWE/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFBnKGMpfHxMYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7UmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXVhP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFBnKGQpfHxMYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7UmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCx1PWcsej1nPTAscT1udWxsO251bGwhPT11JiZ6PGgubGVuZ3RoO3orKyl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgbj1wKGUsdSxoW3pdLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHopO251bGw9PT10P2w9bjp0LnNpYmxpbmc9bjt0PW47dT1xfWlmKHo9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7ejxoLmxlbmd0aDt6KyspdT1BKGUsaFt6XSxrKSxudWxsIT09dSYmKGc9Zih1LGcseiksbnVsbD09PXQ/bD11OnQuc2libGluZz11LHQ9dSk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3o8aC5sZW5ndGg7eisrKXE9Qyh1LGUseixoW3pdLGspLG51bGwhPT1xJiYoYSYmbnVsbCE9PXEuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cS5rZXk/ejpxLmtleSksZz1mKHEsZyx6KSxudWxsPT09dD9sPXE6dC5zaWJsaW5nPXEsdD1xKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9TGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IoeSgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1cbmgpdGhyb3cgRXJyb3IoeSgxNTEpKTtmb3IodmFyIHQ9bD1udWxsLHU9Zyx6PWc9MCxxPW51bGwsbj1oLm5leHQoKTtudWxsIT09dSYmIW4uZG9uZTt6Kyssbj1oLm5leHQoKSl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgdz1wKGUsdSxuLnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKHcsZyx6KTtudWxsPT09dD9sPXc6dC5zaWJsaW5nPXc7dD13O3U9cX1pZihuLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1BKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1DKHUsZSx6LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJlxudS5kZWxldGUobnVsbD09PW4ua2V5P3o6bi5rZXkpLGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugc2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT11YSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO1xuZD1lKGssZi5wcm9wcyk7ZC5yZWY9UWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT11YT8oZD1YZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVxuV2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoUGcoZikpcmV0dXJuIHgoYSxkLGYsaCk7aWYoTGEoZikpcmV0dXJuIHcoYSxkLGYsaCk7bCYmUmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMjI6Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aHJvdyBFcnJvcih5KDE1MixSYShhLnR5cGUpfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBZZz1TZyghMCksWmc9U2coITEpLCRnPXt9LGFoPUJmKCRnKSxiaD1CZigkZyksY2g9QmYoJGcpO1xuZnVuY3Rpb24gZGgoYSl7aWYoYT09PSRnKXRocm93IEVycm9yKHkoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZWgoYSxiKXtJKGNoLGIpO0koYmgsYSk7SShhaCwkZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bWIoYixhKX1IKGFoKTtJKGFoLGIpfWZ1bmN0aW9uIGZoKCl7SChhaCk7SChiaCk7SChjaCl9ZnVuY3Rpb24gZ2goYSl7ZGgoY2guY3VycmVudCk7dmFyIGI9ZGgoYWguY3VycmVudCk7dmFyIGM9bWIoYixhLnR5cGUpO2IhPT1jJiYoSShiaCxhKSxJKGFoLGMpKX1mdW5jdGlvbiBoaChhKXtiaC5jdXJyZW50PT09YSYmKEgoYWgpLEgoYmgpKX12YXIgUD1CZigwKTtcbmZ1bmN0aW9uIGloKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIGpoPW51bGwsa2g9bnVsbCxsaD0hMTtcbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9bmgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZmxhZ3M9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIG9oKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwaChhKXtpZihsaCl7dmFyIGI9a2g7aWYoYil7dmFyIGM9YjtpZighb2goYSxiKSl7Yj1yZihjLm5leHRTaWJsaW5nKTtpZighYnx8IW9oKGEsYikpe2EuZmxhZ3M9YS5mbGFncyYtMTAyNXwyO2xoPSExO2poPWE7cmV0dXJufW1oKGpoLGMpfWpoPWE7a2g9cmYoYi5maXJzdENoaWxkKX1lbHNlIGEuZmxhZ3M9YS5mbGFncyYtMTAyNXwyLGxoPSExLGpoPWF9fWZ1bmN0aW9uIHFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtqaD1hfVxuZnVuY3Rpb24gcmgoYSl7aWYoYSE9PWpoKXJldHVybiExO2lmKCFsaClyZXR1cm4gcWgoYSksbGg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFuZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9a2g7YjspbWgoYSxiKSxiPXJmKGIubmV4dFNpYmxpbmcpO3FoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IoeSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7a2g9cmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31raD1udWxsfX1lbHNlIGtoPWpoP3JmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gc2goKXtraD1qaD1udWxsO2xoPSExfXZhciB0aD1bXTtmdW5jdGlvbiB1aCgpe2Zvcih2YXIgYT0wO2E8dGgubGVuZ3RoO2ErKyl0aFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO3RoLmxlbmd0aD0wfXZhciB2aD1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHdoPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHhoPTAsUj1udWxsLFM9bnVsbCxUPW51bGwseWg9ITEsemg9ITE7ZnVuY3Rpb24gQWgoKXt0aHJvdyBFcnJvcih5KDMyMSkpO31mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gQ2goYSxiLGMsZCxlLGYpe3hoPWY7Uj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7dmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9EaDpFaDthPWMoZCxlKTtpZih6aCl7Zj0wO2Rve3poPSExO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IoeSgzMDEpKTtmKz0xO1Q9Uz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDt2aC5jdXJyZW50PUZoO2E9YyhkLGUpfXdoaWxlKHpoKX12aC5jdXJyZW50PUdoO2I9bnVsbCE9PVMmJm51bGwhPT1TLm5leHQ7eGg9MDtUPVM9Uj1udWxsO3loPSExO2lmKGIpdGhyb3cgRXJyb3IoeSgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBIaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YTtyZXR1cm4gVH1cbmZ1bmN0aW9uIEloKCl7aWYobnVsbD09PVMpe3ZhciBhPVIuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVMubmV4dDt2YXIgYj1udWxsPT09VD9SLm1lbW9pemVkU3RhdGU6VC5uZXh0O2lmKG51bGwhPT1iKVQ9YixTPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih5KDMxMCkpO1M9YTthPXttZW1vaXplZFN0YXRlOlMubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Uy5iYXNlU3RhdGUsYmFzZVF1ZXVlOlMuYmFzZVF1ZXVlLHF1ZXVlOlMucXVldWUsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWF9cmV0dXJuIFR9ZnVuY3Rpb24gSmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBLaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVMsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5sYW5lO2lmKCh4aCZsKT09PWwpbnVsbCE9PWgmJihoPWgubmV4dD17bGFuZTowLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7ZWxzZXt2YXIgbj17bGFuZTpsLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsXG5lYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bixmPWQpOmg9aC5uZXh0PW47Ui5sYW5lc3w9bDtEZ3w9bH1rPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZztIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gTGgoYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9Yi5fZ2V0VmVyc2lvbjtkPWQoYi5fc291cmNlKTt2YXIgZT1iLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5O2lmKG51bGwhPT1lKWE9ZT09PWQ7ZWxzZSBpZihhPWEubXV0YWJsZVJlYWRMYW5lcyxhPSh4aCZhKT09PWEpYi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1kLHRoLnB1c2goYik7aWYoYSlyZXR1cm4gYyhiLl9zb3VyY2UpO3RoLnB1c2goYik7dGhyb3cgRXJyb3IoeSgzNTApKTt9XG5mdW5jdGlvbiBOaChhLGIsYyxkKXt2YXIgZT1VO2lmKG51bGw9PT1lKXRocm93IEVycm9yKHkoMzQ5KSk7dmFyIGY9Yi5fZ2V0VmVyc2lvbixnPWYoYi5fc291cmNlKSxoPXZoLmN1cnJlbnQsaz1oLnVzZVN0YXRlKGZ1bmN0aW9uKCl7cmV0dXJuIE1oKGUsYixjKX0pLGw9a1sxXSxuPWtbMF07az1UO3ZhciBBPWEubWVtb2l6ZWRTdGF0ZSxwPUEucmVmcyxDPXAuZ2V0U25hcHNob3QseD1BLnNvdXJjZTtBPUEuc3Vic2NyaWJlO3ZhciB3PVI7YS5tZW1vaXplZFN0YXRlPXtyZWZzOnAsc291cmNlOmIsc3Vic2NyaWJlOmR9O2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cC5nZXRTbmFwc2hvdD1jO3Auc2V0U25hcHNob3Q9bDt2YXIgYT1mKGIuX3NvdXJjZSk7aWYoIUhlKGcsYSkpe2E9YyhiLl9zb3VyY2UpO0hlKG4sYSl8fChsKGEpLGE9SWcodyksZS5tdXRhYmxlUmVhZExhbmVzfD1hJmUucGVuZGluZ0xhbmVzKTthPWUubXV0YWJsZVJlYWRMYW5lcztlLmVudGFuZ2xlZExhbmVzfD1hO2Zvcih2YXIgZD1cbmUuZW50YW5nbGVtZW50cyxoPWE7MDxoOyl7dmFyIGs9MzEtVmMoaCksdj0xPDxrO2Rba118PWE7aCY9fnZ9fX0sW2MsYixkXSk7aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtyZXR1cm4gZChiLl9zb3VyY2UsZnVuY3Rpb24oKXt2YXIgYT1wLmdldFNuYXBzaG90LGM9cC5zZXRTbmFwc2hvdDt0cnl7YyhhKGIuX3NvdXJjZSkpO3ZhciBkPUlnKHcpO2UubXV0YWJsZVJlYWRMYW5lc3w9ZCZlLnBlbmRpbmdMYW5lc31jYXRjaChxKXtjKGZ1bmN0aW9uKCl7dGhyb3cgcTt9KX19KX0sW2IsZF0pO0hlKEMsYykmJkhlKHgsYikmJkhlKEEsZCl8fChhPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOm59LGEuZGlzcGF0Y2g9bD1PaC5iaW5kKG51bGwsUixhKSxrLnF1ZXVlPWEsay5iYXNlUXVldWU9bnVsbCxuPU1oKGUsYixjKSxrLm1lbW9pemVkU3RhdGU9ay5iYXNlU3RhdGU9bik7cmV0dXJuIG59XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9SWgoKTtyZXR1cm4gTmgoZCxhLGIsYyl9ZnVuY3Rpb24gUWgoYSl7dmFyIGI9SGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBSaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1SLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LFIudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goYSl7dmFyIGI9SGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX1mdW5jdGlvbiBUaCgpe3JldHVybiBJaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7dmFyIGU9SGgoKTtSLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9SWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uyl7dmFyIGc9Uy5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZCaChkLGcuZGVwcykpe1JoKGIsYyxmLGQpO3JldHVybn19Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsZixkKX1mdW5jdGlvbiBXaChhLGIpe3JldHVybiBVaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gVmgoNCwyLGEsYil9ZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1cbmZ1bmN0aW9uICRoKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwyLFpoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIGFpKCl7fWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIGNpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1lZygpO2dnKDk4PmM/OTg6YyxmdW5jdGlvbigpe2EoITApfSk7Z2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGM9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2EoITEpLGIoKX1maW5hbGx5e3doLnRyYW5zaXRpb249Y319KX1cbmZ1bmN0aW9uIE9oKGEsYixjKXt2YXIgZD1IZygpLGU9SWcoYSksZj17bGFuZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5wZW5kaW5nO251bGw9PT1nP2YubmV4dD1mOihmLm5leHQ9Zy5uZXh0LGcubmV4dD1mKTtiLnBlbmRpbmc9ZjtnPWEuYWx0ZXJuYXRlO2lmKGE9PT1SfHxudWxsIT09ZyYmZz09PVIpemg9eWg9ITA7ZWxzZXtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1nfHwwPT09Zy5sYW5lcykmJihnPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZykpdHJ5e3ZhciBoPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1nKGgsYyk7Zi5lYWdlclJlZHVjZXI9ZztmLmVhZ2VyU3RhdGU9aztpZihIZShrLGgpKXJldHVybn1jYXRjaChsKXt9ZmluYWxseXt9SmcoYSxlLGQpfX1cbnZhciBHaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6QWgsdXNlQ29udGV4dDpBaCx1c2VFZmZlY3Q6QWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpBaCx1c2VMYXlvdXRFZmZlY3Q6QWgsdXNlTWVtbzpBaCx1c2VSZWR1Y2VyOkFoLHVzZVJlZjpBaCx1c2VTdGF0ZTpBaCx1c2VEZWJ1Z1ZhbHVlOkFoLHVzZURlZmVycmVkVmFsdWU6QWgsdXNlVHJhbnNpdGlvbjpBaCx1c2VNdXRhYmxlU291cmNlOkFoLHVzZU9wYXF1ZUlkZW50aWZpZXI6QWgsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxEaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtIaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpXaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVWgoNCwyLFpoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBVaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUhoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOlNoLHVzZVN0YXRlOlFoLHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1RaChhKSxjPWJbMF0sZD1iWzFdO1doKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjtcbndoLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1RaCghMSksYj1hWzBdO2E9ZGkuYmluZChudWxsLGFbMV0pO1NoKGEpO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2QubWVtb2l6ZWRTdGF0ZT17cmVmczp7Z2V0U25hcHNob3Q6YixzZXRTbmFwc2hvdDpudWxsfSxzb3VyY2U6YSxzdWJzY3JpYmU6Y307cmV0dXJuIE5oKGQsYSxiLGMpfSx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7aWYobGgpe3ZhciBhPSExLGI9dWYoZnVuY3Rpb24oKXthfHwoYT0hMCxjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKSk7dGhyb3cgRXJyb3IoeSgzNTUpKTt9KSxjPVFoKGIpWzFdOzA9PT0oUi5tb2RlJjIpJiYoUi5mbGFnc3w9NTE2LFJoKDUsZnVuY3Rpb24oKXtjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKX0sXG52b2lkIDAsbnVsbCkpO3JldHVybiBifWI9XCJyOlwiKyh0ZisrKS50b1N0cmluZygzNik7UWgoYik7cmV0dXJuIGJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRWg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpLaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9S2goSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1LaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEZoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6TGgsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUxoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9TGgoSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxlaT1yYS5SZWFjdEN1cnJlbnRPd25lcix1Zz0hMTtmdW5jdGlvbiBmaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1pnKGIsbnVsbCxjLGQpOllnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt0ZyhiLGUpO2Q9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFqaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxraShhLGIsZyxkLGUsZik7YT1WZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoMD09PShlJmYpJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOkplLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIGhpKGEsYixmKTtiLmZsYWdzfD0xO2E9VGcoZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUsZil7aWYobnVsbCE9PWEmJkplKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZih1Zz0hMSwwIT09KGYmZSkpMCE9PShhLmZsYWdzJjE2Mzg0KSYmKHVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsaGkoYSxiLGYpO3JldHVybiBsaShhLGIsYyxkLGYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGV8fFwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIj09PWQubW9kZSlpZigwPT09KGIubW9kZSY0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLGMpO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsbnVsbCE9PWY/Zi5iYXNlTGFuZXM6Yyk7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphfSxuaShiLGEpLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsbmkoYixkKTtmaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTEyOH1mdW5jdGlvbiBsaShhLGIsYyxkLGUpe3ZhciBmPUZmKGMpP0RmOk0uY3VycmVudDtmPUVmKGIsZik7dGcoYixlKTtjPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSl7aWYoRmYoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt0ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxNZyhiLGMsZCksT2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dmcobCk6KGw9RmYoYyk/RGY6TS5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk5nKGIsZyxkLGwpO3dnPSExO3ZhciBwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHAhPT1rfHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKEdnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TGcoYixjLGgsZCxwLGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpsZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO0E9Yi5wZW5kaW5nUHJvcHM7cD1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az12ZyhrKTooaz1GZihjKT9EZjpNLmN1cnJlbnQsaz1FZihiLGspKTt2YXIgQz1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQ3x8XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PUF8fHAhPT1rKSYmTmcoYixnLGQsayk7d2c9ITE7cD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtoIT09QXx8cCE9PXh8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDJiYoR2coYixjLEMsZCkseD1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxMZyhiLGMsbCxkLHAseCxrKSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5oPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGQ9ITEpfXJldHVybiBxaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBxaShhLGIsYyxkLGUsZil7b2koYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxoaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtlaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVlnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WWcoYixudWxsLGgsZikpOmZpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcmkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7ZWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHNpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlMYW5lOjB9O1xuZnVuY3Rpb24gdGkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZzsoZz0wIT09KGIuZmxhZ3MmNjQpKXx8KGc9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtnPyhmPSEwLGIuZmxhZ3MmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWQuZmFsbGJhY2t8fCEwPT09ZC51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGV8PTEpO0koUCxlJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1kLmZhbGxiYWNrJiZwaChiKTthPWQuY2hpbGRyZW47ZT1kLmZhbGxiYWNrO2lmKGYpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sYi5tZW1vaXplZFN0YXRlPXNpLGE7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sXG5iLm1lbW9pemVkU3RhdGU9c2ksYi5sYW5lcz0zMzU1NDQzMixhO2M9dmkoe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46YX0sYi5tb2RlLGMsbnVsbCk7Yy5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1jfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2lmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTpcbntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWEubW9kZSxmPWEuY2hpbGQ7Yj17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmJ9OzA9PT0oZSYyKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPWIpOmY9dmkoYixlLDAsbnVsbCk7Yz1YZyhjLGUsZCxudWxsKTtmLnJldHVybj1hO2MucmV0dXJuPWE7Zi5zaWJsaW5nPWM7YS5jaGlsZD1mO3JldHVybiBjfVxuZnVuY3Rpb24geGkoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPVRnKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjIpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoYS5uZXh0RWZmZWN0PW51bGwsYS5mbGFncz04LGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWEpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiB3aShhLGIsYyxkLGUpe3ZhciBmPWIubW9kZSxnPWEuY2hpbGQ7YT1nLnNpYmxpbmc7dmFyIGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMikmJmIuY2hpbGQhPT1nPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxnPWMubGFzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1jLmZpcnN0RWZmZWN0LGIubGFzdEVmZmVjdD1nLGcubmV4dEVmZmVjdD1udWxsKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsKTpjPVRnKGcsaCk7bnVsbCE9PWE/ZD1UZyhhLGQpOihkPVhnKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWkoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7c2coYS5yZXR1cm4sYil9XG5mdW5jdGlvbiB6aShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtmaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmeWkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpeWkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShQLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1paChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3ppKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWloKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX16aShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6emkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtEZ3w9Yi5sYW5lcztpZigwIT09KGMmYi5jaGlsZExhbmVzKSl7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHkoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVRnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1UZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXJldHVybiBudWxsfXZhciBCaSxDaSxEaSxFaTtcbkJpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtDaT1mdW5jdGlvbigpe307XG5EaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7ZGgoYWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZSk7ZD1lYihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX12YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PVxubCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHxcbihjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxjKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRyhcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOlwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYT9rLnRvU3RyaW5nKCk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLFxuYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0VpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O2Z1bmN0aW9uIEZpKGEsYil7aWYoIWxoKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClyaChiKT9iLmZsYWdzfD00OmQuaHlkcmF0ZXx8KGIuZmxhZ3N8PTI1Nik7Q2koYik7cmV0dXJuIG51bGw7Y2FzZSA1OmhoKGIpO3ZhciBlPWRoKGNoLmN1cnJlbnQpO2M9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlEaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1cbmIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7cmV0dXJuIG51bGx9YT1kaChhaC5jdXJyZW50KTtpZihyaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFt3Zl09YjtkW3hmXT1mO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGQpO0coXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8WGUubGVuZ3RoO2ErKylHKFhlW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixkKTtHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEcoXCJpbnZhbGlkXCIsZCl9dmIoYyxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpZi5oYXNPd25Qcm9wZXJ0eShnKSYmKGU9ZltnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZT9kLnRleHRDb250ZW50IT09ZSYmKGE9W1wiY2hpbGRyZW5cIixlXSk6XCJudW1iZXJcIj09PXR5cGVvZiBlJiZkLnRleHRDb250ZW50IT09XCJcIitlJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIrZV0pOmNhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1lJiZcIm9uU2Nyb2xsXCI9PT1nJiZHKFwic2Nyb2xsXCIsZCkpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPVxuamYpfWQ9YTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7YT09PWtiLmh0bWwmJihhPWxiKGMpKTthPT09a2IuaHRtbD9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2Fbd2ZdPWI7YVt4Zl09ZDtCaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz13YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGEpO0coXCJjbG9zZVwiLGEpO1xuZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPFhlLmxlbmd0aDtlKyspRyhYZVtlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixhKTtHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPVxuZ2IoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXZiKGMsZSk7dmFyIGg9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj90YihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmb2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmcGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJnBiKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoY2EuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRyhcInNjcm9sbFwiLGEpOm51bGwhPWsmJnFhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7Y2IoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX1tZihjLGQpJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7XG5jPWRoKGNoLmN1cnJlbnQpO2RoKGFoLmN1cnJlbnQpO3JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbd2ZdPWIsZC5ub2RlVmFsdWUhPT1jJiYoYi5mbGFnc3w9NCkpOihkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFt3Zl09YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmcmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKGQmJiFjJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JjEpKTA9PT1WJiYoVj0zKTtlbHNle2lmKDA9PT1WfHwzPT09VilWPVxuNDtudWxsPT09VXx8MD09PShEZyYxMzQyMTc3MjcpJiYwPT09KEhpJjEzNDIxNzcyNyl8fElpKFUsVyl9aWYoZHx8YyliLmZsYWdzfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxDaShiKSxudWxsPT09YSYmY2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksbnVsbDtjYXNlIDEwOnJldHVybiByZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDE5OkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Zj0wIT09KGIuZmxhZ3MmNjQpO2c9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZilGaShkLCExKTtlbHNle2lmKDAhPT1WfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1paChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9NjQ7RmkoZCwhMSk7Zj1nLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZmxhZ3N8PTQpO1xubnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0yLGYubmV4dEVmZmVjdD1udWxsLGYuZmlyc3RFZmZlY3Q9bnVsbCxmLmxhc3RFZmZlY3Q9bnVsbCxnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsXG5mLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0koUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09ZC50YWlsJiZPKCk+SmkmJihiLmZsYWdzfD02NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpfWVsc2V7aWYoIWYpaWYoYT1paChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9NjQsZj0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIWxoKXJldHVybiBiPWIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqTygpLWQucmVuZGVyaW5nU3RhcnRUaW1lPkppJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PVxuNjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKTtkLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZC5sYXN0PWcpfXJldHVybiBudWxsIT09ZC50YWlsPyhjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT1PKCksYy5zaWJsaW5nPW51bGwsYj1QLmN1cnJlbnQsSShQLGY/YiYxfDI6YiYxKSxjKTpudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PShudWxsIT09Yi5tZW1vaXplZFN0YXRlKSYmXCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiIT09ZC5tb2RlJiYoYi5mbGFnc3w9NCksbnVsbH10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIExpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkZmKGEudHlwZSkmJkdmKCk7dmFyIGI9YS5mbGFncztyZXR1cm4gYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtiPWEuZmxhZ3M7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih5KDI4NSkpO2EuZmxhZ3M9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGhoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQKSxiPWEuZmxhZ3MsYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKFApLG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVFhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBOaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gUGkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWl8fChRaT0hMCxSaT1kKTtOaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtOaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VGk/VGk9bmV3IFNldChbdGhpc10pOlRpLmFkZCh0aGlzKSxOaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY312YXIgVWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7XG5mdW5jdGlvbiBWaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtXaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9ZnVuY3Rpb24gWGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZmxhZ3MmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpsZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Yi5mbGFncyYyNTYmJnFmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIFlpKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpiPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3tpZigzPT09KGEudGFnJjMpKXt2YXIgZD1hLmNyZWF0ZTthLmRlc3Ryb3k9ZCgpfWE9YS5uZXh0fXdoaWxlKGEhPT1iKX1iPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3t2YXIgZT1hO2Q9ZS5uZXh0O2U9ZS50YWc7MCE9PShlJjQpJiYwIT09KGUmMSkmJihaaShjLGEpLCRpKGMsYSkpO2E9ZH13aGlsZShhIT09Yil9cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2MuZmxhZ3MmNCYmKG51bGw9PT1iP2EuY29tcG9uZW50RGlkTW91bnQoKTooZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczpsZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKSxhLmNvbXBvbmVudERpZFVwZGF0ZShkLFxuYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpKSk7Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZFZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUVnKGMsYixhKX1yZXR1cm47Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZmxhZ3MmNCYmbWYoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZDYyhjKSkpKTtcbnJldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmNhc2UgMjM6Y2FzZSAyNDpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBhaihhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkPWQuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuc2V0UHJvcGVydHk/ZC5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpkLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9c2IoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoKDIzIT09Yy50YWcmJjI0IT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fGM9PT1hKSYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBiaihhLGIpe2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclVubW91bnQpdHJ5e01mLm9uQ29tbWl0RmliZXJVbm1vdW50KExmLGIpfWNhdGNoKGYpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGM9YT1hLm5leHQ7ZG97dmFyIGQ9YyxlPWQuZGVzdHJveTtkPWQudGFnO2lmKHZvaWQgMCE9PWUpaWYoMCE9PShkJjQpKVppKGIsYyk7ZWxzZXtkPWI7dHJ5e2UoKX1jYXRjaChmKXtXaShkLGYpfX1jPWMubmV4dH13aGlsZShjIT09YSl9YnJlYWs7Y2FzZSAxOlZpKGIpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtXaShiLFxuZil9YnJlYWs7Y2FzZSA1OlZpKGIpO2JyZWFrO2Nhc2UgNDpjaihhLGIpfX1mdW5jdGlvbiBkaihhKXthLmFsdGVybmF0ZT1udWxsO2EuY2hpbGQ9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EucmV0dXJuPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIGVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZmooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoZWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHkoMTYwKSk7fXZhciBjPWI7Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMTYxKSk7fWMuZmxhZ3MmMTYmJihwYihiLFwiXCIpLGMuZmxhZ3MmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxlaihjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmZsYWdzJjIpY29udGludWUgYjtpZihudWxsPT09XG5jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5mbGFncyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP2dqKGEsYyxiKTpoaihhLGMsYil9XG5mdW5jdGlvbiBnaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9amYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoZ2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylnaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBoaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspaGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gY2ooYSxiKXtmb3IodmFyIGM9YixkPSExLGUsZjs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IoeSgxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKXthOmZvcih2YXIgZz1hLGg9YyxrPWg7OylpZihiaihnLGspLG51bGwhPT1rLmNoaWxkJiY0IT09ay50YWcpay5jaGlsZC5yZXR1cm49ayxrPWsuY2hpbGQ7ZWxzZXtpZihrPT09aClicmVhayBhO2Zvcig7bnVsbD09PWsuc2libGluZzspe2lmKG51bGw9PT1rLnJldHVybnx8ay5yZXR1cm49PT1oKWJyZWFrIGE7az1rLnJldHVybn1rLnNpYmxpbmcucmV0dXJuPWsucmV0dXJuO2s9ay5zaWJsaW5nfWY/KGc9ZSxoPWMuc3RhdGVOb2RlLFxuOD09PWcubm9kZVR5cGU/Zy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpOmcucmVtb3ZlQ2hpbGQoaCkpOmUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoYmooYSxjKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBpaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6dmFyIGM9Yi51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkbyAzPT09KGQudGFnJjMpJiYoYT1kLmRlc3Ryb3ksZC5kZXN0cm95PXZvaWQgMCx2b2lkIDAhPT1hJiZhKCkpLGQ9ZC5uZXh0O3doaWxlKGQhPT1jKX1yZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6Yz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXtkPWIubWVtb2l6ZWRQcm9wczt2YXIgZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t4Zl09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmJGEoYyxkKTt3YihhLGUpO2I9d2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9XG4yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29iKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wYihjLGgpOnFhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjphYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZmIoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPVxuYi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yz1iLnN0YXRlTm9kZTtjLmh5ZHJhdGUmJihjLmh5ZHJhdGU9ITEsQ2MoYy5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSYmKGpqPU8oKSxhaihiLmNoaWxkLCEwKSk7a2ooYik7cmV0dXJuO2Nhc2UgMTk6a2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJuO2Nhc2UgMjM6Y2FzZSAyNDphaihiLG51bGwhPT1iLm1lbW9pemVkU3RhdGUpO3JldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31mdW5jdGlvbiBraihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBVaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWxqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gbWooYSxiKXtyZXR1cm4gbnVsbCE9PWEmJihhPWEubWVtb2l6ZWRTdGF0ZSxudWxsPT09YXx8bnVsbCE9PWEuZGVoeWRyYXRlZCk/KGI9Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1iJiZudWxsPT09Yi5kZWh5ZHJhdGVkKTohMX12YXIgbmo9TWF0aC5jZWlsLG9qPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIscGo9cmEuUmVhY3RDdXJyZW50T3duZXIsWD0wLFU9bnVsbCxZPW51bGwsVz0wLHFqPTAscmo9QmYoMCksVj0wLHNqPW51bGwsdGo9MCxEZz0wLEhpPTAsdWo9MCx2aj1udWxsLGpqPTAsSmk9SW5maW5pdHk7ZnVuY3Rpb24gd2ooKXtKaT1PKCkrNTAwfXZhciBaPW51bGwsUWk9ITEsUmk9bnVsbCxUaT1udWxsLHhqPSExLHlqPW51bGwsemo9OTAsQWo9W10sQmo9W10sQ2o9bnVsbCxEaj0wLEVqPW51bGwsRmo9LTEsR2o9MCxIaj0wLElqPW51bGwsSmo9ITE7ZnVuY3Rpb24gSGcoKXtyZXR1cm4gMCE9PShYJjQ4KT9PKCk6LTEhPT1Gaj9GajpGaj1PKCl9XG5mdW5jdGlvbiBJZyhhKXthPWEubW9kZTtpZigwPT09KGEmMikpcmV0dXJuIDE7aWYoMD09PShhJjQpKXJldHVybiA5OT09PWVnKCk/MToyOzA9PT1HaiYmKEdqPXRqKTtpZigwIT09a2cudHJhbnNpdGlvbil7MCE9PUhqJiYoSGo9bnVsbCE9PXZqP3ZqLnBlbmRpbmdMYW5lczowKTthPUdqO3ZhciBiPTQxODYxMTImfkhqO2ImPS1iOzA9PT1iJiYoYT00MTg2MTEyJn5hLGI9YSYtYSwwPT09YiYmKGI9ODE5MikpO3JldHVybiBifWE9ZWcoKTswIT09KFgmNCkmJjk4PT09YT9hPVhjKDEyLEdqKTooYT1TYyhhKSxhPVhjKGEsR2opKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpnKGEsYixjKXtpZig1MDxEail0aHJvdyBEaj0wLEVqPW51bGwsRXJyb3IoeSgxODUpKTthPUtqKGEsYik7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7JGMoYSxiLGMpO2E9PT1VJiYoSGl8PWIsND09PVYmJklpKGEsVykpO3ZhciBkPWVnKCk7MT09PWI/MCE9PShYJjgpJiYwPT09KFgmNDgpP0xqKGEpOihNaihhLGMpLDA9PT1YJiYod2ooKSxpZygpKSk6KDA9PT0oWCY0KXx8OTghPT1kJiY5OSE9PWR8fChudWxsPT09Q2o/Q2o9bmV3IFNldChbYV0pOkNqLmFkZChhKSksTWooYSxjKSk7dmo9YX1mdW5jdGlvbiBLaihhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiBNaihhLGIpe2Zvcih2YXIgYz1hLmNhbGxiYWNrTm9kZSxkPWEuc3VzcGVuZGVkTGFuZXMsZT1hLnBpbmdlZExhbmVzLGY9YS5leHBpcmF0aW9uVGltZXMsZz1hLnBlbmRpbmdMYW5lczswPGc7KXt2YXIgaD0zMS1WYyhnKSxrPTE8PGgsbD1mW2hdO2lmKC0xPT09bCl7aWYoMD09PShrJmQpfHwwIT09KGsmZSkpe2w9YjtSYyhrKTt2YXIgbj1GO2ZbaF09MTA8PW4/bCsyNTA6Njw9bj9sKzVFMzotMX19ZWxzZSBsPD1iJiYoYS5leHBpcmVkTGFuZXN8PWspO2cmPX5rfWQ9VWMoYSxhPT09VT9XOjApO2I9RjtpZigwPT09ZCludWxsIT09YyYmKGMhPT1aZiYmUGYoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MCk7ZWxzZXtpZihudWxsIT09Yyl7aWYoYS5jYWxsYmFja1ByaW9yaXR5PT09YilyZXR1cm47YyE9PVpmJiZQZihjKX0xNT09PWI/KGM9TGouYmluZChudWxsLGEpLG51bGw9PT1hZz8oYWc9W2NdLGJnPU9mKFVmLGpnKSk6YWcucHVzaChjKSxcbmM9WmYpOjE0PT09Yj9jPWhnKDk5LExqLmJpbmQobnVsbCxhKSk6KGM9VGMoYiksYz1oZyhjLE5qLmJpbmQobnVsbCxhKSkpO2EuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gTmooYSl7Rmo9LTE7SGo9R2o9MDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGI9YS5jYWxsYmFja05vZGU7aWYoT2ooKSYmYS5jYWxsYmFja05vZGUhPT1iKXJldHVybiBudWxsO3ZhciBjPVVjKGEsYT09PVU/VzowKTtpZigwPT09YylyZXR1cm4gbnVsbDt2YXIgZD1jO3ZhciBlPVg7WHw9MTY7dmFyIGY9UGooKTtpZihVIT09YXx8VyE9PWQpd2ooKSxRaihhLGQpO2RvIHRyeXtSaigpO2JyZWFrfWNhdGNoKGgpe1NqKGEsaCl9d2hpbGUoMSk7cWcoKTtvai5jdXJyZW50PWY7WD1lO251bGwhPT1ZP2Q9MDooVT1udWxsLFc9MCxkPVYpO2lmKDAhPT0odGomSGkpKVFqKGEsMCk7ZWxzZSBpZigwIT09ZCl7Mj09PWQmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYz1XYyhhKSwwIT09YyYmKGQ9VGooYSxjKSkpO2lmKDE9PT1kKXRocm93IGI9c2osUWooYSwwKSxJaShhLGMpLE1qKGEsTygpKSxiO2EuZmluaXNoZWRXb3JrPVxuYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9Yztzd2l0Y2goZCl7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcih5KDM0NSkpO2Nhc2UgMjpVaihhKTticmVhaztjYXNlIDM6SWkoYSxjKTtpZigoYyY2MjkxNDU2MCk9PT1jJiYoZD1qais1MDAtTygpLDEwPGQpKXtpZigwIT09VWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmYykhPT1jKXtIZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGQpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNDpJaShhLGMpO2lmKChjJjQxODYxMTIpPT09YylicmVhaztkPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGM7KXt2YXIgZz0zMS1WYyhjKTtmPTE8PGc7Zz1kW2ddO2c+ZSYmKGU9Zyk7YyY9fmZ9Yz1lO2M9TygpLWM7Yz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5cbmM/NDMyMDoxOTYwKm5qKGMvMTk2MCkpLWM7aWYoMTA8Yyl7YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxjKTticmVha31VaihhKTticmVhaztjYXNlIDU6VWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMyOSkpO319TWooYSxPKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWI/TmouYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gSWkoYSxiKXtiJj1+dWo7YiY9fkhpO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtVmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fVxuZnVuY3Rpb24gTGooYSl7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO09qKCk7aWYoYT09PVUmJjAhPT0oYS5leHBpcmVkTGFuZXMmVykpe3ZhciBiPVc7dmFyIGM9VGooYSxiKTswIT09KHRqJkhpKSYmKGI9VWMoYSxiKSxjPVRqKGEsYikpfWVsc2UgYj1VYyhhLDApLGM9VGooYSxiKTswIT09YS50YWcmJjI9PT1jJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGI9V2MoYSksMCE9PWImJihjPVRqKGEsYikpKTtpZigxPT09Yyl0aHJvdyBjPXNqLFFqKGEsMCksSWkoYSxiKSxNaihhLE8oKSksYzthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1VqKGEpO01qKGEsTygpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZqKCl7aWYobnVsbCE9PUNqKXt2YXIgYT1DajtDaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhKXthLmV4cGlyZWRMYW5lc3w9MjQmYS5wZW5kaW5nTGFuZXM7TWooYSxPKCkpfSl9aWcoKX1mdW5jdGlvbiBXaihhLGIpe3ZhciBjPVg7WHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBYaihhLGIpe3ZhciBjPVg7WCY9LTI7WHw9ODt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBuaShhLGIpe0kocmoscWopO3FqfD1iO3RqfD1ifWZ1bmN0aW9uIEtpKCl7cWo9cmouY3VycmVudDtIKHJqKX1cbmZ1bmN0aW9uIFFqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHBmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkdmKCk7YnJlYWs7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7YnJlYWs7Y2FzZSA1OmhoKGQpO2JyZWFrO2Nhc2UgNDpmaCgpO2JyZWFrO2Nhc2UgMTM6SChQKTticmVhaztjYXNlIDE5OkgoUCk7YnJlYWs7Y2FzZSAxMDpyZyhkKTticmVhaztjYXNlIDIzOmNhc2UgMjQ6S2koKX1jPWMucmV0dXJufVU9YTtZPVRnKGEuY3VycmVudCxudWxsKTtXPXFqPXRqPWI7Vj0wO3NqPW51bGw7dWo9SGk9RGc9MH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG97dmFyIGM9WTt0cnl7cWcoKTt2aC5jdXJyZW50PUdoO2lmKHloKXtmb3IodmFyIGQ9Ui5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH15aD0hMX14aD0wO1Q9Uz1SPW51bGw7emg9ITE7cGouY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Y9MTtzaj1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVc7aC5mbGFnc3w9MjA0ODtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWs7aWYoMD09PShoLm1vZGUmMikpe3ZhciBuPWguYWx0ZXJuYXRlO24/KGgudXBkYXRlUXVldWU9bi51cGRhdGVRdWV1ZSxoLm1lbW9pemVkU3RhdGU9bi5tZW1vaXplZFN0YXRlLGgubGFuZXM9bi5sYW5lcyk6XG4oaC51cGRhdGVRdWV1ZT1udWxsLGgubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgQT0wIT09KFAuY3VycmVudCYxKSxwPWc7ZG97dmFyIEM7aWYoQz0xMz09PXAudGFnKXt2YXIgeD1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXgpQz1udWxsIT09eC5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIHc9cC5tZW1vaXplZFByb3BzO0M9dm9pZCAwPT09dy5mYWxsYmFjaz8hMTohMCE9PXcudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6QT8hMTohMH19aWYoQyl7dmFyIHo9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09eil7dmFyIHU9bmV3IFNldDt1LmFkZChsKTtwLnVwZGF0ZVF1ZXVlPXV9ZWxzZSB6LmFkZChsKTtpZigwPT09KHAubW9kZSYyKSl7cC5mbGFnc3w9NjQ7aC5mbGFnc3w9MTYzODQ7aC5mbGFncyY9LTI5ODE7aWYoMT09PWgudGFnKWlmKG51bGw9PT1oLmFsdGVybmF0ZSloLnRhZz0xNztlbHNle3ZhciB0PXpnKC0xLDEpO3QudGFnPTI7QWcoaCx0KX1oLmxhbmVzfD0xO2JyZWFrIGF9az1cbnZvaWQgMDtoPWI7dmFyIHE9Zi5waW5nQ2FjaGU7bnVsbD09PXE/KHE9Zi5waW5nQ2FjaGU9bmV3IE9pLGs9bmV3IFNldCxxLnNldChsLGspKTooaz1xLmdldChsKSx2b2lkIDA9PT1rJiYoaz1uZXcgU2V0LHEuc2V0KGwsaykpKTtpZighay5oYXMoaCkpe2suYWRkKGgpO3ZhciB2PVlqLmJpbmQobnVsbCxmLGwsaCk7bC50aGVuKHYsdil9cC5mbGFnc3w9NDA5NjtwLmxhbmVzPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtrPUVycm9yKChSYShoLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIpfTUhPT1WJiYoVj0yKTtrPU1pKGssaCk7cD1cbmc7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6Zj1rO3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgSj1QaShwLGYsYik7QmcocCxKKTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIEs9cC50eXBlLFE9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmZsYWdzJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBLLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PVEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBRLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKFEpKSkpe3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgTD1TaShwLGYsYik7QmcocCxMKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1aaihjKX1jYXRjaCh2YSl7Yj12YTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gUGooKXt2YXIgYT1vai5jdXJyZW50O29qLmN1cnJlbnQ9R2g7cmV0dXJuIG51bGw9PT1hP0doOmF9ZnVuY3Rpb24gVGooYSxiKXt2YXIgYz1YO1h8PTE2O3ZhciBkPVBqKCk7VT09PWEmJlc9PT1ifHxRaihhLGIpO2RvIHRyeXthaygpO2JyZWFrfWNhdGNoKGUpe1NqKGEsZSl9d2hpbGUoMSk7cWcoKTtYPWM7b2ouY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHkoMjYxKSk7VT1udWxsO1c9MDtyZXR1cm4gVn1mdW5jdGlvbiBhaygpe2Zvcig7bnVsbCE9PVk7KWJrKFkpfWZ1bmN0aW9uIFJqKCl7Zm9yKDtudWxsIT09WSYmIVFmKCk7KWJrKFkpfWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWNrKGEuYWx0ZXJuYXRlLGEscWopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9aaihhKTpZPWI7cGouY3VycmVudD1udWxsfVxuZnVuY3Rpb24gWmooYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYyMDQ4KSl7Yz1HaShjLGIscWopO2lmKG51bGwhPT1jKXtZPWM7cmV0dXJufWM9YjtpZigyNCE9PWMudGFnJiYyMyE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHwwIT09KHFqJjEwNzM3NDE4MjQpfHwwPT09KGMubW9kZSY0KSl7Zm9yKHZhciBkPTAsZT1jLmNoaWxkO251bGwhPT1lOylkfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxlPWUuc2libGluZztjLmNoaWxkTGFuZXM9ZH1udWxsIT09YSYmMD09PShhLmZsYWdzJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLG51bGwhPT1iLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCksMTxiLmZsYWdzJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI6YS5maXJzdEVmZmVjdD1iLGEubGFzdEVmZmVjdD1iKSl9ZWxzZXtjPUxpKGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0yMDQ3O1k9YztyZXR1cm59bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZmxhZ3N8PTIwNDgpfWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09ViYmKFY9NSl9ZnVuY3Rpb24gVWooYSl7dmFyIGI9ZWcoKTtnZyg5OSxkay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkayhhLGIpe2RvIE9qKCk7d2hpbGUobnVsbCE9PXlqKTtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcms7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHkoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDt2YXIgZD1jLmxhbmVzfGMuY2hpbGRMYW5lcyxlPWQsZj1hLnBlbmRpbmdMYW5lcyZ+ZTthLnBlbmRpbmdMYW5lcz1lO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWU7YS5tdXRhYmxlUmVhZExhbmVzJj1lO2EuZW50YW5nbGVkTGFuZXMmPWU7ZT1hLmVudGFuZ2xlbWVudHM7Zm9yKHZhciBnPWEuZXZlbnRUaW1lcyxoPWEuZXhwaXJhdGlvblRpbWVzOzA8Zjspe3ZhciBrPTMxLVZjKGYpLGw9MTw8aztlW2tdPTA7Z1trXT0tMTtoW2tdPS0xO2YmPX5sfW51bGwhPT1cbkNqJiYwPT09KGQmMjQpJiZDai5oYXMoYSkmJkNqLmRlbGV0ZShhKTthPT09VSYmKFk9VT1udWxsLFc9MCk7MTxjLmZsYWdzP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZD1jLmZpcnN0RWZmZWN0KTpkPWM6ZD1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1kKXtlPVg7WHw9MzI7cGouY3VycmVudD1udWxsO2tmPWZkO2c9TmUoKTtpZihPZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyloPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOmlmKGg9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93LChsPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpKSYmMCE9PWwucmFuZ2VDb3VudCl7aD1sLmFuY2hvck5vZGU7Zj1sLmFuY2hvck9mZnNldDtrPWwuZm9jdXNOb2RlO2w9bC5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKHZhKXtoPW51bGw7XG5icmVhayBhfXZhciBuPTAsQT0tMSxwPS0xLEM9MCx4PTAsdz1nLHo9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3chPT1ofHwwIT09ZiYmMyE9PXcubm9kZVR5cGV8fChBPW4rZik7dyE9PWt8fDAhPT1sJiYzIT09dy5ub2RlVHlwZXx8KHA9bitsKTszPT09dy5ub2RlVHlwZSYmKG4rPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXcuZmlyc3RDaGlsZCkpYnJlYWs7ej13O3c9dX1mb3IoOzspe2lmKHc9PT1nKWJyZWFrIGI7ej09PWgmJisrQz09PWYmJihBPW4pO3o9PT1rJiYrK3g9PT1sJiYocD1uKTtpZihudWxsIT09KHU9dy5uZXh0U2libGluZykpYnJlYWs7dz16O3o9dy5wYXJlbnROb2RlfXc9dX1oPS0xPT09QXx8LTE9PT1wP251bGw6e3N0YXJ0OkEsZW5kOnB9fWVsc2UgaD1udWxsO2g9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1udWxsO2xmPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO0lqPW51bGw7Smo9ITE7Wj1kO2RvIHRyeXtlaygpfWNhdGNoKHZhKXtpZihudWxsPT09XG5aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO0lqPW51bGw7Wj1kO2RvIHRyeXtmb3IoZz1hO251bGwhPT1aOyl7dmFyIHQ9Wi5mbGFnczt0JjE2JiZwYihaLnN0YXRlTm9kZSxcIlwiKTtpZih0JjEyOCl7dmFyIHE9Wi5hbHRlcm5hdGU7aWYobnVsbCE9PXEpe3ZhciB2PXEucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh0JjEwMzgpe2Nhc2UgMjpmaihaKTtaLmZsYWdzJj0tMzticmVhaztjYXNlIDY6ZmooWik7Wi5mbGFncyY9LTM7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSAxMDI0OlouZmxhZ3MmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpaLmZsYWdzJj0tMTAyNTtpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDQ6aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA4Omg9WjtjaihnLGgpO3ZhciBKPWguYWx0ZXJuYXRlO2RqKGgpO251bGwhPT1cbkomJmRqKEopfVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7dj1sZjtxPU5lKCk7dD12LmZvY3VzZWRFbGVtO2c9di5zZWxlY3Rpb25SYW5nZTtpZihxIT09dCYmdCYmdC5vd25lckRvY3VtZW50JiZNZSh0Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQpKXtudWxsIT09ZyYmT2UodCkmJihxPWcuc3RhcnQsdj1nLmVuZCx2b2lkIDA9PT12JiYodj1xKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB0Pyh0LnNlbGVjdGlvblN0YXJ0PXEsdC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odix0LnZhbHVlLmxlbmd0aCkpOih2PShxPXQub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZxLmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksaD10LnRleHRDb250ZW50Lmxlbmd0aCxKPU1hdGgubWluKGcuc3RhcnQsaCksZz12b2lkIDA9PT1cbmcuZW5kP0o6TWF0aC5taW4oZy5lbmQsaCksIXYuZXh0ZW5kJiZKPmcmJihoPWcsZz1KLEo9aCksaD1MZSh0LEopLGY9TGUodCxnKSxoJiZmJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09aC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWgub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PWYubm9kZXx8di5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSYmKHE9cS5jcmVhdGVSYW5nZSgpLHEuc2V0U3RhcnQoaC5ub2RlLGgub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLEo+Zz8odi5hZGRSYW5nZShxKSx2LmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKToocS5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSx2LmFkZFJhbmdlKHEpKSkpKSk7cT1bXTtmb3Iodj10O3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmcS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHQuZm9jdXMmJnQuZm9jdXMoKTtmb3IodD1cbjA7dDxxLmxlbmd0aDt0Kyspdj1xW3RdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWZkPSEha2Y7bGY9a2Y9bnVsbDthLmN1cnJlbnQ9YztaPWQ7ZG8gdHJ5e2Zvcih0PWE7bnVsbCE9PVo7KXt2YXIgSz1aLmZsYWdzO0smMzYmJllpKHQsWi5hbHRlcm5hdGUsWik7aWYoSyYxMjgpe3E9dm9pZCAwO3ZhciBRPVoucmVmO2lmKG51bGwhPT1RKXt2YXIgTD1aLnN0YXRlTm9kZTtzd2l0Y2goWi50YWcpe2Nhc2UgNTpxPUw7YnJlYWs7ZGVmYXVsdDpxPUx9XCJmdW5jdGlvblwiPT09dHlwZW9mIFE/UShxKTpRLmN1cnJlbnQ9cX19Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtaPW51bGw7JGYoKTtYPWV9ZWxzZSBhLmN1cnJlbnQ9YztpZih4ail4aj0hMSx5aj1hLHpqPWI7ZWxzZSBmb3IoWj1kO251bGwhPT1aOyliPVxuWi5uZXh0RWZmZWN0LFoubmV4dEVmZmVjdD1udWxsLFouZmxhZ3MmOCYmKEs9WixLLnNpYmxpbmc9bnVsbCxLLnN0YXRlTm9kZT1udWxsKSxaPWI7ZD1hLnBlbmRpbmdMYW5lczswPT09ZCYmKFRpPW51bGwpOzE9PT1kP2E9PT1Faj9EaisrOihEaj0wLEVqPWEpOkRqPTA7Yz1jLnN0YXRlTm9kZTtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJSb290KXRyeXtNZi5vbkNvbW1pdEZpYmVyUm9vdChMZixjLHZvaWQgMCw2ND09PShjLmN1cnJlbnQuZmxhZ3MmNjQpKX1jYXRjaCh2YSl7fU1qKGEsTygpKTtpZihRaSl0aHJvdyBRaT0hMSxhPVJpLFJpPW51bGwsYTtpZigwIT09KFgmOCkpcmV0dXJuIG51bGw7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVrKCl7Zm9yKDtudWxsIT09Wjspe3ZhciBhPVouYWx0ZXJuYXRlO0pqfHxudWxsPT09SWp8fCgwIT09KFouZmxhZ3MmOCk/ZGMoWixJaikmJihKaj0hMCk6MTM9PT1aLnRhZyYmbWooYSxaKSYmZGMoWixJaikmJihKaj0hMCkpO3ZhciBiPVouZmxhZ3M7MCE9PShiJjI1NikmJlhpKGEsWik7MD09PShiJjUxMil8fHhqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpO1o9Wi5uZXh0RWZmZWN0fX1mdW5jdGlvbiBPaigpe2lmKDkwIT09emope3ZhciBhPTk3PHpqPzk3OnpqO3pqPTkwO3JldHVybiBnZyhhLGZrKX1yZXR1cm4hMX1mdW5jdGlvbiAkaShhLGIpe0FqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1mdW5jdGlvbiBaaShhLGIpe0JqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1cbmZ1bmN0aW9uIGZrKCl7aWYobnVsbD09PXlqKXJldHVybiExO3ZhciBhPXlqO3lqPW51bGw7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMzMSkpO3ZhciBiPVg7WHw9MzI7dmFyIGM9Qmo7Qmo9W107Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKz0yKXt2YXIgZT1jW2RdLGY9Y1tkKzFdLGc9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpdHJ5e2coKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWM9QWo7QWo9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrPTIpe2U9Y1tkXTtmPWNbZCsxXTt0cnl7dmFyIGg9ZS5jcmVhdGU7ZS5kZXN0cm95PWgoKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWZvcihoPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09aDspYT1oLm5leHRFZmZlY3QsaC5uZXh0RWZmZWN0PW51bGwsaC5mbGFncyY4JiYoaC5zaWJsaW5nPVxubnVsbCxoLnN0YXRlTm9kZT1udWxsKSxoPWE7WD1iO2lnKCk7cmV0dXJuITB9ZnVuY3Rpb24gZ2soYSxiLGMpe2I9TWkoYyxiKTtiPVBpKGEsYiwxKTtBZyhhLGIpO2I9SGcoKTthPUtqKGEsMSk7bnVsbCE9PWEmJigkYyhhLDEsYiksTWooYSxiKSl9XG5mdW5jdGlvbiBXaShhLGIpe2lmKDM9PT1hLnRhZylnayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2drKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl7YT1NaShiLGEpO3ZhciBlPVNpKGMsYSwxKTtBZyhjLGUpO2U9SGcoKTtjPUtqKGMsMSk7aWYobnVsbCE9PWMpJGMoYywxLGUpLE1qKGMsZSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpdHJ5e2QuY29tcG9uZW50RGlkQ2F0Y2goYixhKX1jYXRjaChmKXt9YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gWWooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUhnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1U9PT1hJiYoVyZjKT09PWMmJig0PT09Vnx8Mz09PVYmJihXJjYyOTE0NTYwKT09PVcmJjUwMD5PKCktamo/UWooYSwwKTp1anw9Yyk7TWooYSxiKX1mdW5jdGlvbiBsaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPWEubW9kZSwwPT09KGImMik/Yj0xOjA9PT0oYiY0KT9iPTk5PT09ZWcoKT8xOjI6KDA9PT1HaiYmKEdqPXRqKSxiPVljKDYyOTE0NTYwJn5HaiksMD09PWImJihiPTQxOTQzMDQpKSk7Yz1IZygpO2E9S2ooYSxiKTtudWxsIT09YSYmKCRjKGEsYixjKSxNaihhLGMpKX12YXIgY2s7XG5jaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5sYW5lcztpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8Ti5jdXJyZW50KXVnPSEwO2Vsc2UgaWYoMCE9PShjJmQpKXVnPTAhPT0oYS5mbGFncyYxNjM4NCk/ITA6ITE7ZWxzZXt1Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpyaShiKTtzaCgpO2JyZWFrO2Nhc2UgNTpnaChiKTticmVhaztjYXNlIDE6RmYoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0OmVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTt2YXIgZT1iLnR5cGUuX2NvbnRleHQ7SShtZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHRpKGEsYixjKTtJKFAsUC5jdXJyZW50JjEpO2I9aGkoYSxiLGMpO3JldHVybiBudWxsIT09XG5iP2Iuc2libGluZzpudWxsfUkoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZiLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyY2NCkpe2lmKGQpcmV0dXJuIEFpKGEsYixjKTtiLmZsYWdzfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0koUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIGIubGFuZXM9MCxtaShhLGIsYyl9cmV0dXJuIGhpKGEsYixjKX1lbHNlIHVnPSExO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixNLmN1cnJlbnQpO3RnKGIsYyk7ZT1DaChudWxsLGIsZCxhLGUsYyk7Yi5mbGFnc3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoRmYoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3hnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZHZyhiLGQsZyxhKTtlLnVwZGF0ZXI9S2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFscz1iO09nKGIsZCxhLGMpO2I9cWkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsZmkobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO1xuYT1iLnBlbmRpbmdQcm9wcztmPWUuX2luaXQ7ZT1mKGUuX3BheWxvYWQpO2IudHlwZT1lO2Y9Yi50YWc9aGsoZSk7YT1sZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1saShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9cGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1naShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWlpKG51bGwsYixlLGxnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxsaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxwaShhLGIsZCxlLGMpO2Nhc2UgMzpyaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHkoMjgyKSk7XG5kPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWcoYSxiKTtDZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKXNoKCksYj1oaShhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGY9ZS5oeWRyYXRlKWtoPXJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksamg9YixmPWxoPSEwO2lmKGYpe2E9ZS5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhO2lmKG51bGwhPWEpZm9yKGU9MDtlPGEubGVuZ3RoO2UrPTIpZj1hW2VdLGYuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9YVtlKzFdLHRoLnB1c2goZik7Yz1aZyhiLG51bGwsZCxjKTtmb3IoYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3wxMDI0LGM9Yy5zaWJsaW5nfWVsc2UgZmkoYSxiLGQsYyksc2goKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBnaChiKSxudWxsPT09YSYmXG5waChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG5mKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZuZihkLGYpJiYoYi5mbGFnc3w9MTYpLG9pKGEsYiksZmkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZwaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHRpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVlnKGIsbnVsbCxkLGMpOmZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxnaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0kobWcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj1IZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTi5jdXJyZW50KXtiPWhpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPVxuay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXpnKC0xLGMmLWMpLGwudGFnPTIsQWcoaCxsKSk7aC5sYW5lc3w9YztsPWguYWx0ZXJuYXRlO251bGwhPT1sJiYobC5sYW5lc3w9Yyk7c2coaC5yZXR1cm4sYyk7ay5sYW5lc3w9YzticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfWZpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHRnKGIsYyksZT12ZyhlLFxuZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmZsYWdzfD0xLGZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1sZyhlLGIucGVuZGluZ1Byb3BzKSxmPWxnKGUudHlwZSxmKSxpaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4ga2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxGZihkKT8oYT0hMCxKZihiKSk6YT0hMSx0ZyhiLGMpLE1nKGIsZCxlKSxPZyhiLGQsZSxjKSxxaShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEFpKGEsYixjKTtjYXNlIDIzOnJldHVybiBtaShhLGIsYyk7Y2FzZSAyNDpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7XG59O2Z1bmN0aW9uIGlrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5mbGFncz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBuaChhLGIsYyxkKXtyZXR1cm4gbmV3IGlrKGEsYixjLGQpfWZ1bmN0aW9uIGppKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBoayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gamkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUFhKXJldHVybiAxMTtpZihhPT09RGEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1uaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBWZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpamkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuIFhnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgSGE6Zz04O2V8PTE2O2JyZWFrO2Nhc2Ugd2E6Zz04O2V8PTE7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1uaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXhhLGEudHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIEJhOnJldHVybiBhPW5oKDEzLGMsYixlKSxhLnR5cGU9QmEsYS5lbGVtZW50VHlwZT1CYSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPW5oKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHZpKGMsZSxmLGIpO2Nhc2UgSmE6cmV0dXJuIGE9bmgoMjQsYyxiLGUpLGEuZWxlbWVudFR5cGU9SmEsYS5sYW5lcz1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09XG50eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgemE6Zz05O2JyZWFrIGE7Y2FzZSBBYTpnPTExO2JyZWFrIGE7Y2FzZSBEYTpnPTE0O2JyZWFrIGE7Y2FzZSBFYTpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgRmE6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHkoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9bmgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBYZyhhLGIsYyxkKXthPW5oKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB2aShhLGIsYyxkKXthPW5oKDIzLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBVZyhhLGIsYyl7YT1uaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBXZyhhLGIsYyl7Yj1uaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGprKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPVpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPVpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPVpjKDApO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1udWxsfVxuZnVuY3Rpb24ga2soYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp0YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGxrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUhnKCksZz1JZyhlKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbHM7Yjp7aWYoWmIoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihGZihoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHkoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEZmKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09XG5kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO0pnKGUsZyxmKTtyZXR1cm4gZ31mdW5jdGlvbiBtayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIG5rKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBvayhhLGIpe25rKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZuayhhLGIpfWZ1bmN0aW9uIHBrKCl7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBxayhhLGIsYyl7dmFyIGQ9bnVsbCE9YyYmbnVsbCE9Yy5oeWRyYXRpb25PcHRpb25zJiZjLmh5ZHJhdGlvbk9wdGlvbnMubXV0YWJsZVNvdXJjZXN8fG51bGw7Yz1uZXcgamsoYSxiLG51bGwhPWMmJiEwPT09Yy5oeWRyYXRlKTtiPW5oKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtjLmN1cnJlbnQ9YjtiLnN0YXRlTm9kZT1jO3hnKGIpO2FbZmZdPWMuY3VycmVudDtjZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXtiPWRbYV07dmFyIGU9Yi5fZ2V0VmVyc2lvbjtlPWUoYi5fc291cmNlKTtudWxsPT1jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtiLGVdOmMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGIsZSl9dGhpcy5faW50ZXJuYWxSb290PWN9XG5xay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2xrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O3FrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2xrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltmZl09bnVsbH0pfTtmdW5jdGlvbiByayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBzayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHFrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gdGsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtoLmNhbGwoYSl9fWxrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2soYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7ay5jYWxsKGEpfX1YaihmdW5jdGlvbigpe2xrKGIsZyxhLGUpfSl9cmV0dXJuIG1rKGcpfWVjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw0LGIpO29rKGEsNCl9fTtmYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNjcxMDg4NjQsYik7b2soYSw2NzEwODg2NCl9fTtcbmdjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCksYz1JZyhhKTtKZyhhLGMsYik7b2soYSxjKX19O2hjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIoKX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmFiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcih5KDkwKSk7V2EoZCk7YWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVdqO1xuSGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1YO1h8PTQ7dHJ5e3JldHVybiBnZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtYPWYsMD09PVgmJih3aigpLGlnKCkpfX07SWI9ZnVuY3Rpb24oKXswPT09KFgmNDkpJiYoVmooKSxPaigpKX07SmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO1h8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19O2Z1bmN0aW9uIHVrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIGtrKGEsYixudWxsLGMpfXZhciB2az17RXZlbnRzOltDYix1ZSxEYixFYixGYixPaix7Y3VycmVudDohMX1dfSx3az17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNy4wLjFcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHhrPXtidW5kbGVUeXBlOndrLmJ1bmRsZVR5cGUsdmVyc2lvbjp3ay52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6d2sucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp3ay5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpyYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9Y2MoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndrLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbnBrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgeWs9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF5ay5pc0Rpc2FibGVkJiZ5ay5zdXBwb3J0c0ZpYmVyKXRyeXtMZj15ay5pbmplY3QoeGspLE1mPXlrfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD12aztleHBvcnRzLmNyZWF0ZVBvcnRhbD11aztcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IoeSgxODgpKTt0aHJvdyBFcnJvcih5KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWNjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO2lmKDAhPT0oYyY0OCkpcmV0dXJuIGEoYik7WHw9MTt0cnl7aWYoYSlyZXR1cm4gZ2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7WD1jLGlnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXJrKGEpKXRocm93IEVycm9yKHkoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYaihmdW5jdGlvbigpe3RrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtmZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVdqO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHVrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcmsoYykpdGhyb3cgRXJyb3IoeSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcih5KDM4KSk7cmV0dXJuIHRrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj02MDEwMyxwPTYwMTA2O2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7ZXhwb3J0cy5TdHJpY3RNb2RlPTYwMTA4O2V4cG9ydHMuUHJvZmlsZXI9NjAxMTQ7dmFyIHE9NjAxMDkscj02MDExMCx0PTYwMTEyO2V4cG9ydHMuU3VzcGVuc2U9NjAxMTM7dmFyIHU9NjAxMTUsdj02MDExNjtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB3PVN5bWJvbC5mb3I7bj13KFwicmVhY3QuZWxlbWVudFwiKTtwPXcoXCJyZWFjdC5wb3J0YWxcIik7ZXhwb3J0cy5GcmFnbWVudD13KFwicmVhY3QuZnJhZ21lbnRcIik7ZXhwb3J0cy5TdHJpY3RNb2RlPXcoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtleHBvcnRzLlByb2ZpbGVyPXcoXCJyZWFjdC5wcm9maWxlclwiKTtxPXcoXCJyZWFjdC5wcm92aWRlclwiKTtyPXcoXCJyZWFjdC5jb250ZXh0XCIpO3Q9dyhcInJlYWN0LmZvcndhcmRfcmVmXCIpO2V4cG9ydHMuU3VzcGVuc2U9dyhcInJlYWN0LnN1c3BlbnNlXCIpO3U9dyhcInJlYWN0Lm1lbW9cIik7dj13KFwicmVhY3QubGF6eVwiKX12YXIgeD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiB5KGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24geihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBBPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxCPXt9O2Z1bmN0aW9uIEMoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX1DLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0MucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcih6KDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtDLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEQoKXt9RC5wcm90b3R5cGU9Qy5wcm90b3R5cGU7ZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfXZhciBGPUUucHJvdG90eXBlPW5ldyBEO0YuY29uc3RydWN0b3I9RTtsKEYsQy5wcm90b3R5cGUpO0YuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGMpe3ZhciBlLGQ9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsZSkmJiFJLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWRbZV0mJihkW2VdPWdbZV0pO3JldHVybnskJHR5cGVvZjpuLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fVxuZnVuY3Rpb24gSyhhLGIpe3JldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTChhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bn1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZztmdW5jdGlvbiBOKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gTyhhLGIsYyxlLGQpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBuOmNhc2UgcDpoPSEwfX1pZihoKXJldHVybiBoPWEsZD1kKGgpLGE9XCJcIj09PWU/XCIuXCIrTihoLDApOmUsQXJyYXkuaXNBcnJheShkKT8oYz1cIlwiLG51bGwhPWEmJihjPWEucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSxPKGQsYixjLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9ZCYmKEwoZCkmJihkPUsoZCxjKyghZC5rZXl8fGgmJmgua2V5PT09ZC5rZXk/XCJcIjooXCJcIitkLmtleSkucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGQpKSwxO2g9MDtlPVwiXCI9PT1lP1wiLlwiOmUrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGc9XG4wO2c8YS5sZW5ndGg7ZysrKXtrPWFbZ107dmFyIGY9ZStOKGssZyk7aCs9TyhrLGIsYyxmLGQpfWVsc2UgaWYoZj15KGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1lK04oayxnKyspLGgrPU8oayxiLGMsZixkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9XCJcIithLEVycm9yKHooMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO3JldHVybiBofWZ1bmN0aW9uIFAoYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W10sZD0wO08oYSxlLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGMsYSxkKyspfSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBRKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7YS5fc3RhdHVzPTA7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQ7dGhyb3cgYS5fcmVzdWx0O312YXIgUj17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBTKCl7dmFyIGE9Ui5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKHooMzIxKSk7cmV0dXJuIGF9dmFyIFQ9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6UixSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7dHJhbnNpdGlvbjowfSxSZWFjdEN1cnJlbnRPd25lcjpHLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6UCxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtQKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UChhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTChhKSl0aHJvdyBFcnJvcih6KDE0MykpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9QztleHBvcnRzLlB1cmVDb21wb25lbnQ9RTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVQ7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoeigyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilILmNhbGwoYixmKSYmIUkuaGFzT3duUHJvcGVydHkoZikmJihlW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO2Zvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6ayxwcm9wczplLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6cixfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnEsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PUo7ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnQscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PUw7XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYsX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpRfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnUsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IG1vZHVsZVsnZGVmYXVsdCddIDpcblx0XHQoKSA9PiBtb2R1bGU7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18uaG1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG1vZHVsZSk7XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgJ2V4cG9ydHMnLCB7XG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRzZXQ6ICgpID0+IHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignRVMgTW9kdWxlcyBtYXkgbm90IGFzc2lnbiBtb2R1bGUuZXhwb3J0cyBvciBleHBvcnRzLiosIFVzZSBFU00gZXhwb3J0IHN5bnRheCwgaW5zdGVhZDogJyArIG1vZHVsZS5pZCk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBSZWFjdFJlZHV4Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSZWFjdFJlZHV4Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdSZWFjdFJlZHV4Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVhY3RSZWR1eENvbnRleHQ7IiwiLy8gRGVmYXVsdCB0byBhIGR1bW15IFwiYmF0Y2hcIiBpbXBsZW1lbnRhdGlvbiB0aGF0IGp1c3QgcnVucyB0aGUgY2FsbGJhY2tcbmZ1bmN0aW9uIGRlZmF1bHROb29wQmF0Y2goY2FsbGJhY2spIHtcbiAgY2FsbGJhY2soKTtcbn1cblxudmFyIGJhdGNoID0gZGVmYXVsdE5vb3BCYXRjaDsgLy8gQWxsb3cgaW5qZWN0aW5nIGFub3RoZXIgYmF0Y2hpbmcgZnVuY3Rpb24gbGF0ZXJcblxuZXhwb3J0IHZhciBzZXRCYXRjaCA9IGZ1bmN0aW9uIHNldEJhdGNoKG5ld0JhdGNoKSB7XG4gIHJldHVybiBiYXRjaCA9IG5ld0JhdGNoO1xufTsgLy8gU3VwcGx5IGEgZ2V0dGVyIGp1c3QgdG8gc2tpcCBkZWFsaW5nIHdpdGggRVNNIGJpbmRpbmdzXG5cbmV4cG9ydCB2YXIgZ2V0QmF0Y2ggPSBmdW5jdGlvbiBnZXRCYXRjaCgpIHtcbiAgcmV0dXJuIGJhdGNoO1xufTsiLCJpbXBvcnQgeyBnZXRCYXRjaCB9IGZyb20gJy4vYmF0Y2gnOyAvLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICB2YXIgYmF0Y2ggPSBnZXRCYXRjaCgpO1xuICB2YXIgZmlyc3QgPSBudWxsO1xuICB2YXIgbGFzdCA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgZmlyc3QgPSBudWxsO1xuICAgICAgbGFzdCA9IG51bGw7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIGJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gW107XG4gICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdGVuZXJzO1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGFzdCA9IHtcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICBuZXh0OiBudWxsLFxuICAgICAgICBwcmV2OiBsYXN0XG4gICAgICB9O1xuXG4gICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpcnN0ID0gbGlzdGVuZXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgZmlyc3QgPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLm5leHQpIHtcbiAgICAgICAgICBsaXN0ZW5lci5uZXh0LnByZXYgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3QgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpcnN0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBTdWJzY3JpcHRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yikge1xuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnBhcmVudFN1YiA9IHBhcmVudFN1YjtcbiAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyID0gdGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3Vic2NyaXB0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkTmVzdGVkU3ViID0gZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VXcmFwcGVyKCkge1xuICAgIGlmICh0aGlzLm9uU3RhdGVDaGFuZ2UpIHtcbiAgICAgIHRoaXMub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMudW5zdWJzY3JpYmUpO1xuICB9O1xuXG4gIF9wcm90by50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlcik7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8udHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9OyIsImltcG9ydCBSZWFjdCwgeyB1c2VNZW1vLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuXG5mdW5jdGlvbiBQcm92aWRlcihfcmVmKSB7XG4gIHZhciBzdG9yZSA9IF9yZWYuc3RvcmUsXG4gICAgICBjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgY29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgfTtcbiAgfSwgW3N0b3JlXSk7XG4gIHZhciBwcmV2aW91c1N0YXRlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCk7XG4gIH0sIFtzdG9yZV0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcblxuICAgIGlmIChwcmV2aW91c1N0YXRlICE9PSBzdG9yZS5nZXRTdGF0ZSgpKSB7XG4gICAgICBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicygpO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcbiAgICB9O1xuICB9LCBbY29udGV4dFZhbHVlLCBwcmV2aW91c1N0YXRlXSk7XG4gIHZhciBDb250ZXh0ID0gY29udGV4dCB8fCBSZWFjdFJlZHV4Q29udGV4dDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAgIHN0b3JlOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBnZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLFxuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnlcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvdmlkZXI7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JzsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IHRvIGVuc3VyZSB0aGUgc3RvcmVcbi8vIHN1YnNjcmlwdGlvbiBjYWxsYmFjayBhbHdheXMgaGFzIHRoZSBzZWxlY3RvciBmcm9tIHRoZSBsYXRlc3QgcmVuZGVyIGNvbW1pdFxuLy8gYXZhaWxhYmxlLCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IGhhcHBlbiBiZXR3ZWVuIHJlbmRlciBhbmQgdGhlIGVmZmVjdCxcbi8vIHdoaWNoIG1heSBjYXVzZSBtaXNzZWQgdXBkYXRlczsgd2UgYWxzbyBtdXN0IGVuc3VyZSB0aGUgc3RvcmUgc3Vic2NyaXB0aW9uXG4vLyBpcyBjcmVhdGVkIHN5bmNocm9ub3VzbHksIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgb2NjdXIgYmVmb3JlIHRoZVxuLy8gc3Vic2NyaXB0aW9uIGlzIGNyZWF0ZWQgYW5kIGFuIGluY29uc2lzdGVudCBzdGF0ZSBtYXkgYmUgb2JzZXJ2ZWRcblxuZXhwb3J0IHZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlUmVmLCB1c2VSZWR1Y2VyIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlLCBpc0NvbnRleHRDb25zdW1lciB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JzsgLy8gRGVmaW5lIHNvbWUgY29uc3RhbnQgYXJyYXlzIGp1c3QgdG8gYXZvaWQgcmUtY3JlYXRpbmcgdGhlc2VcblxudmFyIEVNUFRZX0FSUkFZID0gW107XG52YXIgTk9fU1VCU0NSSVBUSU9OX0FSUkFZID0gW251bGwsIG51bGxdO1xuXG52YXIgc3RyaW5naWZ5Q29tcG9uZW50ID0gZnVuY3Rpb24gc3RyaW5naWZ5Q29tcG9uZW50KENvbXApIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoQ29tcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBTdHJpbmcoQ29tcCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHZhciB1cGRhdGVDb3VudCA9IHN0YXRlWzFdO1xuICByZXR1cm4gW2FjdGlvbi5wYXlsb2FkLCB1cGRhdGVDb3VudCArIDFdO1xufVxuXG5mdW5jdGlvbiB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MoZWZmZWN0RnVuYywgZWZmZWN0QXJncywgZGVwZW5kZW5jaWVzKSB7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBlZmZlY3RGdW5jLmFwcGx5KHZvaWQgMCwgZWZmZWN0QXJncyk7XG4gIH0sIGRlcGVuZGVuY2llcyk7XG59XG5cbmZ1bmN0aW9uIGNhcHR1cmVXcmFwcGVyUHJvcHMobGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIGFjdHVhbENoaWxkUHJvcHMsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMpIHtcbiAgLy8gV2Ugd2FudCB0byBjYXB0dXJlIHRoZSB3cmFwcGVyIHByb3BzIGFuZCBjaGlsZCBwcm9wcyB3ZSB1c2VkIGZvciBsYXRlciBjb21wYXJpc29uc1xuICBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQgPSB3cmFwcGVyUHJvcHM7XG4gIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBhY3R1YWxDaGlsZFByb3BzO1xuICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gZmFsc2U7IC8vIElmIHRoZSByZW5kZXIgd2FzIGZyb20gYSBzdG9yZSB1cGRhdGUsIGNsZWFyIG91dCB0aGF0IHJlZmVyZW5jZSBhbmQgY2FzY2FkZSB0aGUgc3Vic2NyaWJlciB1cGRhdGVcblxuICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50KSB7XG4gICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbnVsbDtcbiAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3Vic2NyaWJlVXBkYXRlcyhzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzLCBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoKSB7XG4gIC8vIElmIHdlJ3JlIG5vdCBzdWJzY3JpYmVkIHRvIHRoZSBzdG9yZSwgbm90aGluZyB0byBkbyBoZXJlXG4gIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47IC8vIENhcHR1cmUgdmFsdWVzIGZvciBjaGVja2luZyBpZiBhbmQgd2hlbiB0aGlzIGNvbXBvbmVudCB1bm1vdW50c1xuXG4gIHZhciBkaWRVbnN1YnNjcmliZSA9IGZhbHNlO1xuICB2YXIgbGFzdFRocm93bkVycm9yID0gbnVsbDsgLy8gV2UnbGwgcnVuIHRoaXMgY2FsbGJhY2sgZXZlcnkgdGltZSBhIHN0b3JlIHN1YnNjcmlwdGlvbiB1cGRhdGUgcHJvcGFnYXRlcyB0byB0aGlzIGNvbXBvbmVudFxuXG4gIHZhciBjaGVja0ZvclVwZGF0ZXMgPSBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgaWYgKGRpZFVuc3Vic2NyaWJlKSB7XG4gICAgICAvLyBEb24ndCBydW4gc3RhbGUgbGlzdGVuZXJzLlxuICAgICAgLy8gUmVkdXggZG9lc24ndCBndWFyYW50ZWUgdW5zdWJzY3JpcHRpb25zIGhhcHBlbiB1bnRpbCBuZXh0IGRpc3BhdGNoLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBsYXRlc3RTdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB2YXIgbmV3Q2hpbGRQcm9wcywgZXJyb3I7XG5cbiAgICB0cnkge1xuICAgICAgLy8gQWN0dWFsbHkgcnVuIHRoZSBzZWxlY3RvciB3aXRoIHRoZSBtb3N0IHJlY2VudCBzdG9yZSBzdGF0ZSBhbmQgd3JhcHBlciBwcm9wc1xuICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZVxuICAgICAgbmV3Q2hpbGRQcm9wcyA9IGNoaWxkUHJvcHNTZWxlY3RvcihsYXRlc3RTdG9yZVN0YXRlLCBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVycm9yID0gZTtcbiAgICAgIGxhc3RUaHJvd25FcnJvciA9IGU7XG4gICAgfVxuXG4gICAgaWYgKCFlcnJvcikge1xuICAgICAgbGFzdFRocm93bkVycm9yID0gbnVsbDtcbiAgICB9IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBoYXZlbid0IGNoYW5nZWQsIG5vdGhpbmcgdG8gZG8gaGVyZSAtIGNhc2NhZGUgdGhlIHN1YnNjcmlwdGlvbiB1cGRhdGVcblxuXG4gICAgaWYgKG5ld0NoaWxkUHJvcHMgPT09IGxhc3RDaGlsZFByb3BzLmN1cnJlbnQpIHtcbiAgICAgIGlmICghcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCkge1xuICAgICAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNhdmUgcmVmZXJlbmNlcyB0byB0aGUgbmV3IGNoaWxkIHByb3BzLiAgTm90ZSB0aGF0IHdlIHRyYWNrIHRoZSBcImNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlXCJcbiAgICAgIC8vIGFzIGEgcmVmIGluc3RlYWQgb2YgYSB1c2VTdGF0ZS91c2VSZWR1Y2VyIGJlY2F1c2Ugd2UgbmVlZCBhIHdheSB0byBkZXRlcm1pbmUgaWYgdGhhdCB2YWx1ZSBoYXNcbiAgICAgIC8vIGJlZW4gcHJvY2Vzc2VkLiAgSWYgdGhpcyB3ZW50IGludG8gdXNlU3RhdGUvdXNlUmVkdWNlciwgd2UgY291bGRuJ3QgY2xlYXIgb3V0IHRoZSB2YWx1ZSB3aXRob3V0XG4gICAgICAvLyBmb3JjaW5nIGFub3RoZXIgcmUtcmVuZGVyLCB3aGljaCB3ZSBkb24ndCB3YW50LlxuICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IHRydWU7IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBfZGlkXyBjaGFuZ2UgKG9yIHdlIGNhdWdodCBhbiBlcnJvciksIHRoaXMgd3JhcHBlciBjb21wb25lbnQgbmVlZHMgdG8gcmUtcmVuZGVyXG5cbiAgICAgIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnU1RPUkVfVVBEQVRFRCcsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9OyAvLyBBY3R1YWxseSBzdWJzY3JpYmUgdG8gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yIChvciBzdG9yZSlcblxuXG4gIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7IC8vIFB1bGwgZGF0YSBmcm9tIHRoZSBzdG9yZSBhZnRlciBmaXJzdCByZW5kZXIgaW4gY2FzZSB0aGUgc3RvcmUgaGFzXG4gIC8vIGNoYW5nZWQgc2luY2Ugd2UgYmVnYW4uXG5cbiAgY2hlY2tGb3JVcGRhdGVzKCk7XG5cbiAgdmFyIHVuc3Vic2NyaWJlV3JhcHBlciA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlV3JhcHBlcigpIHtcbiAgICBkaWRVbnN1YnNjcmliZSA9IHRydWU7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuXG4gICAgaWYgKGxhc3RUaHJvd25FcnJvcikge1xuICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdlIGNhdWdodCBhbiBlcnJvciBkdWUgdG8gYSBiYWQgbWFwU3RhdGUgZnVuY3Rpb24sIGJ1dCB0aGVcbiAgICAgIC8vIHBhcmVudCByZS1yZW5kZXJlZCB3aXRob3V0IHRoaXMgY29tcG9uZW50IGFuZCB3ZSdyZSBhYm91dCB0byB1bm1vdW50LlxuICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuIGFzIGxvbmcgYXMgd2UgZG8gdG9wLWRvd24gc3Vic2NyaXB0aW9ucyBjb3JyZWN0bHksIGJ1dFxuICAgICAgLy8gaWYgd2UgZXZlciBkbyB0aG9zZSB3cm9uZywgdGhpcyB0aHJvdyB3aWxsIHN1cmZhY2UgdGhlIGVycm9yIGluIG91ciB0ZXN0cy5cbiAgICAgIC8vIEluIHRoYXQgY2FzZSwgdGhyb3cgdGhlIGVycm9yIGZyb20gaGVyZSBzbyBpdCBkb2Vzbid0IGdldCBsb3N0LlxuICAgICAgdGhyb3cgbGFzdFRocm93bkVycm9yO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdW5zdWJzY3JpYmVXcmFwcGVyO1xufVxuXG52YXIgaW5pdFN0YXRlVXBkYXRlcyA9IGZ1bmN0aW9uIGluaXRTdGF0ZVVwZGF0ZXMoKSB7XG4gIHJldHVybiBbbnVsbCwgMF07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25uZWN0QWR2YW5jZWQoXG4vKlxuICBzZWxlY3RvckZhY3RvcnkgaXMgYSBmdW5jIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHJldHVybmluZyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gdXNlZCB0b1xuICBjb21wdXRlIG5ldyBwcm9wcyBmcm9tIHN0YXRlLCBwcm9wcywgYW5kIGRpc3BhdGNoLiBGb3IgZXhhbXBsZTpcbiAgICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdEFkdmFuY2VkKChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKHN0YXRlLCBwcm9wcykgPT4gKHtcbiAgICAgIHRoaW5nOiBzdGF0ZS50aGluZ3NbcHJvcHMudGhpbmdJZF0sXG4gICAgICBzYXZlVGhpbmc6IGZpZWxkcyA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9ycy5zYXZlVGhpbmcocHJvcHMudGhpbmdJZCwgZmllbGRzKSksXG4gICAgfSkpKFlvdXJDb21wb25lbnQpXG4gICBBY2Nlc3MgdG8gZGlzcGF0Y2ggaXMgcHJvdmlkZWQgdG8gdGhlIGZhY3Rvcnkgc28gc2VsZWN0b3JGYWN0b3JpZXMgY2FuIGJpbmQgYWN0aW9uQ3JlYXRvcnNcbiAgb3V0c2lkZSBvZiB0aGVpciBzZWxlY3RvciBhcyBhbiBvcHRpbWl6YXRpb24uIE9wdGlvbnMgcGFzc2VkIHRvIGNvbm5lY3RBZHZhbmNlZCBhcmUgcGFzc2VkIHRvXG4gIHRoZSBzZWxlY3RvckZhY3RvcnksIGFsb25nIHdpdGggZGlzcGxheU5hbWUgYW5kIFdyYXBwZWRDb21wb25lbnQsIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXG4gICBOb3RlIHRoYXQgc2VsZWN0b3JGYWN0b3J5IGlzIHJlc3BvbnNpYmxlIGZvciBhbGwgY2FjaGluZy9tZW1vaXphdGlvbiBvZiBpbmJvdW5kIGFuZCBvdXRib3VuZFxuICBwcm9wcy4gRG8gbm90IHVzZSBjb25uZWN0QWR2YW5jZWQgZGlyZWN0bHkgd2l0aG91dCBtZW1vaXppbmcgcmVzdWx0cyBiZXR3ZWVuIGNhbGxzIHRvIHlvdXJcbiAgc2VsZWN0b3IsIG90aGVyd2lzZSB0aGUgQ29ubmVjdCBjb21wb25lbnQgd2lsbCByZS1yZW5kZXIgb24gZXZlcnkgc3RhdGUgb3IgcHJvcHMgY2hhbmdlLlxuKi9cbnNlbGVjdG9yRmFjdG9yeSwgLy8gb3B0aW9ucyBvYmplY3Q6XG5fcmVmKSB7XG4gIGlmIChfcmVmID09PSB2b2lkIDApIHtcbiAgICBfcmVmID0ge307XG4gIH1cblxuICB2YXIgX3JlZjIgPSBfcmVmLFxuICAgICAgX3JlZjIkZ2V0RGlzcGxheU5hbWUgPSBfcmVmMi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZjIkZ2V0RGlzcGxheU5hbWUgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFwiQ29ubmVjdEFkdmFuY2VkKFwiICsgbmFtZSArIFwiKVwiO1xuICB9IDogX3JlZjIkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmMiRtZXRob2ROYW1lID0gX3JlZjIubWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZE5hbWUgPSBfcmVmMiRtZXRob2ROYW1lID09PSB2b2lkIDAgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYyJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmMiRyZW5kZXJDb3VudFByb3AgPSBfcmVmMi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmMiRyZW5kZXJDb3VudFByb3AgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYyJHJlbmRlckNvdW50UHJvcCxcbiAgICAgIF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9IF9yZWYyLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJHNob3VsZEhhbmRsZVN0YSxcbiAgICAgIF9yZWYyJHN0b3JlS2V5ID0gX3JlZjIuc3RvcmVLZXksXG4gICAgICBzdG9yZUtleSA9IF9yZWYyJHN0b3JlS2V5ID09PSB2b2lkIDAgPyAnc3RvcmUnIDogX3JlZjIkc3RvcmVLZXksXG4gICAgICBfcmVmMiR3aXRoUmVmID0gX3JlZjIud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmMiR3aXRoUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJHdpdGhSZWYsXG4gICAgICBfcmVmMiRmb3J3YXJkUmVmID0gX3JlZjIuZm9yd2FyZFJlZixcbiAgICAgIGZvcndhcmRSZWYgPSBfcmVmMiRmb3J3YXJkUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGZvcndhcmRSZWYsXG4gICAgICBfcmVmMiRjb250ZXh0ID0gX3JlZjIuY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBfcmVmMiRjb250ZXh0ID09PSB2b2lkIDAgPyBSZWFjdFJlZHV4Q29udGV4dCA6IF9yZWYyJGNvbnRleHQsXG4gICAgICBjb25uZWN0T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIiwgXCJmb3J3YXJkUmVmXCIsIFwiY29udGV4dFwiXSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAocmVuZGVyQ291bnRQcm9wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJlbmRlckNvdW50UHJvcCBpcyByZW1vdmVkLiByZW5kZXIgY291bnRpbmcgaXMgYnVpbHQgaW50byB0aGUgbGF0ZXN0IFJlYWN0IERldiBUb29scyBwcm9maWxpbmcgZXh0ZW5zaW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh3aXRoUmVmKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dpdGhSZWYgaXMgcmVtb3ZlZC4gVG8gYWNjZXNzIHRoZSB3cmFwcGVkIGluc3RhbmNlLCB1c2UgYSByZWYgb24gdGhlIGNvbm5lY3RlZCBjb21wb25lbnQnKTtcbiAgICB9XG5cbiAgICB2YXIgY3VzdG9tU3RvcmVXYXJuaW5nTWVzc2FnZSA9ICdUbyB1c2UgYSBjdXN0b20gUmVkdXggc3RvcmUgZm9yIHNwZWNpZmljIGNvbXBvbmVudHMsIGNyZWF0ZSBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHdpdGggJyArIFwiUmVhY3QuY3JlYXRlQ29udGV4dCgpLCBhbmQgcGFzcyB0aGUgY29udGV4dCBvYmplY3QgdG8gUmVhY3QgUmVkdXgncyBQcm92aWRlciBhbmQgc3BlY2lmaWMgY29tcG9uZW50c1wiICsgJyBsaWtlOiA8UHJvdmlkZXIgY29udGV4dD17TXlDb250ZXh0fT48Q29ubmVjdGVkQ29tcG9uZW50IGNvbnRleHQ9e015Q29udGV4dH0gLz48L1Byb3ZpZGVyPi4gJyArICdZb3UgbWF5IGFsc28gcGFzcyBhIHtjb250ZXh0IDogTXlDb250ZXh0fSBvcHRpb24gdG8gY29ubmVjdCc7XG5cbiAgICBpZiAoc3RvcmVLZXkgIT09ICdzdG9yZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc3RvcmVLZXkgaGFzIGJlZW4gcmVtb3ZlZCBhbmQgZG9lcyBub3QgZG8gYW55dGhpbmcuICcgKyBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgQ29udGV4dCA9IGNvbnRleHQ7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc1ZhbGlkRWxlbWVudFR5cGUoV3JhcHBlZENvbXBvbmVudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IFwiICsgKG1ldGhvZE5hbWUgKyBcIi4gSW5zdGVhZCByZWNlaXZlZCBcIiArIHN0cmluZ2lmeUNvbXBvbmVudChXcmFwcGVkQ29tcG9uZW50KSkpO1xuICAgIH1cblxuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKHdyYXBwZWRDb21wb25lbnROYW1lKTtcblxuICAgIHZhciBzZWxlY3RvckZhY3RvcnlPcHRpb25zID0gX2V4dGVuZHMoe30sIGNvbm5lY3RPcHRpb25zLCB7XG4gICAgICBnZXREaXNwbGF5TmFtZTogZ2V0RGlzcGxheU5hbWUsXG4gICAgICBtZXRob2ROYW1lOiBtZXRob2ROYW1lLFxuICAgICAgcmVuZGVyQ291bnRQcm9wOiByZW5kZXJDb3VudFByb3AsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHN0b3JlS2V5OiBzdG9yZUtleSxcbiAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgIHdyYXBwZWRDb21wb25lbnROYW1lOiB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQ6IFdyYXBwZWRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHZhciBwdXJlID0gY29ubmVjdE9wdGlvbnMucHVyZTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpIHtcbiAgICAgIHJldHVybiBzZWxlY3RvckZhY3Rvcnkoc3RvcmUuZGlzcGF0Y2gsIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMpO1xuICAgIH0gLy8gSWYgd2UgYXJlbid0IHJ1bm5pbmcgaW4gXCJwdXJlXCIgbW9kZSwgd2UgZG9uJ3Qgd2FudCB0byBtZW1vaXplIHZhbHVlcy5cbiAgICAvLyBUbyBhdm9pZCBjb25kaXRpb25hbGx5IGNhbGxpbmcgaG9va3MsIHdlIGZhbGwgYmFjayB0byBhIHRpbnkgd3JhcHBlclxuICAgIC8vIHRoYXQganVzdCBleGVjdXRlcyB0aGUgZ2l2ZW4gY2FsbGJhY2sgaW1tZWRpYXRlbHkuXG5cblxuICAgIHZhciB1c2VQdXJlT25seU1lbW8gPSBwdXJlID8gdXNlTWVtbyA6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIENvbm5lY3RGdW5jdGlvbihwcm9wcykge1xuICAgICAgdmFyIF91c2VNZW1vID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIERpc3Rpbmd1aXNoIGJldHdlZW4gYWN0dWFsIFwiZGF0YVwiIHByb3BzIHRoYXQgd2VyZSBwYXNzZWQgdG8gdGhlIHdyYXBwZXIgY29tcG9uZW50LFxuICAgICAgICAvLyBhbmQgdmFsdWVzIG5lZWRlZCB0byBjb250cm9sIGJlaGF2aW9yIChmb3J3YXJkZWQgcmVmcywgYWx0ZXJuYXRlIGNvbnRleHQgaW5zdGFuY2VzKS5cbiAgICAgICAgLy8gVG8gbWFpbnRhaW4gdGhlIHdyYXBwZXJQcm9wcyBvYmplY3QgcmVmZXJlbmNlLCBtZW1vaXplIHRoaXMgZGVzdHJ1Y3R1cmluZy5cbiAgICAgICAgdmFyIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYgPSBwcm9wcy5yZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLFxuICAgICAgICAgICAgd3JhcHBlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcInJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcIl0pO1xuXG4gICAgICAgIHJldHVybiBbcHJvcHMuY29udGV4dCwgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXTtcbiAgICAgIH0sIFtwcm9wc10pLFxuICAgICAgICAgIHByb3BzQ29udGV4dCA9IF91c2VNZW1vWzBdLFxuICAgICAgICAgIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYgPSBfdXNlTWVtb1sxXSxcbiAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfdXNlTWVtb1syXTtcblxuICAgICAgdmFyIENvbnRleHRUb1VzZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBVc2VycyBtYXkgb3B0aW9uYWxseSBwYXNzIGluIGEgY3VzdG9tIGNvbnRleHQgaW5zdGFuY2UgdG8gdXNlIGluc3RlYWQgb2Ygb3VyIFJlYWN0UmVkdXhDb250ZXh0LlxuICAgICAgICAvLyBNZW1vaXplIHRoZSBjaGVjayB0aGF0IGRldGVybWluZXMgd2hpY2ggY29udGV4dCBpbnN0YW5jZSB3ZSBzaG91bGQgdXNlLlxuICAgICAgICByZXR1cm4gcHJvcHNDb250ZXh0ICYmIHByb3BzQ29udGV4dC5Db25zdW1lciAmJiBpc0NvbnRleHRDb25zdW1lciggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQocHJvcHNDb250ZXh0LkNvbnN1bWVyLCBudWxsKSkgPyBwcm9wc0NvbnRleHQgOiBDb250ZXh0O1xuICAgICAgfSwgW3Byb3BzQ29udGV4dCwgQ29udGV4dF0pOyAvLyBSZXRyaWV2ZSB0aGUgc3RvcmUgYW5kIGFuY2VzdG9yIHN1YnNjcmlwdGlvbiB2aWEgY29udGV4dCwgaWYgYXZhaWxhYmxlXG5cbiAgICAgIHZhciBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KENvbnRleHRUb1VzZSk7IC8vIFRoZSBzdG9yZSBfbXVzdF8gZXhpc3QgYXMgZWl0aGVyIGEgcHJvcCBvciBpbiBjb250ZXh0LlxuICAgICAgLy8gV2UnbGwgY2hlY2sgdG8gc2VlIGlmIGl0IF9sb29rc18gbGlrZSBhIFJlZHV4IHN0b3JlIGZpcnN0LlxuICAgICAgLy8gVGhpcyBhbGxvd3MgdXMgdG8gcGFzcyB0aHJvdWdoIGEgYHN0b3JlYCBwcm9wIHRoYXQgaXMganVzdCBhIHBsYWluIHZhbHVlLlxuXG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbVByb3BzID0gQm9vbGVhbihwcm9wcy5zdG9yZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5nZXRTdGF0ZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5kaXNwYXRjaCk7XG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbUNvbnRleHQgPSBCb29sZWFuKGNvbnRleHRWYWx1ZSkgJiYgQm9vbGVhbihjb250ZXh0VmFsdWUuc3RvcmUpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhZGlkU3RvcmVDb21lRnJvbVByb3BzICYmICFkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBcXFwic3RvcmVcXFwiIGluIHRoZSBjb250ZXh0IG9mIFwiICsgKFwiXFxcIlwiICsgZGlzcGxheU5hbWUgKyBcIlxcXCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIFwiKSArIFwib3IgcGFzcyBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHByb3ZpZGVyIHRvIDxQcm92aWRlcj4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIFwiICsgKFwiUmVhY3QgY29udGV4dCBjb25zdW1lciB0byBcIiArIGRpc3BsYXlOYW1lICsgXCIgaW4gY29ubmVjdCBvcHRpb25zLlwiKSk7XG4gICAgICB9IC8vIEJhc2VkIG9uIHRoZSBwcmV2aW91cyBjaGVjaywgb25lIG9mIHRoZXNlIG11c3QgYmUgdHJ1ZVxuXG5cbiAgICAgIHZhciBzdG9yZSA9IGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IHByb3BzLnN0b3JlIDogY29udGV4dFZhbHVlLnN0b3JlO1xuICAgICAgdmFyIGNoaWxkUHJvcHNTZWxlY3RvciA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUaGUgY2hpbGQgcHJvcHMgc2VsZWN0b3IgbmVlZHMgdGhlIHN0b3JlIHJlZmVyZW5jZSBhcyBhbiBpbnB1dC5cbiAgICAgICAgLy8gUmUtY3JlYXRlIHRoaXMgc2VsZWN0b3Igd2hlbmV2ZXIgdGhlIHN0b3JlIGNoYW5nZXMuXG4gICAgICAgIHJldHVybiBjcmVhdGVDaGlsZFNlbGVjdG9yKHN0b3JlKTtcbiAgICAgIH0sIFtzdG9yZV0pO1xuXG4gICAgICB2YXIgX3VzZU1lbW8yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm4gTk9fU1VCU0NSSVBUSU9OX0FSUkFZOyAvLyBUaGlzIFN1YnNjcmlwdGlvbidzIHNvdXJjZSBzaG91bGQgbWF0Y2ggd2hlcmUgc3RvcmUgY2FtZSBmcm9tOiBwcm9wcyB2cy4gY29udGV4dC4gQSBjb21wb25lbnRcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSBzdG9yZSB2aWEgcHJvcHMgc2hvdWxkbid0IHVzZSBzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0LCBvciB2aWNlIHZlcnNhLlxuXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyBudWxsIDogY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbik7IC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIFRoaXMgY2FuXG4gICAgICAgIC8vIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3MgbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGUgIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG5cbiAgICAgICAgdmFyIG5vdGlmeU5lc3RlZFN1YnMgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3Vicy5iaW5kKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHJldHVybiBbc3Vic2NyaXB0aW9uLCBub3RpZnlOZXN0ZWRTdWJzXTtcbiAgICAgIH0sIFtzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWVdKSxcbiAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdXNlTWVtbzJbMF0sXG4gICAgICAgICAgbm90aWZ5TmVzdGVkU3VicyA9IF91c2VNZW1vMlsxXTsgLy8gRGV0ZXJtaW5lIHdoYXQge3N0b3JlLCBzdWJzY3JpcHRpb259IHZhbHVlIHNob3VsZCBiZSBwdXQgaW50byBuZXN0ZWQgY29udGV4dCwgaWYgbmVjZXNzYXJ5LFxuICAgICAgLy8gYW5kIG1lbW9pemUgdGhhdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSBjb250ZXh0IHVwZGF0ZXMuXG5cblxuICAgICAgdmFyIG92ZXJyaWRkZW5Db250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGRpZFN0b3JlQ29tZUZyb21Qcm9wcykge1xuICAgICAgICAgIC8vIFRoaXMgY29tcG9uZW50IGlzIGRpcmVjdGx5IHN1YnNjcmliZWQgdG8gYSBzdG9yZSBmcm9tIHByb3BzLlxuICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgZGVzY2VuZGFudHMgcmVhZGluZyBmcm9tIHRoaXMgc3RvcmUgLSBwYXNzIGRvd24gd2hhdGV2ZXJcbiAgICAgICAgICAvLyB0aGUgZXhpc3RpbmcgY29udGV4dCB2YWx1ZSBpcyBmcm9tIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3Rvci5cbiAgICAgICAgICByZXR1cm4gY29udGV4dFZhbHVlO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgcHV0IHRoaXMgY29tcG9uZW50J3Mgc3Vic2NyaXB0aW9uIGluc3RhbmNlIGludG8gY29udGV4dCwgc28gdGhhdFxuICAgICAgICAvLyBjb25uZWN0ZWQgZGVzY2VuZGFudHMgd29uJ3QgdXBkYXRlIHVudGlsIGFmdGVyIHRoaXMgY29tcG9uZW50IGlzIGRvbmVcblxuXG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dFZhbHVlLCB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICAgICAgfSk7XG4gICAgICB9LCBbZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWUsIHN1YnNjcmlwdGlvbl0pOyAvLyBXZSBuZWVkIHRvIGZvcmNlIHRoaXMgd3JhcHBlciBjb21wb25lbnQgdG8gcmUtcmVuZGVyIHdoZW5ldmVyIGEgUmVkdXggc3RvcmUgdXBkYXRlXG4gICAgICAvLyBjYXVzZXMgYSBjaGFuZ2UgdG8gdGhlIGNhbGN1bGF0ZWQgY2hpbGQgY29tcG9uZW50IHByb3BzIChvciB3ZSBjYXVnaHQgYW4gZXJyb3IgaW4gbWFwU3RhdGUpXG5cbiAgICAgIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoc3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyLCBFTVBUWV9BUlJBWSwgaW5pdFN0YXRlVXBkYXRlcyksXG4gICAgICAgICAgX3VzZVJlZHVjZXIkID0gX3VzZVJlZHVjZXJbMF0sXG4gICAgICAgICAgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCA9IF91c2VSZWR1Y2VyJFswXSxcbiAgICAgICAgICBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoID0gX3VzZVJlZHVjZXJbMV07IC8vIFByb3BhZ2F0ZSBhbnkgbWFwU3RhdGUvbWFwRGlzcGF0Y2ggZXJyb3JzIHVwd2FyZHNcblxuXG4gICAgICBpZiAocHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCAmJiBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yKSB7XG4gICAgICAgIHRocm93IHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQuZXJyb3I7XG4gICAgICB9IC8vIFNldCB1cCByZWZzIHRvIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gdGhlIHN1YnNjcmlwdGlvbiBlZmZlY3QgYW5kIHRoZSByZW5kZXIgbG9naWNcblxuXG4gICAgICB2YXIgbGFzdENoaWxkUHJvcHMgPSB1c2VSZWYoKTtcbiAgICAgIHZhciBsYXN0V3JhcHBlclByb3BzID0gdXNlUmVmKHdyYXBwZXJQcm9wcyk7XG4gICAgICB2YXIgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSA9IHVzZVJlZigpO1xuICAgICAgdmFyIHJlbmRlcklzU2NoZWR1bGVkID0gdXNlUmVmKGZhbHNlKTtcbiAgICAgIHZhciBhY3R1YWxDaGlsZFByb3BzID0gdXNlUHVyZU9ubHlNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVHJpY2t5IGxvZ2ljIGhlcmU6XG4gICAgICAgIC8vIC0gVGhpcyByZW5kZXIgbWF5IGhhdmUgYmVlbiB0cmlnZ2VyZWQgYnkgYSBSZWR1eCBzdG9yZSB1cGRhdGUgdGhhdCBwcm9kdWNlZCBuZXcgY2hpbGQgcHJvcHNcbiAgICAgICAgLy8gLSBIb3dldmVyLCB3ZSBtYXkgaGF2ZSBnb3R0ZW4gbmV3IHdyYXBwZXIgcHJvcHMgYWZ0ZXIgdGhhdFxuICAgICAgICAvLyBJZiB3ZSBoYXZlIG5ldyBjaGlsZCBwcm9wcywgYW5kIHRoZSBzYW1lIHdyYXBwZXIgcHJvcHMsIHdlIGtub3cgd2Ugc2hvdWxkIHVzZSB0aGUgbmV3IGNoaWxkIHByb3BzIGFzLWlzLlxuICAgICAgICAvLyBCdXQsIGlmIHdlIGhhdmUgbmV3IHdyYXBwZXIgcHJvcHMsIHRob3NlIG1pZ2h0IGNoYW5nZSB0aGUgY2hpbGQgcHJvcHMsIHNvIHdlIGhhdmUgdG8gcmVjYWxjdWxhdGUgdGhpbmdzLlxuICAgICAgICAvLyBTbywgd2UnbGwgdXNlIHRoZSBjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZSBvbmx5IGlmIHRoZSB3cmFwcGVyIHByb3BzIGFyZSB0aGUgc2FtZSBhcyBsYXN0IHRpbWUuXG4gICAgICAgIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgJiYgd3JhcHBlclByb3BzID09PSBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50O1xuICAgICAgICB9IC8vIFRPRE8gV2UncmUgcmVhZGluZyB0aGUgc3RvcmUgZGlyZWN0bHkgaW4gcmVuZGVyKCkgaGVyZS4gQmFkIGlkZWE/XG4gICAgICAgIC8vIFRoaXMgd2lsbCBsaWtlbHkgY2F1c2UgQmFkIFRoaW5ncyAoVE0pIHRvIGhhcHBlbiBpbiBDb25jdXJyZW50IE1vZGUuXG4gICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBkbyB0aGlzIGJlY2F1c2Ugb24gcmVuZGVycyBfbm90XyBjYXVzZWQgYnkgc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0aGUgbGF0ZXN0IHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmUuXG5cblxuICAgICAgICByZXR1cm4gY2hpbGRQcm9wc1NlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCksIHdyYXBwZXJQcm9wcyk7XG4gICAgICB9LCBbc3RvcmUsIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQsIHdyYXBwZXJQcm9wc10pOyAvLyBXZSBuZWVkIHRoaXMgdG8gZXhlY3V0ZSBzeW5jaHJvbm91c2x5IGV2ZXJ5IHRpbWUgd2UgcmUtcmVuZGVyLiBIb3dldmVyLCBSZWFjdCB3YXJuc1xuICAgICAgLy8gYWJvdXQgdXNlTGF5b3V0RWZmZWN0IGluIFNTUiwgc28gd2UgdHJ5IHRvIGRldGVjdCBlbnZpcm9ubWVudCBhbmQgZmFsbCBiYWNrIHRvXG4gICAgICAvLyBqdXN0IHVzZUVmZmVjdCBpbnN0ZWFkIHRvIGF2b2lkIHRoZSB3YXJuaW5nLCBzaW5jZSBuZWl0aGVyIHdpbGwgcnVuIGFueXdheS5cblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKGNhcHR1cmVXcmFwcGVyUHJvcHMsIFtsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgYWN0dWFsQ2hpbGRQcm9wcywgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3Vic10pOyAvLyBPdXIgcmUtc3Vic2NyaWJlIGxvZ2ljIG9ubHkgcnVucyB3aGVuIHRoZSBzdG9yZS9zdWJzY3JpcHRpb24gc2V0dXAgY2hhbmdlc1xuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3Moc3Vic2NyaWJlVXBkYXRlcywgW3Nob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2hdLCBbc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yXSk7IC8vIE5vdyB0aGF0IGFsbCB0aGF0J3MgZG9uZSwgd2UgY2FuIGZpbmFsbHkgdHJ5IHRvIGFjdHVhbGx5IHJlbmRlciB0aGUgY2hpbGQgY29tcG9uZW50LlxuICAgICAgLy8gV2UgbWVtb2l6ZSB0aGUgZWxlbWVudHMgZm9yIHRoZSByZW5kZXJlZCBjaGlsZCBjb21wb25lbnQgYXMgYW4gb3B0aW1pemF0aW9uLlxuXG4gICAgICB2YXIgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgYWN0dWFsQ2hpbGRQcm9wcywge1xuICAgICAgICAgIHJlZjogcmVhY3RSZWR1eEZvcndhcmRlZFJlZlxuICAgICAgICB9KSk7XG4gICAgICB9LCBbcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgV3JhcHBlZENvbXBvbmVudCwgYWN0dWFsQ2hpbGRQcm9wc10pOyAvLyBJZiBSZWFjdCBzZWVzIHRoZSBleGFjdCBzYW1lIGVsZW1lbnQgcmVmZXJlbmNlIGFzIGxhc3QgdGltZSwgaXQgYmFpbHMgb3V0IG9mIHJlLXJlbmRlcmluZ1xuICAgICAgLy8gdGhhdCBjaGlsZCwgc2FtZSBhcyBpZiBpdCB3YXMgd3JhcHBlZCBpbiBSZWFjdC5tZW1vKCkgb3IgcmV0dXJuZWQgZmFsc2UgZnJvbSBzaG91bGRDb21wb25lbnRVcGRhdGUuXG5cbiAgICAgIHZhciByZW5kZXJlZENoaWxkID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCBpcyBzdWJzY3JpYmVkIHRvIHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdG8gcGFzcyBpdHMgb3duXG4gICAgICAgICAgLy8gc3Vic2NyaXB0aW9uIGluc3RhbmNlIGRvd24gdG8gb3VyIGRlc2NlbmRhbnRzLiBUaGF0IG1lYW5zIHJlbmRlcmluZyB0aGUgc2FtZVxuICAgICAgICAgIC8vIENvbnRleHQgaW5zdGFuY2UsIGFuZCBwdXR0aW5nIGEgZGlmZmVyZW50IHZhbHVlIGludG8gdGhlIGNvbnRleHQuXG4gICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHRUb1VzZS5Qcm92aWRlciwge1xuICAgICAgICAgICAgdmFsdWU6IG92ZXJyaWRkZW5Db250ZXh0VmFsdWVcbiAgICAgICAgICB9LCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIH0sIFtDb250ZXh0VG9Vc2UsIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCwgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZV0pO1xuICAgICAgcmV0dXJuIHJlbmRlcmVkQ2hpbGQ7XG4gICAgfSAvLyBJZiB3ZSdyZSBpbiBcInB1cmVcIiBtb2RlLCBlbnN1cmUgb3VyIHdyYXBwZXIgY29tcG9uZW50IG9ubHkgcmUtcmVuZGVycyB3aGVuIGluY29taW5nIHByb3BzIGhhdmUgY2hhbmdlZC5cblxuXG4gICAgdmFyIENvbm5lY3QgPSBwdXJlID8gUmVhY3QubWVtbyhDb25uZWN0RnVuY3Rpb24pIDogQ29ubmVjdEZ1bmN0aW9uO1xuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgIHZhciBmb3J3YXJkZWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIGZvcndhcmRDb25uZWN0UmVmKHByb3BzLCByZWYpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbm5lY3QsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWY6IHJlZlxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICAgIGZvcndhcmRlZC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgICAgZm9yd2FyZGVkLldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgcmV0dXJuIGhvaXN0U3RhdGljcyhmb3J3YXJkZWQsIFdyYXBwZWRDb21wb25lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwiZnVuY3Rpb24gaXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAqXG4gKiBUaGVyZSBzaG91bGQgb25seSBiZSBhIHNpbmdsZSBzdG9yZSBpbiB5b3VyIGFwcC4gVG8gc3BlY2lmeSBob3cgZGlmZmVyZW50XG4gKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gKiBpbnRvIGEgc2luZ2xlIHJlZHVjZXIgZnVuY3Rpb24gYnkgdXNpbmcgYGNvbWJpbmVSZWR1Y2Vyc2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICogdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGFjdGlvbiB0byBoYW5kbGUuXG4gKlxuICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBoeWRyYXRlIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYVxuICogcHJldmlvdXNseSBzZXJpYWxpemVkIHVzZXIgc2Vzc2lvbi5cbiAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAqIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBjb21iaW5lUmVkdWNlcnNgIGtleXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIHJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50UmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBjdXJyZW50U3RhdGUgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgdmFyIGN1cnJlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICB2YXIgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAvKipcbiAgICogVGhpcyBtYWtlcyBhIHNoYWxsb3cgY29weSBvZiBjdXJyZW50TGlzdGVuZXJzIHNvIHdlIGNhbiB1c2VcbiAgICogbmV4dExpc3RlbmVycyBhcyBhIHRlbXBvcmFyeSBsaXN0IHdoaWxlIGRpc3BhdGNoaW5nLlxuICAgKlxuICAgKiBUaGlzIHByZXZlbnRzIGFueSBidWdzIGFyb3VuZCBjb25zdW1lcnMgY2FsbGluZ1xuICAgKiBzdWJzY3JpYmUvdW5zdWJzY3JpYmUgaW4gdGhlIG1pZGRsZSBvZiBhIGRpc3BhdGNoLlxuICAgKi9cblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGN1cnJlbnRMaXN0ZW5lcnMgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiBcImFjdGlvbiBcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiB8fCAnYW4gYWN0aW9uJztcbiAgcmV0dXJuIFwiR2l2ZW4gXCIgKyBhY3Rpb25EZXNjcmlwdGlvbiArIFwiLCByZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCIgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoc3RhdGUpLmxlbmd0aDtcbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhbiBhY3Rpb24gY3JlYXRvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZGlzcGF0Y2ggd3JhcHBlZCBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgXCIgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMpICsgXCIuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpKTtcbiAgfVxuXG4gIGlmIChlbnVtZXJhYmxlT25seSkga2V5cyA9IGtleXMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSB9O1xuIiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufSAvLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59IC8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9OyAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuXG5cbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSIsImltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuICAgIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24obWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmcobWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwU3RhdGVUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZ107IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duUHJvcHMsIHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcbiAgICB2YXIgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIHZhciBtZXJnZWRQcm9wcztcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNGdW5jdGlvbihtZXJnZVByb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWVyZ2VQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcbmV4cG9ydCBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBtZXJnZVByb3BzKG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpLCBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKSwgb3duUHJvcHMpO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlO1xuICB2YXIgb3duUHJvcHM7XG4gIHZhciBzdGF0ZVByb3BzO1xuICB2YXIgZGlzcGF0Y2hQcm9wcztcbiAgdmFyIG1lcmdlZFByb3BzO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICB2YXIgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKTtcbiAgICBzdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59IC8vIFRPRE86IEFkZCBtb3JlIGNvbW1lbnRzXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImluaXRNYXBTdGF0ZVRvUHJvcHNcIiwgXCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzXCIsIFwiaW5pdE1lcmdlUHJvcHNcIl0pO1xuXG4gIHZhciBtYXBTdGF0ZVRvUHJvcHMgPSBpbml0TWFwU3RhdGVUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWVyZ2VQcm9wcyA9IGluaXRNZXJnZVByb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZlcmlmeVN1YnNlbGVjdG9ycyhtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgb3B0aW9ucy5kaXNwbGF5TmFtZSk7XG4gIH1cblxuICB2YXIgc2VsZWN0b3JGYWN0b3J5ID0gb3B0aW9ucy5wdXJlID8gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkgOiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5O1xuICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBEaXNwYXRjaFRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBTdGF0ZVRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIGZyb20gJy4vbWVyZ2VQcm9wcyc7XG5pbXBvcnQgZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL3NlbGVjdG9yRmFjdG9yeSc7XG4vKlxuICBjb25uZWN0IGlzIGEgZmFjYWRlIG92ZXIgY29ubmVjdEFkdmFuY2VkLiBJdCB0dXJucyBpdHMgYXJncyBpbnRvIGEgY29tcGF0aWJsZVxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxuXG4gICAgKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpID0+IG5leHRGaW5hbFByb3BzXG4gIFxuICBjb25uZWN0IHBhc3NlcyBpdHMgYXJncyB0byBjb25uZWN0QWR2YW5jZWQgYXMgb3B0aW9ucywgd2hpY2ggd2lsbCBpbiB0dXJuIHBhc3MgdGhlbSB0b1xuICBzZWxlY3RvckZhY3RvcnkgZWFjaCB0aW1lIGEgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2UgaXMgaW5zdGFudGlhdGVkIG9yIGhvdCByZWxvYWRlZC5cblxuICBzZWxlY3RvckZhY3RvcnkgcmV0dXJucyBhIGZpbmFsIHByb3BzIHNlbGVjdG9yIGZyb20gaXRzIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgbWVyZ2VQcm9wcyxcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cblxuICBUaGUgcmVzdWx0aW5nIGZpbmFsIHByb3BzIHNlbGVjdG9yIGlzIGNhbGxlZCBieSB0aGUgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2Ugd2hlbmV2ZXJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxuICovXG5cbmZ1bmN0aW9uIG1hdGNoKGFyZywgZmFjdG9yaWVzLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBmYWN0b3JpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFjdG9yaWVzW2ldKGFyZyk7XG4gICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIG9mIHR5cGUgXCIgKyB0eXBlb2YgYXJnICsgXCIgZm9yIFwiICsgbmFtZSArIFwiIGFyZ3VtZW50IHdoZW4gY29ubmVjdGluZyBjb21wb25lbnQgXCIgKyBvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lICsgXCIuXCIpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufSAvLyBjcmVhdGVDb25uZWN0IHdpdGggZGVmYXVsdCBhcmdzIGJ1aWxkcyB0aGUgJ29mZmljaWFsJyBjb25uZWN0IGJlaGF2aW9yLiBDYWxsaW5nIGl0IHdpdGhcbi8vIGRpZmZlcmVudCBvcHRpb25zIG9wZW5zIHVwIHNvbWUgdGVzdGluZyBhbmQgZXh0ZW5zaWJpbGl0eSBzY2VuYXJpb3NcblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdChfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgX3JlZiRjb25uZWN0SE9DID0gX3JlZi5jb25uZWN0SE9DLFxuICAgICAgY29ubmVjdEhPQyA9IF9yZWYkY29ubmVjdEhPQyA9PT0gdm9pZCAwID8gY29ubmVjdEFkdmFuY2VkIDogX3JlZiRjb25uZWN0SE9DLFxuICAgICAgX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID0gX3JlZi5tYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPT09IHZvaWQgMCA/IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YsXG4gICAgICBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPSBfcmVmLm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyxcbiAgICAgIF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9IF9yZWYubWVyZ2VQcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1lcmdlUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPT09IHZvaWQgMCA/IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIDogX3JlZiRtZXJnZVByb3BzRmFjdG9yLFxuICAgICAgX3JlZiRzZWxlY3RvckZhY3RvcnkgPSBfcmVmLnNlbGVjdG9yRmFjdG9yeSxcbiAgICAgIHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYkc2VsZWN0b3JGYWN0b3J5ID09PSB2b2lkIDAgPyBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IDogX3JlZiRzZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIF9yZWYyKSB7XG4gICAgaWYgKF9yZWYyID09PSB2b2lkIDApIHtcbiAgICAgIF9yZWYyID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9yZWYzID0gX3JlZjIsXG4gICAgICAgIF9yZWYzJHB1cmUgPSBfcmVmMy5wdXJlLFxuICAgICAgICBwdXJlID0gX3JlZjMkcHVyZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYzJHB1cmUsXG4gICAgICAgIF9yZWYzJGFyZVN0YXRlc0VxdWFsID0gX3JlZjMuYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlc0VxdWFsID0gX3JlZjMkYXJlU3RhdGVzRXF1YWwgPT09IHZvaWQgMCA/IHN0cmljdEVxdWFsIDogX3JlZjMkYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIF9yZWYzJGFyZU93blByb3BzRXF1YSA9IF9yZWYzLmFyZU93blByb3BzRXF1YWwsXG4gICAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmMyRhcmVPd25Qcm9wc0VxdWEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZU93blByb3BzRXF1YSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVQcm9wc0VxID0gX3JlZjMuYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSxcbiAgICAgICAgX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID0gX3JlZjMuYXJlTWVyZ2VkUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU1lcmdlZFByb3BzRSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlTWVyZ2VkUHJvcHNFLFxuICAgICAgICBleHRyYU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMywgW1wicHVyZVwiLCBcImFyZVN0YXRlc0VxdWFsXCIsIFwiYXJlT3duUHJvcHNFcXVhbFwiLCBcImFyZVN0YXRlUHJvcHNFcXVhbFwiLCBcImFyZU1lcmdlZFByb3BzRXF1YWxcIl0pO1xuXG4gICAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXRjaChtYXBTdGF0ZVRvUHJvcHMsIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgJ21hcFN0YXRlVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWF0Y2gobWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1lcmdlUHJvcHMgPSBtYXRjaChtZXJnZVByb3BzLCBtZXJnZVByb3BzRmFjdG9yaWVzLCAnbWVyZ2VQcm9wcycpO1xuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiQ29ubmVjdChcIiArIG5hbWUgKyBcIilcIjtcbiAgICAgIH0sXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH0sIGV4dHJhT3B0aW9ucykpO1xuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL2NyZWF0ZUNvbm5lY3QoKTsiLCJpbXBvcnQgeyB1c2VSZWR1Y2VyLCB1c2VSZWYsIHVzZU1lbW8sIHVzZUNvbnRleHQsIHVzZURlYnVnVmFsdWUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcblxudmFyIHJlZkVxdWFsaXR5ID0gZnVuY3Rpb24gcmVmRXF1YWxpdHkoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn07XG5cbmZ1bmN0aW9uIHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yikge1xuICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMgKyAxO1xuICB9LCAwKSxcbiAgICAgIGZvcmNlUmVuZGVyID0gX3VzZVJlZHVjZXJbMV07XG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgfSwgW3N0b3JlLCBjb250ZXh0U3ViXSk7XG4gIHZhciBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U3RvcmVTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0ZWRTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIHZhciBzZWxlY3RlZFN0YXRlO1xuXG4gIHRyeSB7XG4gICAgaWYgKHNlbGVjdG9yICE9PSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50IHx8IHN0b3JlU3RhdGUgIT09IGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCB8fCBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBzZWxlY3RvcihzdG9yZVN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIGVyci5tZXNzYWdlICs9IFwiXFxuVGhlIGVycm9yIG1heSBiZSBjb3JyZWxhdGVkIHdpdGggdGhpcyBwcmV2aW91cyBlcnJvcjpcXG5cIiArIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudC5zdGFjayArIFwiXFxuXFxuXCI7XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbGF0ZXN0U2VsZWN0b3IuY3VycmVudCA9IHNlbGVjdG9yO1xuICAgIGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCA9IHN0b3JlU3RhdGU7XG4gICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gc2VsZWN0ZWRTdGF0ZTtcbiAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gIH0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV3U2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQoc3RvcmUuZ2V0U3RhdGUoKSk7XG5cbiAgICAgICAgaWYgKGVxdWFsaXR5Rm4obmV3U2VsZWN0ZWRTdGF0ZSwgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IG5ld1NlbGVjdGVkU3RhdGU7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gd2UgaWdub3JlIGFsbCBlcnJvcnMgaGVyZSwgc2luY2Ugd2hlbiB0aGUgY29tcG9uZW50XG4gICAgICAgIC8vIGlzIHJlLXJlbmRlcmVkLCB0aGUgc2VsZWN0b3JzIGFyZSBjYWxsZWQgYWdhaW4sIGFuZFxuICAgICAgICAvLyB3aWxsIHRocm93IGFnYWluLCBpZiBuZWl0aGVyIHByb3BzIG5vciBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VkXG4gICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IGVycjtcbiAgICAgIH1cblxuICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgY2hlY2tGb3JVcGRhdGVzKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbl0pO1xuICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbn1cbi8qKlxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9ySG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU2VsZWN0b3Ioc2VsZWN0b3IsIGVxdWFsaXR5Rm4pIHtcbiAgICBpZiAoZXF1YWxpdHlGbiA9PT0gdm9pZCAwKSB7XG4gICAgICBlcXVhbGl0eUZuID0gcmVmRXF1YWxpdHk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXNlbGVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JcIik7XG4gICAgfVxuXG4gICAgdmFyIF91c2VSZWR1eENvbnRleHQgPSB1c2VSZWR1eENvbnRleHQoKSxcbiAgICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlLFxuICAgICAgICBjb250ZXh0U3ViID0gX3VzZVJlZHV4Q29udGV4dC5zdWJzY3JpcHRpb247XG5cbiAgICB2YXIgc2VsZWN0ZWRTdGF0ZSA9IHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yik7XG4gICAgdXNlRGVidWdWYWx1ZShzZWxlY3RlZFN0YXRlKTtcbiAgICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbiAgfTtcbn1cbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUncyBzdGF0ZS4gVGhpcyBob29rIHRha2VzIGEgc2VsZWN0b3IgZnVuY3Rpb25cbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxuICpcbiAqIFRoaXMgaG9vayB0YWtlcyBhbiBvcHRpb25hbCBlcXVhbGl0eSBjb21wYXJpc29uIGZ1bmN0aW9uIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxuICogd2hldGhlciB0aGUgY29tcG9uZW50IG5lZWRzIHRvIGJlIHJlLXJlbmRlcmVkLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbj19IGVxdWFsaXR5Rm4gdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBlcXVhbGl0eVxuICpcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3QgY291bnRlciA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmNvdW50ZXIpXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxuICogfVxuICovXG5cbmV4cG9ydCB2YXIgdXNlU2VsZWN0b3IgPSAvKiNfX1BVUkVfXyovY3JlYXRlU2VsZWN0b3JIb29rKCk7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJpbXBvcnQgUHJvdmlkZXIgZnJvbSAnLi9jb21wb25lbnRzL1Byb3ZpZGVyJztcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoLCBjcmVhdGVEaXNwYXRjaEhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZURpc3BhdGNoJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3Rvckhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVNlbGVjdG9yJztcbmltcG9ydCB7IHVzZVN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVN0b3JlJztcbmltcG9ydCB7IHNldEJhdGNoIH0gZnJvbSAnLi91dGlscy9iYXRjaCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyBhcyBiYXRjaCB9IGZyb20gJy4vdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcyc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IFByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIFJlYWN0UmVkdXhDb250ZXh0LCBjb25uZWN0LCBiYXRjaCwgdXNlRGlzcGF0Y2gsIGNyZWF0ZURpc3BhdGNoSG9vaywgdXNlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9ySG9vaywgdXNlU3RvcmUsIGNyZWF0ZVN0b3JlSG9vaywgc2hhbGxvd0VxdWFsIH07IiwiZnVuY3Rpb24gdmFsdWVPZihvYmopIHtcbiAgcmV0dXJuIG9iai52YWx1ZU9mID8gb2JqLnZhbHVlT2YoKSA6IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKG9iaik7XG59XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICAvLyBUZXN0IGZvciBzdHJpY3QgZXF1YWxpdHkgZmlyc3QuXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBPdGhlcndpc2UsIGlmIGVpdGhlciBvZiB0aGVtID09IG51bGwgdGhleSBhcmUgbm90IGVxdWFsLlxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIEFycmF5LmlzQXJyYXkoYikgJiZcbiAgICAgIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJlxuICAgICAgYS5ldmVyeShmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSB2YWx1ZU9mKGEpO1xuICAgIHZhciBiVmFsdWUgPSB2YWx1ZU9mKGIpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBhLCBiKSkuZXZlcnkoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7XG4iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIE1BWF9TSUdORURfMzFfQklUX0lOVCA9IDEwNzM3NDE4MjM7XG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHt9O1xuXG5mdW5jdGlvbiBnZXRVbmlxdWVJZCgpIHtcbiAgdmFyIGtleSA9ICdfX2dsb2JhbF91bmlxdWVfaWRfXyc7XG4gIHJldHVybiBjb21tb25qc0dsb2JhbFtrZXldID0gKGNvbW1vbmpzR2xvYmFsW2tleV0gfHwgMCkgKyAxO1xufVxuXG5mdW5jdGlvbiBvYmplY3RJcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRFbWl0dGVyKHZhbHVlKSB7XG4gIHZhciBoYW5kbGVycyA9IFtdO1xuICByZXR1cm4ge1xuICAgIG9uOiBmdW5jdGlvbiBvbihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgIH0sXG4gICAgb2ZmOiBmdW5jdGlvbiBvZmYoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMgPSBoYW5kbGVycy5maWx0ZXIoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIGggIT09IGhhbmRsZXI7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlcih2YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW5bMF0gOiBjaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVhY3RDb250ZXh0KGRlZmF1bHRWYWx1ZSwgY2FsY3VsYXRlQ2hhbmdlZEJpdHMpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlO1xuXG4gIHZhciBjb250ZXh0UHJvcCA9ICdfX2NyZWF0ZS1yZWFjdC1jb250ZXh0LScgKyBnZXRVbmlxdWVJZCgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX3RoaXMgPSBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzLmVtaXR0ZXIgPSBjcmVhdGVFdmVudEVtaXR0ZXIoX3RoaXMucHJvcHMudmFsdWUpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBQcm92aWRlci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbY29udGV4dFByb3BdID0gdGhpcy5lbWl0dGVyLCBfcmVmO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IG5leHRQcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIGNoYW5nZWRCaXRzO1xuXG4gICAgICAgIGlmIChvYmplY3RJcyhvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gdHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSAnZnVuY3Rpb24nID8gY2FsY3VsYXRlQ2hhbmdlZEJpdHMob2xkVmFsdWUsIG5ld1ZhbHVlKSA6IE1BWF9TSUdORURfMzFfQklUX0lOVDtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuaW5nKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAnICsgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWRCaXRzIHw9IDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZEJpdHMgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5zZXQobmV4dFByb3BzLnZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgdmFyIENvbnN1bWVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICAgIF9pbmhlcml0c0xvb3NlKENvbnN1bWVyLCBfQ29tcG9uZW50Mik7XG5cbiAgICBmdW5jdGlvbiBDb25zdW1lcigpIHtcbiAgICAgIHZhciBfdGhpczI7XG5cbiAgICAgIF90aGlzMiA9IF9Db21wb25lbnQyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzMi5zdGF0ZSA9IHtcbiAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICB9O1xuXG4gICAgICBfdGhpczIub25VcGRhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBfdGhpczIub2JzZXJ2ZWRCaXRzIHwgMDtcblxuICAgICAgICBpZiAoKG9ic2VydmVkQml0cyAmIGNoYW5nZWRCaXRzKSAhPT0gMCkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzMjtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvMiA9IENvbnN1bWVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gbmV4dFByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9uKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gdGhpcy5wcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vZmYodGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLmdldCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gb25seUNoaWxkKHRoaXMucHJvcHMuY2hpbGRyZW4pKHRoaXMuc3RhdGUudmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29uc3VtZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBDb25zdW1lci5jb250ZXh0VHlwZXMgPSAoX0NvbnN1bWVyJGNvbnRleHRUeXBlID0ge30sIF9Db25zdW1lciRjb250ZXh0VHlwZVtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LCBfQ29uc3VtZXIkY29udGV4dFR5cGUpO1xuICByZXR1cm4ge1xuICAgIFByb3ZpZGVyOiBQcm92aWRlcixcbiAgICBDb25zdW1lcjogQ29uc3VtZXJcbiAgfTtcbn1cblxudmFyIGluZGV4ID0gUmVhY3QuY3JlYXRlQ29udGV4dCB8fCBjcmVhdGVSZWFjdENvbnRleHQ7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIGNyZWF0ZVBhdGggfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tICdtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tICdwYXRoLXRvLXJlZ2V4cCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0ID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBoaXN0b3J5Q29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXItSGlzdG9yeVwiKTtcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0JDEgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0JDEoXCJSb3V0ZXJcIik7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gUm91dGVyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMuaGlzdG9yeS5sb2NhdGlvblxuICAgIH07IC8vIFRoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLiBXZSBoYXZlIHRvIHN0YXJ0IGxpc3RlbmluZyBmb3IgbG9jYXRpb25cbiAgICAvLyBjaGFuZ2VzIGhlcmUgaW4gdGhlIGNvbnN0cnVjdG9yIGluIGNhc2UgdGhlcmUgYXJlIGFueSA8UmVkaXJlY3Q+c1xuICAgIC8vIG9uIHRoZSBpbml0aWFsIHJlbmRlci4gSWYgdGhlcmUgYXJlLCB0aGV5IHdpbGwgcmVwbGFjZS9wdXNoIHdoZW5cbiAgICAvLyB0aGV5IG1vdW50IGFuZCBzaW5jZSBjRE0gZmlyZXMgaW4gY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMsIHdlIG1heVxuICAgIC8vIGdldCBhIG5ldyBsb2NhdGlvbiBiZWZvcmUgdGhlIDxSb3V0ZXI+IGlzIG1vdW50ZWQuXG5cbiAgICBfdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IG51bGw7XG5cbiAgICBpZiAoIXByb3BzLnN0YXRpY0NvbnRleHQpIHtcbiAgICAgIF90aGlzLnVubGlzdGVuID0gcHJvcHMuaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdMb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLl9wZW5kaW5nTG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy51bmxpc3RlbikgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICBsb2NhdGlvbjogdGhpcy5zdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLnN0YXRpY0NvbnRleHRcbiAgICAgIH1cbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KGhpc3RvcnlDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBudWxsLFxuICAgICAgdmFsdWU6IHRoaXMucHJvcHMuaGlzdG9yeVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcmV2UHJvcHMuaGlzdG9yeSA9PT0gdGhpcy5wcm9wcy5oaXN0b3J5LCBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5cbnZhciBNZW1vcnlSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWVtb3J5Um91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW1vcnlSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZU1lbW9yeUhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNZW1vcnlSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNZW1vcnlSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPE1lbW9yeVJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IE1lbW9yeVJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgTGlmZWN5Y2xlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKExpZmVjeWNsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGlmZWN5Y2xlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBMaWZlY3ljbGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91bnQpIHRoaXMucHJvcHMub25Nb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25VcGRhdGUpIHRoaXMucHJvcHMub25VcGRhdGUuY2FsbCh0aGlzLCB0aGlzLCBwcmV2UHJvcHMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVW5tb3VudCkgdGhpcy5wcm9wcy5vblVubW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBMaWZlY3ljbGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5IGZyb20gYSBzY3JlZW4uXG4gKi9cblxuZnVuY3Rpb24gUHJvbXB0KF9yZWYpIHtcbiAgdmFyIG1lc3NhZ2UgPSBfcmVmLm1lc3NhZ2UsXG4gICAgICBfcmVmJHdoZW4gPSBfcmVmLndoZW4sXG4gICAgICB3aGVuID0gX3JlZiR3aGVuID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiR3aGVuO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmICghd2hlbiB8fCBjb250ZXh0LnN0YXRpY0NvbnRleHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtZXRob2QgPSBjb250ZXh0Lmhpc3RvcnkuYmxvY2s7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgaWYgKHByZXZQcm9wcy5tZXNzYWdlICE9PSBtZXNzYWdlKSB7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25Vbm1vdW50OiBmdW5jdGlvbiBvblVubW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciBtZXNzYWdlVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSk7XG4gIFByb21wdC5wcm9wVHlwZXMgPSB7XG4gICAgd2hlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgbWVzc2FnZTogbWVzc2FnZVR5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgpIHtcbiAgaWYgKGNhY2hlW3BhdGhdKSByZXR1cm4gY2FjaGVbcGF0aF07XG4gIHZhciBnZW5lcmF0b3IgPSBwYXRoVG9SZWdleHAuY29tcGlsZShwYXRoKTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXRoXSA9IGdlbmVyYXRvcjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gZ2VuZXJhdG9yO1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBnZW5lcmF0aW5nIGEgVVJMIHBhdGhuYW1lIGZyb20gYSBwYXRoIGFuZCBwYXJhbWV0ZXJzLlxuICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKHBhdGgsIHBhcmFtcykge1xuICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGF0aCA9IFwiL1wiO1xuICB9XG5cbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cblxuICByZXR1cm4gcGF0aCA9PT0gXCIvXCIgPyBwYXRoIDogY29tcGlsZVBhdGgocGF0aCkocGFyYW1zLCB7XG4gICAgcHJldHR5OiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBuYXZpZ2F0aW5nIHByb2dyYW1tYXRpY2FsbHkgd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG5mdW5jdGlvbiBSZWRpcmVjdChfcmVmKSB7XG4gIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgX3JlZiRwdXNoID0gX3JlZi5wdXNoLFxuICAgICAgcHVzaCA9IF9yZWYkcHVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHB1c2g7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IGNvbnRleHQuc3RhdGljQ29udGV4dDtcbiAgICB2YXIgbWV0aG9kID0gcHVzaCA/IGhpc3RvcnkucHVzaCA6IGhpc3RvcnkucmVwbGFjZTtcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihjb21wdXRlZE1hdGNoID8gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gZ2VuZXJhdGVQYXRoKHRvLCBjb21wdXRlZE1hdGNoLnBhcmFtcykgOiBfZXh0ZW5kcyh7fSwgdG8sIHtcbiAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgIH0pIDogdG8pOyAvLyBXaGVuIHJlbmRlcmluZyBpbiBhIHN0YXRpYyBjb250ZXh0LFxuICAgIC8vIHNldCB0aGUgbmV3IGxvY2F0aW9uIGltbWVkaWF0ZWx5LlxuXG4gICAgaWYgKHN0YXRpY0NvbnRleHQpIHtcbiAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICB2YXIgcHJldkxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcblxuICAgICAgICBpZiAoIWxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgICAgICAga2V5OiBwcmV2TG9jYXRpb24ua2V5XG4gICAgICAgIH0pKSkge1xuICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0bzogdG9cbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICAgIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSQxID0ge307XG52YXIgY2FjaGVMaW1pdCQxID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCQxID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgkMShwYXRoLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBwYXRoQ2FjaGUgPSBjYWNoZSQxW2NhY2hlS2V5XSB8fCAoY2FjaGUkMVtjYWNoZUtleV0gPSB7fSk7XG4gIGlmIChwYXRoQ2FjaGVbcGF0aF0pIHJldHVybiBwYXRoQ2FjaGVbcGF0aF07XG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZWdleHAgPSBwYXRoVG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucyk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAga2V5czoga2V5c1xuICB9O1xuXG4gIGlmIChjYWNoZUNvdW50JDEgPCBjYWNoZUxpbWl0JDEpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCQxKys7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cblxuXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHBhdGg6IG9wdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhzID0gW10uY29uY2F0KHBhdGgpO1xuICByZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVkLCBwYXRoKSB7XG4gICAgaWYgKCFwYXRoICYmIHBhdGggIT09IFwiXCIpIHJldHVybiBudWxsO1xuICAgIGlmIChtYXRjaGVkKSByZXR1cm4gbWF0Y2hlZDtcblxuICAgIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aCQxKHBhdGgsIHtcbiAgICAgIGVuZDogZXhhY3QsXG4gICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlXG4gICAgfSksXG4gICAgICAgIHJlZ2V4cCA9IF9jb21waWxlUGF0aC5yZWdleHAsXG4gICAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICAgIHZhciBtYXRjaCA9IHJlZ2V4cC5leGVjKHBhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuICAgIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgLy8gdGhlIHBhdGggdXNlZCB0byBtYXRjaFxuICAgICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCxcbiAgICAgIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdDogaXNFeGFjdCxcbiAgICAgIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfSwge30pXG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufVxuXG5mdW5jdGlvbiBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBwYXRoKSB7XG4gIHZhciB2YWx1ZSA9IGNoaWxkcmVuKHByb3BzKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh2YWx1ZSAhPT0gdW5kZWZpbmVkLCBcIllvdSByZXR1cm5lZCBgdW5kZWZpbmVkYCBmcm9tIHRoZSBgY2hpbGRyZW5gIGZ1bmN0aW9uIG9mIFwiICsgKFwiPFJvdXRlXCIgKyAocGF0aCA/IFwiIHBhdGg9XFxcIlwiICsgcGF0aCArIFwiXFxcIlwiIDogXCJcIikgKyBcIj4sIGJ1dCB5b3UgXCIpICsgXCJzaG91bGQgaGF2ZSByZXR1cm5lZCBhIFJlYWN0IGVsZW1lbnQgb3IgYG51bGxgXCIpIDogdm9pZCAwO1xuICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG5cbnZhciBSb3V0ZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQxKSB7XG4gICAgICAhY29udGV4dCQxID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0JDEubG9jYXRpb247XG4gICAgICB2YXIgbWF0Y2ggPSBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoID8gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcbiAgICAgIDogX3RoaXMucHJvcHMucGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX3RoaXMucHJvcHMpIDogY29udGV4dCQxLm1hdGNoO1xuXG4gICAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgY29udGV4dCQxLCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IG1hdGNoXG4gICAgICB9KTtcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgcmVuZGVyID0gX3RoaXMkcHJvcHMucmVuZGVyOyAvLyBQcmVhY3QgdXNlcyBhbiBlbXB0eSBhcnJheSBhcyBjaGlsZHJlbiBieVxuICAgICAgLy8gZGVmYXVsdCwgc28gdXNlIG51bGwgaWYgdGhhdCdzIHRoZSBjYXNlLlxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiYgY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvcHNcbiAgICAgIH0sIHByb3BzLm1hdGNoID8gY2hpbGRyZW4gPyB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogY2hpbGRyZW4gOiBjb21wb25lbnQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogcmVuZGVyID8gcmVuZGVyKHByb3BzKSA6IG51bGwgOiB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogbnVsbCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQocHJvcHMsIHByb3BOYW1lKSB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdICYmICFpc1ZhbGlkRWxlbWVudFR5cGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wICdjb21wb25lbnQnIHN1cHBsaWVkIHRvICdSb3V0ZSc6IHRoZSBwcm9wIGlzIG5vdCBhIHZhbGlkIFJlYWN0IGNvbXBvbmVudFwiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwYXRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKV0pLFxuICAgIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5jb21wb25lbnQpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSBcIi9cIiA/IHBhdGggOiBcIi9cIiArIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59XG5cbmZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+XCIsIG1ldGhvZE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cblxudmFyIFN0YXRpY1JvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTdGF0aWNSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0YXRpY1JvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlBVU0hcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlJFUExBQ0VcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUxpc3RlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3RhdGljUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ubmF2aWdhdGVUbyA9IGZ1bmN0aW9uIG5hdmlnYXRlVG8obG9jYXRpb24sIGFjdGlvbikge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wcyRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMkY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wcyRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzJGNvbnRleHQ7XG4gICAgY29udGV4dC5hY3Rpb24gPSBhY3Rpb247XG4gICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzMiRiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wczIkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzMiRjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wczIkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wczIkY29udGV4dCxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyLmxvY2F0aW9uLFxuICAgICAgICBsb2NhdGlvbiA9IF90aGlzJHByb3BzMiRsb2NhdGlvbiA9PT0gdm9pZCAwID8gXCIvXCIgOiBfdGhpcyRwcm9wczIkbG9jYXRpb24sXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczIsIFtcImJhc2VuYW1lXCIsIFwiY29udGV4dFwiLCBcImxvY2F0aW9uXCJdKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogZnVuY3Rpb24gY3JlYXRlSHJlZihwYXRoKSB7XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgICAgfSxcbiAgICAgIGFjdGlvbjogXCJQT1BcIixcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoXCJnb1wiKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcihcImdvQmFja1wiKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcihcImdvRm9yd2FyZFwiKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaGlzdG9yeTogaGlzdG9yeSxcbiAgICAgIHN0YXRpY0NvbnRleHQ6IGNvbnRleHRcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0YXRpY1JvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTdGF0aWNSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxTdGF0aWNSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBTdGF0aWNSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIHRoZSBmaXJzdCA8Um91dGU+IHRoYXQgbWF0Y2hlcy5cbiAqL1xuXG52YXIgU3dpdGNoID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN3aXRjaCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3dpdGNoKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTd2l0Y2gucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgICB2YXIgZWxlbWVudCwgbWF0Y2g7IC8vIFdlIHVzZSBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoIGluc3RlYWQgb2YgUmVhY3QuQ2hpbGRyZW4udG9BcnJheSgpLmZpbmQoKVxuICAgICAgLy8gaGVyZSBiZWNhdXNlIHRvQXJyYXkgYWRkcyBrZXlzIHRvIGFsbCBjaGlsZCBlbGVtZW50cyBhbmQgd2UgZG8gbm90IHdhbnRcbiAgICAgIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgICAgIC8vIGNvbXBvbmVudCBhdCBkaWZmZXJlbnQgVVJMcy5cblxuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChfdGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChtYXRjaCA9PSBudWxsICYmIFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIGVsZW1lbnQgPSBjaGlsZDtcbiAgICAgICAgICB2YXIgcGF0aCA9IGNoaWxkLnByb3BzLnBhdGggfHwgY2hpbGQucHJvcHMuZnJvbTtcbiAgICAgICAgICBtYXRjaCA9IHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF9leHRlbmRzKHt9LCBjaGlsZC5wcm9wcywge1xuICAgICAgICAgICAgcGF0aDogcGF0aFxuICAgICAgICAgIH0pKSA6IGNvbnRleHQubWF0Y2g7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoID8gUmVhY3QuY2xvbmVFbGVtZW50KGVsZW1lbnQsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBjb21wdXRlZE1hdGNoOiBtYXRjaFxuICAgICAgfSkgOiBudWxsO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBTd2l0Y2g7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3dpdGNoLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogQSBwdWJsaWMgaGlnaGVyLW9yZGVyIGNvbXBvbmVudCB0byBhY2Nlc3MgdGhlIGltcGVyYXRpdmUgQVBJXG4gKi9cblxuZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb25lbnQpIHtcbiAgdmFyIGRpc3BsYXlOYW1lID0gXCJ3aXRoUm91dGVyKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIjtcblxuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudFJlZiA9IHByb3BzLndyYXBwZWRDb21wb25lbnRSZWYsXG4gICAgICAgIHJlbWFpbmluZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcIndyYXBwZWRDb21wb25lbnRSZWZcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8XCIgKyBkaXNwbGF5TmFtZSArIFwiIC8+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgY29udGV4dCwge1xuICAgICAgICByZWY6IHdyYXBwZWRDb21wb25lbnRSZWZcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXBvbmVudDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgQy5wcm9wVHlwZXMgPSB7XG4gICAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn1cblxudmFyIHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0O1xuZnVuY3Rpb24gdXNlSGlzdG9yeSgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUhpc3RvcnkoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChoaXN0b3J5Q29udGV4dCk7XG59XG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUxvY2F0aW9uKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCkubG9jYXRpb247XG59XG5mdW5jdGlvbiB1c2VQYXJhbXMoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VQYXJhbXMoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaC5wYXJhbXMgOiB7fTtcbn1cbmZ1bmN0aW9uIHVzZVJvdXRlTWF0Y2gocGF0aCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUm91dGVNYXRjaCgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBwYXRoKSA6IG1hdGNoO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIGdsb2JhbCA9IHdpbmRvdztcbiAgICB2YXIga2V5ID0gXCJfX3JlYWN0X3JvdXRlcl9idWlsZF9fXCI7XG4gICAgdmFyIGJ1aWxkTmFtZXMgPSB7XG4gICAgICBjanM6IFwiQ29tbW9uSlNcIixcbiAgICAgIGVzbTogXCJFUyBtb2R1bGVzXCIsXG4gICAgICB1bWQ6IFwiVU1EXCJcbiAgICB9O1xuXG4gICAgaWYgKGdsb2JhbFtrZXldICYmIGdsb2JhbFtrZXldICE9PSBcImVzbVwiKSB7XG4gICAgICB2YXIgaW5pdGlhbEJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbZ2xvYmFsW2tleV1dO1xuICAgICAgdmFyIHNlY29uZGFyeUJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbXCJlc21cIl07IC8vIFRPRE86IEFkZCBsaW5rIHRvIGFydGljbGUgdGhhdCBleHBsYWlucyBpbiBkZXRhaWwgaG93IHRvIGF2b2lkXG4gICAgICAvLyBsb2FkaW5nIDIgZGlmZmVyZW50IGJ1aWxkcy5cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBsb2FkaW5nIHRoZSBcIiArIHNlY29uZGFyeUJ1aWxkTmFtZSArIFwiIGJ1aWxkIG9mIFJlYWN0IFJvdXRlciBcIiArIChcIm9uIGEgcGFnZSB0aGF0IGlzIGFscmVhZHkgcnVubmluZyB0aGUgXCIgKyBpbml0aWFsQnVpbGROYW1lICsgXCIgXCIpICsgXCJidWlsZCwgc28gdGhpbmdzIHdvbid0IHdvcmsgcmlnaHQuXCIpO1xuICAgIH1cblxuICAgIGdsb2JhbFtrZXldID0gXCJlc21cIjtcbiAgfVxufVxuXG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBoaXN0b3J5Q29udGV4dCBhcyBfX0hpc3RvcnlDb250ZXh0LCBjb250ZXh0IGFzIF9fUm91dGVyQ29udGV4dCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci5qcy5tYXBcbiIsImltcG9ydCB7IFJvdXRlciwgX19Sb3V0ZXJDb250ZXh0LCBtYXRjaFBhdGggfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTG9jYXRpb24gfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cblxudmFyIEJyb3dzZXJSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQnJvd3NlclJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJvd3NlclJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlQnJvd3Nlckhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCcm93c2VyUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gQnJvd3NlclJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBCcm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXJcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEJyb3dzZXJSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIHdpbmRvdy5sb2NhdGlvbi5oYXNoLlxuICovXG5cbnZhciBIYXNoUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEhhc2hSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEhhc2hSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhhc2hIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gSGFzaFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pXG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgcmVzb2x2ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiByZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwiZnVuY3Rpb25cIiA/IHRvKGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG52YXIgbm9ybWFsaXplVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gY3JlYXRlTG9jYXRpb24odG8sIG51bGwsIG51bGwsIGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG5cbnZhciBmb3J3YXJkUmVmU2hpbSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmID0gZm9yd2FyZFJlZlNoaW07XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbnZhciBMaW5rQW5jaG9yID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBuYXZpZ2F0ZSA9IF9yZWYubmF2aWdhdGUsXG4gICAgICBfb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJpbm5lclJlZlwiLCBcIm5hdmlnYXRlXCIsIFwib25DbGlja1wiXSk7XG5cbiAgdmFyIHRhcmdldCA9IHJlc3QudGFyZ2V0O1xuXG4gIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9vbkNsaWNrKSBfb25DbGljayhldmVudCk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aHJvdyBleDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIG5hdmlnYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgfSBlbHNlIHtcbiAgICBwcm9wcy5yZWYgPSBpbm5lclJlZjtcbiAgfVxuICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50ICovXG5cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgcHJvcHMpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGlua0FuY2hvci5kaXNwbGF5TmFtZSA9IFwiTGlua0FuY2hvclwiO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxuXG52YXIgTGluayA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYyLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYyJGNvbXBvbmVudCA9IF9yZWYyLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9yZWYyJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gTGlua0FuY2hvciA6IF9yZWYyJGNvbXBvbmVudCxcbiAgICAgIHJlcGxhY2UgPSBfcmVmMi5yZXBsYWNlLFxuICAgICAgdG8gPSBfcmVmMi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZjIuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImNvbXBvbmVudFwiLCBcInJlcGxhY2VcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5O1xuICAgIHZhciBsb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24ocmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB2YXIgaHJlZiA9IGxvY2F0aW9uID8gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKSA6IFwiXCI7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaHJlZjogaHJlZixcbiAgICAgIG5hdmlnYXRlOiBmdW5jdGlvbiBuYXZpZ2F0ZSgpIHtcbiAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pO1xuICAgICAgICB2YXIgbWV0aG9kID0gcmVwbGFjZSA/IGhpc3RvcnkucmVwbGFjZSA6IGhpc3RvcnkucHVzaDtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciB0b1R5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pO1xuICB2YXIgcmVmVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5hbnlcbiAgfSldKTtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogcmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBmb3J3YXJkUmVmU2hpbSQxID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmJDEgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYkMSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmJDEgPSBmb3J3YXJkUmVmU2hpbSQxO1xufVxuXG5mdW5jdGlvbiBqb2luQ2xhc3NuYW1lcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzbmFtZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3NuYW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc25hbWVzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpO1xuICB9KS5qb2luKFwiIFwiKTtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG52YXIgTmF2TGluayA9IGZvcndhcmRSZWYkMShmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmJGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZiRhcmlhQ3VycmVudCA9PT0gdm9pZCAwID8gXCJwYWdlXCIgOiBfcmVmJGFyaWFDdXJyZW50LFxuICAgICAgX3JlZiRhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYkYWN0aXZlQ2xhc3NOYW1lID09PSB2b2lkIDAgPyBcImFjdGl2ZVwiIDogX3JlZiRhY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBjbGFzc05hbWVQcm9wID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBpc0FjdGl2ZVByb3AgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgbG9jYXRpb25Qcm9wID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBzdHlsZVByb3AgPSBfcmVmLnN0eWxlLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImFyaWEtY3VycmVudFwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXhhY3RcIiwgXCJpc0FjdGl2ZVwiLCBcImxvY2F0aW9uXCIsIFwic2Vuc2l0aXZlXCIsIFwic3RyaWN0XCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxOYXZMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBjdXJyZW50TG9jYXRpb24gPSBsb2NhdGlvblByb3AgfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24ocmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbiksIGN1cnJlbnRMb2NhdGlvbik7XG4gICAgdmFyIHBhdGggPSB0b0xvY2F0aW9uLnBhdGhuYW1lOyAvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxuXG4gICAgdmFyIGVzY2FwZWRQYXRoID0gcGF0aCAmJiBwYXRoLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcbiAgICB2YXIgbWF0Y2ggPSBlc2NhcGVkUGF0aCA/IG1hdGNoUGF0aChjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUsIHtcbiAgICAgIHBhdGg6IGVzY2FwZWRQYXRoLFxuICAgICAgZXhhY3Q6IGV4YWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmUsXG4gICAgICBzdHJpY3Q6IHN0cmljdFxuICAgIH0pIDogbnVsbDtcbiAgICB2YXIgaXNBY3RpdmUgPSAhIShpc0FjdGl2ZVByb3AgPyBpc0FjdGl2ZVByb3AobWF0Y2gsIGN1cnJlbnRMb2NhdGlvbikgOiBtYXRjaCk7XG4gICAgdmFyIGNsYXNzTmFtZSA9IGlzQWN0aXZlID8gam9pbkNsYXNzbmFtZXMoY2xhc3NOYW1lUHJvcCwgYWN0aXZlQ2xhc3NOYW1lKSA6IGNsYXNzTmFtZVByb3A7XG4gICAgdmFyIHN0eWxlID0gaXNBY3RpdmUgPyBfZXh0ZW5kcyh7fSwgc3R5bGVQcm9wLCB7fSwgYWN0aXZlU3R5bGUpIDogc3R5bGVQcm9wO1xuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQgfHwgbnVsbCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdG86IHRvTG9jYXRpb25cbiAgICB9LCByZXN0KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSQxICE9PSBmb3J3YXJkUmVmJDEpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTmF2TGluay5kaXNwbGF5TmFtZSA9IFwiTmF2TGlua1wiO1xuICB2YXIgYXJpYUN1cnJlbnRUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFtcInBhZ2VcIiwgXCJzdGVwXCIsIFwibG9jYXRpb25cIiwgXCJkYXRlXCIsIFwidGltZVwiLCBcInRydWVcIl0pO1xuICBOYXZMaW5rLnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBMaW5rLnByb3BUeXBlcywge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50VHlwZSxcbiAgICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXItZG9tLmpzLm1hcFxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBSb3V0ZSwgUmVkaXJlY3QsIHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuY29uc3QgQXV0aCA9ICh7IGNvbXBvbmVudDogQ29tcG9uZW50LCBwYXRoLCBsb2dnZWRJbiwgZXhhY3QgfSkgPT4gKFxuICA8Um91dGVcbiAgICBwYXRoPXtwYXRofVxuICAgIGV4YWN0PXtleGFjdH1cbiAgICByZW5kZXI9e3Byb3BzID0+IHtcbiAgICAgIHJldHVybiAhbG9nZ2VkSW4gPyA8Q29tcG9uZW50IHsuLi5wcm9wc30gLz4gOiA8UmVkaXJlY3QgdG89XCIvZGFzaGJvYXJkXCIgLz5cbiAgfX0vPlxuKTtcbiAgXG5cbmNvbnN0IFByb3RlY3RlZCA9ICh7IGNvbXBvbmVudDogQ29tcG9uZW50LCBwYXRoLCBsb2dnZWRJbiwgZXhhY3QgfSkgPT4gKFxuICA8Um91dGUgcGF0aD17cGF0aH0gZXhhY3Q9e2V4YWN0fSByZW5kZXI9eyhwcm9wcykgPT4ge1xuICAgIHJldHVybiBsb2dnZWRJbiA/ICg8Q29tcG9uZW50IHsuLi5wcm9wc30gLz4pIDogKDxSZWRpcmVjdCB0bz1cIi9cIiAvPilcbiAgfX0vPlxuKTtcblxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiB7XG4gIHJldHVybiB7IGxvZ2dlZEluOiBCb29sZWFuKHN0YXRlLnNlc3Npb24uaWQpIH07XG59O1xuXG5leHBvcnQgY29uc3QgQXV0aFJvdXRlID0gd2l0aFJvdXRlcihcbiAgY29ubmVjdCggbWFwU3RhdGVUb1Byb3BzLG51bGwpKEF1dGgpKTtcblxuZXhwb3J0IGNvbnN0IFByb3RlY3RlZFJvdXRlID0gd2l0aFJvdXRlcihjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoUHJvdGVjdGVkKSk7IiwiaW1wb3J0ICogYXMgU2Vzc2lvbkFwaVV0aWwgZnJvbSAnLi4vdXRpbC9zZXNzaW9uX2FwaV91dGlsJztcblxuZXhwb3J0IGNvbnN0IFJFQ0VJVkVfQ1VSUkVOVF9VU0VSID0gJ1JFQ0VJVkVfQ1VSUkVOVF9VU0VSJztcbmV4cG9ydCBjb25zdCBMT0dPVVRfQ1VSUkVOVF9VU0VSID0gJ0xPR09VVF9DVVJSRU5UX1VTRVInO1xuZXhwb3J0IGNvbnN0IFJFQ0VJVkVfU0VTU0lPTl9FUlJPUlMgPSAnUkVDRUlWRV9TRVNTSU9OX0VSUk9SUyc7XG5leHBvcnQgY29uc3QgUkVNT1ZFX1NFU1NJT05fRVJST1IgPSAnUkVNT1ZFX1NFU1NJT05fRVJST1InO1xuXG5leHBvcnQgY29uc3QgcmVjZWl2ZUN1cnJlbnRVc2VyID0gdXNlciA9PiAoe1xuICAgIHR5cGU6IFJFQ0VJVkVfQ1VSUkVOVF9VU0VSLFxuICAgIHVzZXJcbn0pO1xuXG5leHBvcnQgY29uc3QgbG9nb3V0Q3VycmVudFVzZXIgPSAoKSA9PiAoe1xuICAgIHR5cGU6IExPR09VVF9DVVJSRU5UX1VTRVIsXG59KTtcblxuZXhwb3J0IGNvbnN0IHJlY2VpdmVFcnJvcnMgPSBlcnJvcnMgPT4gKHtcbiAgICB0eXBlOiBSRUNFSVZFX1NFU1NJT05fRVJST1JTLFxuICAgIGVycm9yc1xufSk7XG5cbmV4cG9ydCBjb25zdCByZW1vdmVFcnJvcnMgPSAoKSA9PiAoe1xuICAgIHR5cGU6IFJFTU9WRV9TRVNTSU9OX0VSUk9SLFxufSk7XG5cbmV4cG9ydCBjb25zdCBzaWdudXAgPSB1c2VyID0+IGRpc3BhdGNoID0+IChcbiAgU2Vzc2lvbkFwaVV0aWwuc2lnbnVwKHVzZXIpLnRoZW4odXNlciA9PiAoXG4gICAgICAgIGRpc3BhdGNoKHJlY2VpdmVDdXJyZW50VXNlcih1c2VyKSlcbiAgICApLCBlcnIgPT4gKFxuICAgICAgICBkaXNwYXRjaChyZWNlaXZlRXJyb3JzKGVyci5yZXNwb25zZUpTT04pKVxuICAgICkpXG4pO1xuXG5leHBvcnQgY29uc3QgbG9naW4gPSB1c2VyID0+IHtcbiAgICByZXR1cm4gZGlzcGF0Y2ggPT4ge1xuICAgICAgICByZXR1cm4gU2Vzc2lvbkFwaVV0aWwubG9naW4odXNlcilcbiAgICAgICAgLnRoZW4odXNlciA9PiB7XG4gICAgICAgICAgICBkaXNwYXRjaChyZWNlaXZlQ3VycmVudFVzZXIodXNlcikpXG4gICAgICAgIH0sZXJyID0+e1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHJlY2VpdmVFcnJvcnMoZXJyLnJlc3BvbnNlSlNPTikpXG4gICAgICAgIH0gKVxuICAgIH1cbn1cblxuXG5leHBvcnQgY29uc3QgbG9nb3V0ID0gKHVzZXIpID0+ICB7XG4gICAgcmV0dXJuIGRpc3BhdGNoID0+IHtcbiAgICAgIC8vIGRlYnVnZ2VyXG4gICAgICAgIHJldHVybiBTZXNzaW9uQXBpVXRpbC5sb2dvdXQodXNlcilcbiAgICAgICAgLnRoZW4odXNlciA9PiAoXG4gICAgICAgIGRpc3BhdGNoKGxvZ291dEN1cnJlbnRVc2VyKHVzZXIpKVxuICAgICAgICApKVxuICAgIH1cbn07XG4iLCJleHBvcnQgY29uc3QgbG9naW4gPSB1c2VyID0+IChcbiAgICAkLmFqYXgoe1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgdXJsOiAnL2FwaS9zZXNzaW9uJyxcbiAgICAgICAgZGF0YTogeyB1c2VyIH1cbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IHNpZ251cCA9IHVzZXIgPT4gKFxuICAgICQuYWpheCh7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICB1cmw6ICcvYXBpL3VzZXJzJyxcbiAgICAgICAgZGF0YTogeyB1c2VyIH1cbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IGxvZ291dCA9ICh1c2VyKSA9PiAoXG4gICAgJC5hamF4KHtcbiAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgdXJsOiAnL2FwaS9zZXNzaW9uJ1xuICAgIH0pXG4pO1xuXG4vLyBjb25zdCByZXF1ZXN0ID0gKGluZm8pID0+IHtcbi8vICAgcmV0dXJuICdpbmZvLm1ldGhvZCwgaW5mby51cmwsICcvJyAsIGluZm8uZGF0YSdcbi8vIH1cbiIsImltcG9ydCB7TGluaywgd2l0aFJvdXRlcn0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBOYXZiYXIgPSAocHJvcHMpID0+IHtcbiAgbGV0IEJ1dHRvbjtcbiAgaWYgKHByb3BzLmxvY2F0aW9uLnBhdGhuYW1lID09PSAnLycgfHwgcHJvcHMubG9jYXRpb24ucGF0aG5hbWUgPT09ICcvc2lnbnVwJyl7XG4gICAgQnV0dG9uID0gPExpbmsgdG89Jy9sb2dpbic+TG9nIEluPC9MaW5rPlxuICB9IGVsc2Uge1xuICAgIEJ1dHRvbiA9IDxMaW5rIHRvPVwiL3NpZ251cFwiPlNpZ24gVXA8L0xpbms+XG4gIH1cbiAgXG4gIHJldHVybihcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInNlc3Npb25faGVhZGVyXCI+XG4gICAgICAgIDxMaW5rIGNsYXNzTmFtZT0nbmF2X3Nlc3Npb25fbG9nb19oZWFkZXInIHRvPVwiL1wiPiBUUkFDRSA8L0xpbms+XG4gICAgICAgIDxMaW5rIGNsYXNzTmFtZT1cInNwbGFzaF9sb2dfaW5cIj57QnV0dG9ufTwvTGluaz4gXG4gICAgPC9kaXY+XG4gIClcbn0gXG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXIoTmF2YmFyKSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTmF2QmFyIGZyb20gJy4vbmF2X2JhcidcbmltcG9ydCB7IExpbmssIHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBSRU1PVkVfU0VTU0lPTl9FUlJPUiB9IGZyb20gJy4uLy4uL2FjdGlvbnMvc2Vzc2lvbl9hY3Rpb25zJztcblxuXG5jbGFzcyBTZXNzaW9uRm9ybSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBlbWFpbDogJycsXG4gICAgICBwYXNzd29yZDonJ1xuICAgIH1cbiAgICB0aGlzLmhhbmRsZVN1Ym1pdCA9IHRoaXMuaGFuZGxlU3VibWl0LmJpbmQodGhpcylcbiAgICB0aGlzLmhhbmRsZUNoYW5nZSA9IHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcylcbiAgICB0aGlzLnJlbmRlckVycm9ycyA9IHRoaXMucmVuZGVyRXJyb3JzLmJpbmQodGhpcylcbiAgfVxuXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKXtcbiAgICB0aGlzLnByb3BzLnJlbW92ZUVycm9ycygpOyAvLyBjbGVhciBlcnJvcnNcbiAgfVxuXG4gIGhhbmRsZVN1Ym1pdChlKXtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgdXNlciA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc3RhdGUpO1xuICAgIHRoaXMucHJvcHMucHJvY2Vzc0Zvcm0odXNlcilcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZShmaWVsZCl7XG4gICAgcmV0dXJuIGUgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7W2ZpZWxkXTogZS50YXJnZXQudmFsdWV9KVxuICAgIH1cbiAgfVxuXG5cbiAgcmVuZGVyRXJyb3JzKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8dWw+XG4gICAgICAgIHt0aGlzLnByb3BzLmVycm9ycy5tYXAoKGVycm9yLCBpKSA9PiAoXG4gICAgICAgICAgPGxpIGtleT17YGVycm9yLSR7aX1gfT5cbiAgICAgICAgICAgIHtlcnJvcn1cbiAgICAgICAgICA8L2xpPlxuICAgICAgICApKX1cbiAgICAgIDwvdWw+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpe1xuXG4gICAgY29uc3QgZXJyb3JzID0gdGhpcy5wcm9wcy5lcnJvcnMubWFwKGVycm9yID0+IHtcbiAgICAgIHJldHVybiAoPGxpPntlcnJvcn08L2xpPikgXG4gICAgfSlcblxuICAgIGNvbnN0IHNob3dFcnJvcnMgPSB0aGlzLnByb3BzLmVycm9ycy5sZW5ndGggPyA8dWwgPntlcnJvcnN9PC91bD4gOiBudWxsXG5cbiAgICBsZXQgYnV0dG9uTmFtZTtcbiAgICBpZiAodGhpcy5wcm9wcy5mb3JtVHlwZSA9PT0gJ2xvZ2luJykge1xuICAgICAgYnV0dG9uTmFtZSA9ICdMb2cgSW4nXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1dHRvbk5hbWUgPSBcIlNpZ24gVXBcIlxuICAgIH1cblxuXG4gICAgbGV0IGZvcm1OYW1lO1xuICAgIGlmICh0aGlzLnByb3BzLmZvcm1UeXBlID09PSAnbG9naW4nKXtcbiAgICAgIGZvcm1OYW1lID0gJ0xvZyBJbidcbiAgICB9IGVsc2Uge1xuICAgICAgZm9ybU5hbWUgPSBcIkpvaW4gVHJhY2UgdG9kYXksIGl0J3MgRnJlZS5cIlxuICAgIH1cblxuICAgIGxldCBPclN3aXRjaDtcbiAgICBpZih0aGlzLnByb3BzLmZvcm1UeXBlID09PSAnbG9naW4nKXtcbiAgICAgIE9yU3dpdGNoID0gJ09yIGxvZyBpbiB3aXRoIGVtYWlsJ1xuICAgIH0gZWxzZSB7XG4gICAgICBPclN3aXRjaCA9ICdvciBzaWduIHVwIHdpdGggeW91ciBlbWFpbCBhZGRyZXNzJ1xuICAgIH1cblxuICAgIGxldCBmaW5lUHJpbnQ7XG4gICAgaWYgKHRoaXMucHJvcHMuZm9ybVR5cGUgPT09ICdzaWdudXAnKSB7XG4gICAgICBmaW5lUHJpbnQgPSAnQnkgc2lnbmluZyB1cCBmb3IgVHJhY2UsIHlvdSBhZ3JlZSB0byB0aGUuVGVybXMgb2YgU2VydmljZS5WaWV3IG91ciBQcml2YWN5IFBvbGljeSdcbiAgICB9IFxuXG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPE5hdkJhci8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmFja2dyb3VuZF9pbWFnZVwiPlxuICAgICAgICAgXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtX2JhY2tncm91bmRcIj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPGJvZHkgY2xhc3NOYW1lPVwiZm9ybV9jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgey8qIDxzZWN0aW9uPlxuICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwic2Vzc2lvbl9pbWFnZVwiIC8+XG4gICAgICAgICAgICAgIDwvc2VjdGlvbj4gICAqL31cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtX3RpdGxlXCI+XG4gICAgICAgICAgICAgICAgPGgxID57Zm9ybU5hbWV9PC9oMT4gIFxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPSdlcnJvcl9tZXNzYWdlJz57c2hvd0Vycm9yc308L3NlY3Rpb24+XG4gICAgICAgICAgICAgIDxmb3JtIGNsYXNzTmFtZT1cInNlc3Npb25fZm9ybVwiIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdH0+XG4gICAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm1fYm9keVwiPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzZXNzaW9uX2Zvcm1fbGluZXNcIiBpZD1cInNlc3Npb25fZm9ybV9kZW1vXCIgb25DbGljaz17KCkgPT4geyB0aGlzLnByb3BzLmxvZ2luKHsgZW1haWw6ICdndWVzdCcsIHBhc3N3b3JkOidwYXNzd29yZCd9KX19PiBEZW1vIFVzZXIgPC9zcGFuPiBcbiAgICAgICAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJvclN3aXRjaFwiPntPclN3aXRjaH08L3NlY3Rpb24+ICAgIFxuICAgICAgICAgICAgICAgICAgPGJyLz4gXG4gICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwic2Vzc2lvbl9mb3JtX2xpbmVzXCIgY2xhc3NOYW1lPVwiZm9ybV9pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgdmFsdWU9e3RoaXMuc3RhdGUuZW1haWx9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZSgnZW1haWwnKX0gIHBsYWNlaG9sZGVyPXsnICAgICBZb3VyIEVtYWlsJ30vPlxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJzZXNzaW9uX2Zvcm1fbGluZXNcIiBjbGFzc05hbWU9XCJmb3JtX2lucHV0XCIgdHlwZT1cInBhc3N3b3JkXCIgdmFsdWU9e3RoaXMuc3RhdGUucGFzc3dvcmR9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZSgncGFzc3dvcmQnKX0gIHBsYWNlaG9sZGVyPXsnICAgICBQYXNzd29yZCd9Lz5cbiAgICAgICAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJzZXNzaW9uX2Zvcm1fbGluZXNcIiBpZD1cInNlc3Npb25fYnV0dG9uXCI+e2J1dHRvbk5hbWV9PC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+ICBcbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9J3Nlc3Npb25fZmluZV9wcmludCc+e2ZpbmVQcmludH08L3A+XG4gICAgICAgICAgICAgIDwvZm9ybT4gICAgXG4gICAgICAgICAgICA8L2JvZHk+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlc3Npb25Gb3JtOyIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVtb3ZlRXJyb3JzLCBzaWdudXAgLGxvZ2luIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9zZXNzaW9uX2FjdGlvbnMnO1xuaW1wb3J0IFNlc3Npb25Gb3JtIGZyb20gJy4vc2Vzc2lvbl9mb3JtJztcbi8vIGltcG9ydCB7IGxvZ2luIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9zZXNzaW9uX2FjdGlvbnMnO1xuXG5jb25zdCBtc3RwID0gKHsgZXJyb3JzIH0pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBlcnJvcnM6IE9iamVjdC52YWx1ZXMoZXJyb3JzLnNlc3Npb24pLFxuICAgIGZvcm1UeXBlOiAnc2lnbnVwJ1xuICB9XG59XG5jb25zdCBtZHRwID0gZGlzcGF0Y2ggPT4ge1xuICByZXR1cm4ge1xuICAgIHByb2Nlc3NGb3JtOiB1c2VyID0+IGRpc3BhdGNoKHNpZ251cCh1c2VyKSksXG4gICAgbG9naW46IHVzZXIgPT4gZGlzcGF0Y2gobG9naW4odXNlcikpLFxuICAgIHJlbW92ZUVycm9yczogKCkgPT4gZGlzcGF0Y2gocmVtb3ZlRXJyb3JzKCkpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtc3RwLCBtZHRwKShTZXNzaW9uRm9ybSkiLCJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IGxvZ2luLCByZW1vdmVFcnJvcnN9IGZyb20gJy4uLy4uL2FjdGlvbnMvc2Vzc2lvbl9hY3Rpb25zJztcbmltcG9ydCBTZXNzaW9uRm9ybSBmcm9tICcuL3Nlc3Npb25fZm9ybSc7XG5cbmNvbnN0IG1zdHAgPSAoeyBlcnJvcnMgfSkgPT4ge1xuICByZXR1cm4ge1xuICAgIGVycm9yczogT2JqZWN0LnZhbHVlcyhlcnJvcnMuc2Vzc2lvbiksXG4gICAgZm9ybVR5cGU6IGBsb2dpbmBcbiAgfVxufVxuY29uc3QgbWR0cCA9IGRpc3BhdGNoID0+IHtcbiAgcmV0dXJuIHtcbiAgICBwcm9jZXNzRm9ybTogdXNlciA9PiBkaXNwYXRjaChsb2dpbih1c2VyKSksXG4gICAgbG9naW46IHVzZXIgPT4gZGlzcGF0Y2gobG9naW4odXNlcikpLFxuICAgIHJlbW92ZUVycm9yczogKCkgPT4gZGlzcGF0Y2gocmVtb3ZlRXJyb3JzKCkpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtc3RwLG1kdHApKFNlc3Npb25Gb3JtKSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmNvbnN0IFNwbGFzaEZvb3RlciA9IChwcm9wcykgPT4ge1xuICByZXR1cm4oXG4gICAgPGRpdj5cbiAgICAgIDxoMT5cbiAgICAgICAgPGZvb3Rlcj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2Vzc2lvbl9mb290ZXJcIj5cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZm9vdGVyX2xvZ29cIj5UUkFDRTwvcD5cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyX3RvcF9saXN0XCI+VGVjaG5vbG9naWVzPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyX2xpc3RcIj5KYXZhU2NyaXB0PC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyX2xpc3RcIj5SdWJ5IG9uIFJhaWxzPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyX2xpc3RcIj5SZWFjdCAvIFJlZHV4PC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyX2xpc3RcIj5IVE1MIC8gQ1NTPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyX2xpc3RcIj5Qb3N0Z3JlU1FMPC9saT5cbiAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJmb290ZXJfdG9wX2xpc3RcIj5Tb2NpYWwgTWVkaWE8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJmb290ZXJfbGlzdFwiPiA8YSBocmVmPVwiaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL2dhYnJpZWwtcmVpdGVyLTczNTJiMmI3L1wiIHRhcmdldD1cIl9ibGFua1wiPiBMaW5rZWQtSW48L2E+PC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyX2xpc3RcIj48YSBocmVmPVwiaHR0cHM6Ly9hbmdlbC5jby91L2dhYnJpZWwtcmVpdGVyXCIgdGFyZ2V0PVwiX2JsYW5rXCI+QW5nZWwgTGlzdDwvYT48L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJmb290ZXJfbGlzdFwiPjxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vZ3JlaXRlcjE4XCIgdGFyZ2V0PVwiX2JsYW5rXCI+R2l0SHViPC9hPjwvbGk+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cImZvb3Rlcl9saXN0XCI+PGEgY2xhc3NOYW1lPVwiZm9vdGVyX2xpc3RcIiBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2dyZWl0ZXIxOC9UcmFjZVwiIHRhcmdldD1cIl9ibGFua1wiPkdpdEh1YiAtIFRyYWNlPC9hPjwvbGk+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyX3RvcF9saXN0XCI+R0VUIFNUQVJURUQ8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJmb290ZXJfbGlzdFwiPjxMaW5rIHRvPVwiL3NpZ251cFwiPlNJR04gVVA8L0xpbms+PC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyX2xpc3RcIj48TGluayB0bz1cIi9sb2dpblwiPkxPRyBJTjwvTGluaz48L2xpPiBcbiAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZm9vdGVyPlxuICAgICAgPC9oMT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBTcGxhc2hGb290ZXI7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBOYXZiYXIgZnJvbSAnLi9uYXZfYmFyJztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgU3BsYXNoRm9vdGVyIGZyb20gJy4uL2Zvb3Rlci9zcGxhc2hfZm9vdGVyJ1xuXG5cbmNsYXNzIFNwbGFzaCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIFxuICBjb21wb25lbnREaWRNb3VudCgpe1xuICAgIHRoaXMucHJvcHMuY2xlYXJSb3V0ZXMoKTtcbiAgICB0aGlzLnByb3BzLmNsZWFyV29ya291dHMoKTtcbiAgfVxuICByZW5kZXIoKXtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPE5hdmJhci8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BsYXNoX2Zvcm1cIj5cbiAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwiaGVhZExpbmVcIj5UaGUgIzEgYXBwIGZvciBydW5uZXJzIGFuZCBjeWNsaXN0czwvaDE+XG4gICAgICAgICAgPGJyLz5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BsYXNoX21pZGRsZVwiPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImhvbWVfaW1hZ2VcIiBzcmM9XCJodHRwczovL2Qzbm44MnVheGlqcG02LmNsb3VkZnJvbnQubmV0L2Fzc2V0cy93ZWJzaXRlL3Nob3dfc2ltcGxlL2RldmljZXMtaGVhZGVyLTMzNDkzMjBmYTg0OWU2YTI5N2EzYjBkNjRhNmRmZGVmNzMwN2IwZmU1MGY2MzI5YTQ1OWEwMTA1Yjc2ZmZmZjguanBnXCIgLz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BsYXNoX2NlbnRlcl9mb3JtXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BsYXNoX21haW5fZm9ybVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BsYXNoX2NlbnRlcl9mb3JtX2J1dHRvbnNcIj5cbiAgICAgICAgICAgICAgICAgIDxMaW5rIGNsYXNzTmFtZT1cInNwbGFzaF9idXR0b25zXCIgaWQ9XCJzaWduX3VwX2J1dHRvblwiIHRvPVwiL3NpZ251cFwiPlNpZ24gVXA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3ItYm94XCI+XG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwib3JfYm94X2xpbmVcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwib3JfYm94X29yXCI+IG9yIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJvcl9ib3hfbGluZVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cInNwbGFzaF9idXR0b25zXCIgaWQ9XCJzcGxhc2hfZGVtb19idXR0b25cIiBvbkNsaWNrPXsoKSA9PiB7IHRoaXMucHJvcHMubG9naW4oeyBlbWFpbDogJ2d1ZXN0JywgcGFzc3dvcmQ6ICdwYXNzd29yZCcgfSkgfX0+RGVtbyBVc2VyIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGxhc2hfZmluZV9wcmludFwiPlxuICAgICAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICAgICAgICA8c3Bhbj5CeSBzaWduaW5nIHVwIGZvciBUcmFjZSwgeW91IGFncmVlIHRvIHRoZSBUZXJtcyBvZiBTZXJ2aWNlLiBWaWV3IG91ciBQcml2YWN5IFBvbGljeS48L3NwYW4+IFxuICAgICAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJhbHJlYWR5X2FfbWVtYmVyXCI+QWxyZWFkeSBhIG1lbWJlcj8gPExpbmsgY2xhc3NOYW1lPVwibWVtYmVyX2xpbmtcIiB0bz1cIi9sb2dpblwiPkxvZyBJbjwvTGluaz48L3NwYW4+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8YnIvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7LyogPGZvb3Rlcj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2Vzc2lvbl9mb290ZXJcIj5cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZm9vdGVyX2xvZ29cIj5UUkFDRTwvcD5cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyX3RvcF9saXN0XCI+VGVjaG5vbG9naWVzPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyX2xpc3RcIj5KYXZhU2NyaXB0PC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyX2xpc3RcIj5SdWJ5IG9uIFJhaWxzPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyX2xpc3RcIj5SZWFjdCAvIFJlZHV4PC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyX2xpc3RcIj5IVE1MIC8gQ1NTPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyX2xpc3RcIj5Qb3N0Z3JlU1FMPC9saT5cbiAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJmb290ZXJfdG9wX2xpc3RcIj5Tb2NpYWwgTWVkaWE8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJmb290ZXJfbGlzdFwiPiA8YSBocmVmPVwiaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL2dhYnJpZWwtcmVpdGVyLTczNTJiMmI3L1wiIHRhcmdldD1cIl9ibGFua1wiPiBMaW5rZWQtSW48L2E+PC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyX2xpc3RcIj48YSBocmVmPVwiaHR0cHM6Ly9hbmdlbC5jby91L2dhYnJpZWwtcmVpdGVyXCIgdGFyZ2V0PVwiX2JsYW5rXCI+QW5nZWwgTGlzdDwvYT48L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJmb290ZXJfbGlzdFwiPjxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vZ3JlaXRlcjE4XCIgdGFyZ2V0PVwiX2JsYW5rXCI+R2l0SHViPC9hPjwvbGk+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cImZvb3Rlcl9saXN0XCI+PGEgY2xhc3NOYW1lPVwiZm9vdGVyX2xpc3RcIiBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2dyZWl0ZXIxOC9UcmFjZVwiIHRhcmdldD1cIl9ibGFua1wiPkdpdEh1YiAtIFRyYWNlPC9hPjwvbGk+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyX3RvcF9saXN0XCI+R0VUIFNUQVJURUQ8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJmb290ZXJfbGlzdFwiPjxMaW5rIHRvPVwiL3NpZ251cFwiPlNJR04gVVA8L0xpbms+PC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyX2xpc3RcIj48TGluayB0bz1cIi9sb2dpblwiPkxPRyBJTjwvTGluaz48L2xpPiBcbiAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZm9vdGVyPiAqL31cbiAgICAgICAgICA8U3BsYXNoRm9vdGVyLz5cbiAgICAgIDwvZGl2PlxuICAgICkgIFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNwbGFzaDsiLCJleHBvcnQgY29uc3QgY3JlYXRlUm91dGUgPSByb3V0ZSA9PiB7XG4gIHJldHVybiAkLmFqYXgoe1xuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgdXJsOiBgL2FwaS91c2Vycy8ke3JvdXRlLnVzZXJfaWR9L3JvdXRlc2AsXG4gICAgZGF0YTogeyByb3V0ZSB9XG4gIH0pXG59O1xuXG5cbmV4cG9ydCBjb25zdCB1cGRhdGVSb3V0ZSA9IHJvdXRlID0+IHtcbiAgLy8gZGVidWdnZXJcbiAgcmV0dXJuICQuYWpheCh7XG4gICAgbWV0aG9kOiBcIlBBVENIXCIsXG4gICAgdXJsOiBgL2FwaS9yb3V0ZXMvJHtyb3V0ZS5pZH1gLFxuICAgIGRhdGE6IHsgcm91dGUgfVxuICB9KVxufTtcblxuZXhwb3J0IGNvbnN0IGZldGNoUm91dGUgPSBpZCA9PiAoXG4gICQuYWpheCh7XG4gICAgbWV0aG9kOiBcIkdldFwiLFxuICAgIHVybDogYC9hcGkvcm91dGVzLyR7aWR9YCxcbiAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBmZXRjaFJvdXRlcyA9IChpZCkgPT4gKFxuICAkLmFqYXgoe1xuICAgIG1ldGhvZDogXCJHZXRcIixcbiAgICB1cmw6IGAvYXBpL3VzZXJzLyR7aWR9L3JvdXRlc2AsXG4gIH0pXG4pO1xuZXhwb3J0IGNvbnN0IGRlbGV0ZVJvdXRlID0gKHJvdXRlSWQpID0+IHtcbiAgZGVidWdnZXJcbiAgcmV0dXJuICQuYWpheCh7XG4gICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgIHVybDogYC9hcGkvcm91dGVzLyR7cm91dGVJZH1gLFxuICB9KVxufTtcbiIsImltcG9ydCAqIGFzIFJvdXRlc0FwaVV0aWwgZnJvbSAnLi4vdXRpbC9yb3V0ZV9hcGlfdXRpbCc7XG5cbmV4cG9ydCBjb25zdCBSRUNFSVZFX1JPVVRFID0gJ1JFQ0VJVkVfUk9VVEUnO1xuZXhwb3J0IGNvbnN0IFJFQ0VJVkVfQUxMX1JPVVRFUyA9ICdSRUNFSVZFX0FMTF9ST1VURVMnO1xuZXhwb3J0IGNvbnN0IFJFTU9WRV9ST1VURSA9ICdSRU1PVkVfUk9VVEUnO1xuZXhwb3J0IGNvbnN0IENMRUFSX1JPVVRFUyA9ICdDTEVBUl9ST1VURVMnO1xuXG5cbmV4cG9ydCBjb25zdCByZWNlaXZlUm91dGUgPSByb3V0ZSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogUkVDRUlWRV9ST1VURSxcbiAgICByb3V0ZVxuICB9XG59XG5leHBvcnQgY29uc3QgcmVjZWl2ZVJvdXRlcyA9IHJvdXRlcyA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogUkVDRUlWRV9BTExfUk9VVEVTLFxuICAgIHJvdXRlc1xuICB9XG59XG5leHBvcnQgY29uc3QgcmVtb3ZlUm91dGUgPSByb3V0ZUlkID0+IHtcbiAgLy8gZGVidWdnZXJcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSRU1PVkVfUk9VVEUsXG4gICAgcm91dGVJZFxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBjbGVhclJvdXRlcyA9ICgpID0+IHtcblx0cmV0dXJuIHtcblx0XHR0eXBlOiBDTEVBUl9ST1VURVMsXG5cdH07XG59O1xuXG5leHBvcnQgY29uc3QgZmV0Y2hSb3V0ZSA9IChyb3V0ZUlkKSA9PiB7XG4gIHJldHVybiBkaXNwYXRjaCA9PiB7XG4gICAgcmV0dXJuIFJvdXRlc0FwaVV0aWwuZmV0Y2hSb3V0ZShyb3V0ZUlkKVxuICAgICAgLnRoZW4ocm91dGUgPT4ge1xuICAgICAgICBkaXNwYXRjaChyZWNlaXZlUm91dGUocm91dGUpKVxuICAgICAgfSlcbiAgfVxufVxuZXhwb3J0IGNvbnN0IGZldGNoUm91dGVzID0gKHVzZXJfaWQpID0+IHtcbiAgLy8gZGVidWdnZXJcbiAgcmV0dXJuIGRpc3BhdGNoID0+IHtcbiAgICByZXR1cm4gUm91dGVzQXBpVXRpbC5mZXRjaFJvdXRlcyh1c2VyX2lkKVxuICAgICAgLnRoZW4ocm91dGVzID0+IHtcbiAgICAgICAgZGlzcGF0Y2gocmVjZWl2ZVJvdXRlcyhyb3V0ZXMpKVxuICAgICAgfSlcbiAgfVxufVxuZXhwb3J0IGNvbnN0IGNyZWF0ZVJvdXRlID0gKHJvdXRlKSA9PiB7XG4gIHJldHVybiBkaXNwYXRjaCA9PiB7XG4gICAgcmV0dXJuIFJvdXRlc0FwaVV0aWwuY3JlYXRlUm91dGUocm91dGUpXG4gICAgICAudGhlbihuZXdSb3V0ZSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHJlY2VpdmVSb3V0ZShuZXdSb3V0ZSkpXG4gICAgICB9KVxuICB9XG59XG5leHBvcnQgY29uc3QgdXBkYXRlUm91dGUgPSAocm91dGUpID0+IHtcbiAgcmV0dXJuIGRpc3BhdGNoID0+IHtcbiAgICByZXR1cm4gUm91dGVzQXBpVXRpbC51cGRhdGVSb3V0ZShyb3V0ZSlcbiAgICAgIC50aGVuKHVwUm91dGUgPT4ge1xuICAgICAgICBkaXNwYXRjaChyZWNlaXZlUm91dGUodXBSb3V0ZSkpXG4gICAgICB9KVxuICB9XG59XG5leHBvcnQgY29uc3QgZGVsZXRlUm91dGUgPSAocm91dGVJZCkgPT4ge1xuICAvLyBkZWJ1Z2dlclxuICByZXR1cm4gZGlzcGF0Y2ggPT4ge1xuICAgIHJldHVybiBSb3V0ZXNBcGlVdGlsLmRlbGV0ZVJvdXRlKHJvdXRlSWQpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIC8vIGRlYnVnZ2VyXG4gICAgICAgIGRpc3BhdGNoKHJlbW92ZVJvdXRlKHJvdXRlSWQpKVxuICAgICAgfSlcbiAgfVxufSIsImltcG9ydCAqIGFzIFdvcmtvdXRBcGlVdGlsIGZyb20gJy4uL3V0aWwvd29ya291dF9hcGlfdXRpbCc7XG5cbmV4cG9ydCBjb25zdCBSRUNFSVZFX1dPUktPVVQgPSAnUkVDRUlWRV9DVVJSRU5UX1dPUktPVVQnO1xuZXhwb3J0IGNvbnN0IFJFQ0VJVkVfQUxMX1dPUktPVVRTID0gJ1JFQ0VJVkVfQUxMX1dPUktPVVRTJztcbmV4cG9ydCBjb25zdCBSRU1PVkVfV09SS09VVCA9ICdSRU1PVkVfV09SS09VVCc7XG5leHBvcnQgY29uc3QgQ0xFQVJfV09SS09VVFMgPSAnQ0xFQVJfV09SS09VVFMnO1xuXG5cbmV4cG9ydCBjb25zdCByZWNlaXZlV29ya291dCA9IHdvcmtvdXQgPT4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFJFQ0VJVkVfV09SS09VVCxcbiAgICB3b3Jrb3V0XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHJlY2VpdmVXb3Jrb3V0cyA9IHdvcmtvdXRzID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSRUNFSVZFX0FMTF9XT1JLT1VUUyxcbiAgICB3b3Jrb3V0c1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCByZW1vdmVXb3Jrb3V0ID0gd29ya291dElkID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSRU1PVkVfV09SS09VVCxcbiAgICB3b3Jrb3V0SWRcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgY2xlYXJXb3Jrb3V0cyA9ICgpID0+IHtcblx0cmV0dXJuIHtcblx0XHR0eXBlOiBDTEVBUl9XT1JLT1VUUyxcblx0fTtcbn07XG5cblxuZXhwb3J0IGNvbnN0IGZldGNoV29ya291dCA9ICh3b3Jrb3V0SWQpID0+IHtcbiAgcmV0dXJuIGRpc3BhdGNoID0+IHtcbiAgICByZXR1cm4gV29ya291dEFwaVV0aWwuZmV0Y2hXb3Jrb3V0KHdvcmtvdXRJZClcbiAgICAgIC50aGVuKHdvcmtvdXQgPT4ge1xuICAgICAgICBkaXNwYXRjaChyZWNlaXZlV29ya291dCh3b3Jrb3V0KSlcbiAgICAgIH0pXG4gIH1cbn1cbmV4cG9ydCBjb25zdCBmZXRjaFdvcmtvdXRzID0gKHVzZXJfaWQpID0+IHtcbiAgcmV0dXJuIGRpc3BhdGNoID0+IHtcbiAgICByZXR1cm4gV29ya291dEFwaVV0aWwuZmV0Y2hXb3Jrb3V0cyh1c2VyX2lkKVxuICAgICAgLnRoZW4od29ya291dHMgPT4ge1xuICAgICAgICBkaXNwYXRjaChyZWNlaXZlV29ya291dHMod29ya291dHMpKVxuICAgICAgfSlcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlV29ya291dCA9ICh3b3Jrb3V0KSA9PiB7XG4gIHJldHVybiBkaXNwYXRjaCA9PiB7XG4gICAgcmV0dXJuIFdvcmtvdXRBcGlVdGlsLmNyZWF0ZVdvcmtvdXQod29ya291dClcbiAgICAgIC50aGVuKG5ld1dvcmtvdXQgPT4ge1xuICAgICAgICBkaXNwYXRjaChyZWNlaXZlV29ya291dChuZXdXb3Jrb3V0KSlcbiAgICAgIH0pXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHVwZGF0ZVdvcmtvdXQgPSAod29ya291dCkgPT4ge1xuICAvLyBkZWJ1Z2dlclxuICByZXR1cm4gZGlzcGF0Y2ggPT4ge1xuICAgIHJldHVybiBXb3Jrb3V0QXBpVXRpbC51cGRhdGVXb3Jrb3V0KHdvcmtvdXQpXG4gICAgICAudGhlbih1cFdvcmtvdXQgPT4ge1xuICAgICAgICAvLyBkZWJ1Z2dlclxuICAgICAgICBkaXNwYXRjaChyZWNlaXZlV29ya291dCh1cFdvcmtvdXQpKVxuICAgICAgfSlcbiAgfVxufVxuZXhwb3J0IGNvbnN0IGRlbGV0ZVdvcmtvdXQgPSAod29ya291dElkKSA9PiB7XG4gIHJldHVybiBkaXNwYXRjaCA9PiB7XG4gICAgLy8gZGVidWdnZXJcbiAgICByZXR1cm4gV29ya291dEFwaVV0aWwuZGVsZXRlV29ya291dCh3b3Jrb3V0SWQpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIC8vIGRlYnVnZ2VyXG4gICAgICAgIGRpc3BhdGNoKHJlbW92ZVdvcmtvdXQod29ya291dElkKSlcbiAgICAgIH0pXG4gIH1cbn0iLCJleHBvcnQgY29uc3QgY3JlYXRlV29ya291dCA9ICh3b3Jrb3V0LCBjdXJyZW50VXNlcikgPT4ge1xuIHJldHVybiAkLmFqYXgoe1xuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgdXJsOiBgL2FwaS91c2Vycy8ke2N1cnJlbnRVc2VyfS93b3Jrb3V0c2AsXG4gICAgZGF0YToge3dvcmtvdXR9XG4gIH0pXG59O1xuXG5cbmV4cG9ydCBjb25zdCB1cGRhdGVXb3Jrb3V0ID0gKHdvcmtvdXQpPT4ge1xuICByZXR1cm4gJC5hamF4KHtcbiAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICB1cmw6IGAvYXBpL3dvcmtvdXRzLyR7d29ya291dC5pZH1gLFxuICAgIGRhdGE6IHsgd29ya291dCB9XG4gIH0pXG59O1xuXG5leHBvcnQgY29uc3QgZmV0Y2hXb3Jrb3V0ID0gaWQgPT4gKFxuICQuYWpheCh7XG4gICAgbWV0aG9kOiBcIkdldFwiLFxuICAgIHVybDogYC9hcGkvd29ya291dHMvJHtpZH1gLFxuICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IGZldGNoV29ya291dHMgPSAoaWQpID0+IChcbiAkLmFqYXgoe1xuICAgIG1ldGhvZDogXCJHZXRcIixcbiAgICB1cmw6IGAvYXBpL3VzZXJzLyR7aWR9L3dvcmtvdXRzYCxcbiAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBkZWxldGVXb3Jrb3V0ID0gKHdvcmtvdXRJZCkgPT4ge1xuICAvLyBkZWJ1Z2dlclxuIHJldHVybiAkLmFqYXgoe1xuICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICB1cmw6IGAvYXBpL3dvcmtvdXRzLyR7d29ya291dElkfWAsXG4gIH0pXG59O1xuIiwiaW1wb3J0IFNwbGFzaCBmcm9tIFwiLi9zcGxhc2hcIlxuaW1wb3J0IHsgbG9naW4gfSBmcm9tICcuLi8uLi9hY3Rpb25zL3Nlc3Npb25fYWN0aW9ucyc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCJcbmltcG9ydCB7Y2xlYXJSb3V0ZXN9IGZyb20gJy4uLy4uL2FjdGlvbnMvcm91dGVzX2FjdGlvbidcbmltcG9ydCB7Y2xlYXJXb3Jrb3V0c30gZnJvbSAnLi4vLi4vYWN0aW9ucy93b3Jrb3V0X2FjdGlvbnMnXG5cblxuY29uc3QgbXN0cCA9IChzdG9yZSwgb3duUHJvcHMpID0+IHtcbiAgcmV0dXJue31cbn1cblxuY29uc3QgbWR0cCA9IGRpc3BhdGNoID0+IHtcbiAgcmV0dXJuIHtcbiAgICBsb2dpbjogdXNlciA9PiBkaXNwYXRjaChsb2dpbih1c2VyKSksXG4gICAgY2xlYXJSb3V0ZXM6ICgpID0+IGRpc3BhdGNoKGNsZWFyUm91dGVzKCkpLFxuICAgIGNsZWFyV29ya291dHM6ICgpID0+IGRpc3BhdGNoKGNsZWFyV29ya291dHMoKSksXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtc3RwLG1kdHApKFNwbGFzaCkiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBMaW5rLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmNvbnN0IE1haW5OYXYgPSAoe2xvZ291dH0pID0+IHtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibWFpbl9uYXZfaGVhZFwiPiBcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmF2LWxlZnRcIj5cbiAgICAgICAgPExpbmsgY2xhc3NOYW1lPSduYXZfbWFpbl9sb2dvJyB0bz1cIi9kYXNoYm9hcmRcIj4gVFJBQ0UgPC9MaW5rPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duXCIgaWQ9XCJkYXNoYm9hcmREcm9wZG93blwiPlxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiZHJvcGJ0blwiPkRhc2hib2FyZCAgPGkgY2xhc3M9XCJmYSBmYS1jaGV2cm9uLWRvd25cIiBhcmlhLWhpZGRlbj1cInRydWVcIj4gPC9pPjwvYnV0dG9uPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd25fY29udGVudFwiPlxuICAgICAgICAgICAgPExpbmsgdG89XCIvZGFzaGJvYXJkXCI+QWN0aXZpdHkgRmVlZDwvTGluaz5cbiAgICAgICAgICAgIDxMaW5rIHRvPVwiL3dvcmtvdXRzXCI+TXkgV29ya291dHM8L0xpbms+XG4gICAgICAgICAgICA8TGluayB0bz1cIi9yb3V0ZXNcIj5NeSBSb3V0ZXM8L0xpbms+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5hdi1yaWdodFwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duXCIgPlxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiZHJvcGJ0blwiPjxpIGlkPVwibmF2VXNlclwiY2xhc3M9XCJmYXIgZmEtdXNlci1jaXJjbGVcIj48L2k+IDxpIGNsYXNzPVwiZmEgZmEtY2hldnJvbi1kb3duXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd25fY29udGVudFwiIGlkPVwibG9nT3V0X2Ryb3Bkb3duXCI+XG4gICAgICAgICAgICA8YSBvbkNsaWNrPXtsb2dvdXR9PkxvZyBPdXQ8L2E+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duXCI+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJkcm9wYnRuXCI+PGkgaWQ9XCJuYXZDcm9zc1wiY2xhc3NOYW1lPVwiZmFzIGZhLXBsdXMtY2lyY2xlXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd25fY29udGVudFwiIGlkPVwiY3JlYXRlX2Ryb3Bkb3duXCI+XG4gICAgICAgICAgICA8TGluayB0bz0nL25ldy9yb3V0ZXMnPiA8aSBjbGFzc05hbWU9XCJmYXMgZmEtYW5nbGUtdXBcIj48L2k+ICBDcmVhdGUgUm91dGU8L0xpbms+XG4gICAgICAgICAgICA8TGluayB0bz0nL25ldy93b3Jrb3V0cyc+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLWFycm93LWNpcmNsZS11cFwiPjwvaT4gIENyZWF0ZSBXb3Jrb3V0PC9MaW5rPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj4gIFxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFpbk5hdjtcblxuXG4vLyBjb25zdCBhZGQ1ID0gbmFtZSA9PiB7XG4vLyAgIHJldHVybiBkaWZmZXJlbnRGdW5jdGlvbigpXG4vLyB9XG5cbi8vIGNvbnN0IGRpZmZlcmVudEZ1bmN0aW9uID0gKG5hbWUpID0+IHsgLy8gY29tcG9uZW50XG4vLyAgIGNvbnNvbGUubG9nKCdIZXkgaW0gZGlmZmVyZW50Jylcbi8vIH0iLCJpbXBvcnQgTWFpbk5hdiBmcm9tICcuL21haW5fbmF2JztcbmltcG9ydCB7IGxvZ291dCB9IGZyb20gJy4uLy4uL2FjdGlvbnMvc2Vzc2lvbl9hY3Rpb25zJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmNvbnN0IG1zdHAgPSAoeyBzZXNzaW9uLCBlbnRpdGllczogeyB1c2VycyB9IH0pID0+IHtcbiAgcmV0dXJue1xuICAgIGN1cnJlbnRVc2VyOiB1c2Vyc1tzZXNzaW9uLmlkXVxuICB9XG59XG5cbmNvbnN0IG1kdHAgPSBkaXNwYXRjaCA9PiB7XG4gIHJldHVybiB7XG4gICAgbG9nb3V0OiAoKSA9PiBkaXNwYXRjaChsb2dvdXQoKSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1zdHAsIG1kdHApKE1haW5OYXYpO1xuXG5cbnsvKiA8TWFpbk5hdiBzb21lUHJvcD17c29tZVByb3B9Lz5cbjxNYWluTmF2IGxvZ291dD17bG9nb3V0fS8+ICovfSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmNvbnN0IFByb2ZpbGUgPSAocHJvcHMpID0+IHtcblxuICByZXR1cm4oXG4gICAgPGRpdiBjbGFzc05hbWU9XCJtYWluX3Byb2ZpbGVcIj5cbiAgICAgIDxpIGlkPVwicHJvZmlsZVVzZXJcImNsYXNzTmFtZT1cImZhcyBmYS11c2VyLWNpcmNsZVwiPjwvaT5cbiAgICAgIDxib2R5IGlkPVwicHJvZmlsZUJvZHlcIj5cbiAgICAgICAgPGgxIGNsYXNzTmFtZT1cInByb2ZpbGVfZW1haWxcIj57cHJvcHMuZW1haWx9PC9oMT5cbiAgICAgICAgPGJyLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9maWxlX3RvdGFsc1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSd0b3RhbF9hY3Rpdml0aWVzJz5cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInByb2ZpbGVfY2F0ZWdvcnlcIj5Xb3Jrb3V0czwvcD5cbiAgICAgICAgICAgIDxMaW5rIHRvPScvd29ya291dHMnIGNsYXNzTmFtZT1cInRvdGFsX251bWJlclwiPntwcm9wcy53b3Jrb3V0Q291bnQgfHwgMH08L0xpbms+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3RvdGFsX3JvdXRlcyc+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJwcm9maWxlX2NhdGVnb3J5XCI+Um91dGVzPC9wPlxuICAgICAgICAgICAgPExpbmsgdG89Jy9yb3V0ZXMnIGNsYXNzTmFtZT1cInRvdGFsX251bWJlclwiPntwcm9wcy5yb3V0ZUNvdW50IHx8IDAgfTwvTGluaz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2JvZHk+XG4gICAgPC9kaXY+XG4gIClcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFByb2ZpbGU7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IExpbmssIFJvdXRlIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cblxuY29uc3QgRmVlZCA9ICh7d29ya291dCwgZW1haWwsIHJvdXRlfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgaWQ9XCJmZWVkQ2FyZFwiPlxuICAgICAgPGRpdiBpZD1cImZlZWRDYXJkVG9wXCI+XG4gICAgICAgIDxpIGlkPVwicnVubmVySWNvblwiY2xhc3NOYW1lPVwiZmFzIGZhLXVzZXItY2lyY2xlXCI+PC9pPlxuICAgICAgICA8aDEgaWQ9XCJmZWVkRW1haWxcIj4ge2VtYWlsfTwvaDE+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgaWQ9XCJmZWVkQ2FyZE1pZFwiPiBcbiAgICAgICAgPGkgaWQ9XCJwZXJzb25SdW5uaW5nXCJjbGFzc05hbWU9XCJmYXMgZmEtcnVubmluZ1wiPjwvaT5cbiAgICAgICAgPExpbmsgdG89e2Avd29ya291dHMvJHt3b3Jrb3V0LmlkfWB9IGlkPVwiZmVlZFRpdGxlXCI+IHt3b3Jrb3V0Py50aXRsZX08L0xpbms+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxoMSBpZD1cImZlZWREZXNjcmlwdGlvblwiPiB7d29ya291dD8uZGVzY3JpcHRpb259PC9oMT5cbiAgICAgIDxkaXYgaWQ9XCJmZWVkQ2FyZE1pZFwiPlxuICAgICAgICA8ZGl2IGlkPSdmZWVkVGltZSc+XG4gICAgICAgICAgPGgxIGlkPSdmZWVkVGltZVRpbWUnPlRpbWU8L2gxPlxuICAgICAgICAgIDxoMSBpZD0nZmVlZFRpbWVudW1zJz4ge3dvcmtvdXQ/LmhvdXJzfWgge3dvcmtvdXQ/Lm1pbnV0ZXN9bSB7d29ya291dD8uc2Vjb25kc31zPC9oMT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8aSBpZD0ndHJvcGh5J2NsYXNzPVwiZmFzIGZhLXRyb3BoeVwiPjwvaT5cbiAgICAgIDwvZGl2PlxuICAgICAgPExpbmsgdG89e2Avd29ya291dHMvJHt3b3Jrb3V0LmlkfWB9ID48aW1nIGlkPVwicm91dGVmZWVkSW1hZ2VcIiBcbiAgICAgICAgICBzcmM9e3JvdXRlW3dvcmtvdXQucm91dGVfaWRdLmltYWdlfSBhbHQ9XCJyb3V0ZSBpbWFnZVwiXG4gICAgICAvPlxuICAgICAgPC9MaW5rPiBcbiAgICAgIHsvKiB7Y29uc29sZS5sb2coJy0tLS0tLS0tLS0tLS1mZWVkJyx3b3Jrb3V0LmlkKX0gKi99XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgRmVlZDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5jb25zdCBNYWluRm9vdGVyID0gKHByb3BzKSA9PiB7XG4gIHJldHVybihcbiAgICA8ZGl2PlxuICAgICAgICA8Zm9vdGVyIGlkPVwiZm9vdGVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1haW5fZm9vdGVyXCI+XG4gICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICA8bGk+PExpbmsgdG89Jy9kYXNoYm9hcmQnIGNsYXNzTmFtZT1cIm1haW5fZm9vdGVyX2xvZ29cIj5UUkFDRTwvTGluaz4gIDwvbGk+IFxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJtYWluX2Zvb3Rlcl9saXN0XCI+PGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9ncmVpdGVyMTgvVHJhY2VcIiB0YXJnZXQ9XCJfYmxhbmtcIj5HaXRIdWIgLSBUcmFjZTwvYT48L2xpPlxuICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm1haW5fZm9vdGVyX3RvcF9saXN0XCI+VGVjaG5vbG9naWVzPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibWFpbl9mb290ZXJfbGlzdFwiPkphdmFTY3JpcHQ8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJtYWluX2Zvb3Rlcl9saXN0XCI+UnVieSBvbiBSYWlsczwvbGk+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm1haW5fZm9vdGVyX2xpc3RcIj5SZWFjdCAvIFJlZHV4PC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibWFpbl9mb290ZXJfbGlzdFwiPkhUTUwgLyBDU1M8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJtYWluX2Zvb3Rlcl9saXN0XCI+UG9zdGdyZVNRTDwvbGk+XG4gICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibWFpbl9mb290ZXJfdG9wX2xpc3RcIiBpZD1cImZvb3Rlcl9saW5rc1wiPkFib3V0IE1lPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibWFpbl9mb290ZXJfbGlzdFwiPiA8YSBocmVmPVwiaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL2dhYnJpZWwtcmVpdGVyLTczNTJiMmI3L1wiIHRhcmdldD1cIl9ibGFua1wiPiBMaW5rZWQtSW48L2E+PC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibWFpbl9mb290ZXJfbGlzdFwiPjxhIGhyZWY9XCJodHRwczovL2FuZ2VsLmNvL3UvZ2FicmllbC1yZWl0ZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIj5BbmdlbCBMaXN0PC9hPjwvbGk+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm1haW5fZm9vdGVyX2xpc3RcIj48YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2dyZWl0ZXIxOFwiIHRhcmdldD1cIl9ibGFua1wiPkdpdEh1YjwvYT48L2xpPlxuICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9mb290ZXI+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFpbkZvb3RlcjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBNYWluTmF2Q29udGFpbmVyIGZyb20gJy4uL21haW5OYXYvbWFpbl9uYXZfY29udGFpbmVyJ1xuaW1wb3J0IFByb2ZpbGUgZnJvbSAnLi9wcm9maWxlJztcbmltcG9ydCBGZWVkIGZyb20gJy4vZmVlZCdcbmltcG9ydCBNYWluRm9vdGVyIGZyb20gJy4uL2Zvb3Rlci9tYWluX2Zvb3RlcidcblxuY2xhc3MgRGFzaGJvYXJkIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50eyBcbiAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgIHN1cGVyKHByb3BzKVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKXtcbiAgICB0aGlzLnByb3BzLmZldGNoV29ya291dHModGhpcy5wcm9wcz8uc2Vzc2lvbi5pZClcbiAgICB0aGlzLnByb3BzLmZldGNoUm91dGVzKHRoaXMucHJvcHM/LnNlc3Npb24uaWQpXG4gIH1cblxuICByZW5kZXIoKXtcbiAgICAgIGNvbnN0IHdvcmtvdXRMaXN0ID0gdGhpcy5wcm9wcy53b3Jrb3V0cyAhPT0gdW5kZWZpbmVkID8gdGhpcy5wcm9wcy53b3Jrb3V0cy5tYXAod29ya291dCA9PiB7XG4gICAgICAgIHJldHVybiA8bGkgY2xhc3NOYW1lPVwiZmVlZFwiPjxGZWVkIHdvcmtvdXQ9e3dvcmtvdXR9IGVtYWlsPXt0aGlzLnByb3BzLmVtYWlsfSByb3V0ZT17dGhpcy5wcm9wcy5yb3V0ZX0vPjwvbGk+XG4gICAgICB9KSA6bnVsbCBcblxuICAgICAgLy8gY29uc3Qga2V5cyA9IHRoaXMucHJvcHMud29ya291dHMubWFwKCh3b3Jrb3V0KSA9PiB7XG4gICAgICAvLyAgIHJldHVybiB3b3Jrb3V0LmlkXG4gICAgICAvLyB9KVxuICAgICAgLy8gbGV0IHRvcCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGtleXMpXG4gICAgICAvLyBsZXQgd29ya291dHMgPSB0aGlzLnByb3BzLndvcmtvdXRzXG4gICAgICAvLyBsZXQgbGF0ZXN0V29ya291dCA9ICgpID0+ICB7XG4gICAgICAvLyAgIGZvciAoaSA9IDA7IGkgPCB3b3Jrb3V0cy5sZW5ndGg7IGkrKyl7XG4gICAgICAvLyAgICAgY29uc29sZS5sb2coJy0tLS0tLS0tLXdvcmtvdXRzJyx3b3Jrb3V0cylcbiAgICAgIC8vICAgICBsZXQgd29ya291dCA9IHdvcmtvdXRzW2ldXG4gICAgICAvLyAgICAgaWYod29ya291dC5pZCA9PT0gdG9wKXtcbiAgICAgIC8vICAgICAgIHJldHVybiB3b3Jrb3V0XG4gICAgICAvLyAgICAgICB9XG4gICAgICAvLyAgICAgfVxuICAgICAgLy8gICB9XG4gICAgcmV0dXJuKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYWluX2Rhc2hcIj5cbiAgICAgICAgPE1haW5OYXZDb250YWluZXIvPlxuICAgICAgICA8YnIvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRhc2hfcHJvZmlsZVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGFzaF9wcm9maWxlX2JvZHlcIj5cbiAgICAgICAgICAgIDxQcm9maWxlIHJvdXRlQ291bnQ9e3RoaXMucHJvcHMucm91dGVDb3VudH0gd29ya291dENvdW50PXt0aGlzLnByb3BzLndvcmtvdXRDb3VudH0gZW1haWw9e3RoaXMucHJvcHMuZW1haWx9Lz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjdGl2aXR5RmVlZFwiPlxuICAgICAgICAgICAgPHAgaWQ9XCJ3b3Jrb3V0ZmVlZFwiPllvdXIgQWN0aXZpdGllcyA8aSBjbGFzcz1cImZhcyBmYS1jaGV2cm9uLWRvd25cIj48L2k+PC9wPlxuICAgICAgICAgICAgPHVsPnt3b3Jrb3V0TGlzdH0gPC91bD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGlkPVwiZGFzaEV4dHJhc1wiPlxuICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cImRhc2hFeHRyYXNUaXRsZVwiPlxuICAgICAgICAgICAgICBDaGFsbGVuZ2VzXG4gICAgICAgICAgICA8L2gxPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZGFzaEV4dHJhc0JvZHlcIj5cbiAgICAgICAgICAgICAgSm9pbiBhIHJ1biBvciBjeWNsaW5nIENoYWxsZW5nZSB0byBzdGF5IG9uIHRvcCBvZiB5b3VyIGdhbWUsIFxuICAgICAgICAgICAgICBlYXJuIG5ldyBhY2hpZXZlbWVudHMgYW5kIHNlZSBob3cgeW91IHN0YWNrIHVwLlxuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cImRhc2hFeHRyYXNUaXRsZVwiPlxuICAgICAgICAgICAgICBDbHVic1xuICAgICAgICAgICAgPC9oMT5cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImRhc2hFeHRyYXNCb2R5XCI+XG4gICAgICAgICAgICAgIFdoeSBkbyBpdCBhbG9uZT8gR2V0IG1vcmUgb3V0IG9mIHlvdXIgXG4gICAgICAgICAgICAgIFRyYWNlIGV4cGVyaWVuY2UgYnkgam9pbmluZyBvciBjcmVhdGluZyBhIENsdWIuXG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwiZGFzaEV4dHJhc1RpdGxlXCI+XG4gICAgICAgICAgICAgIFRyeSBhIFByaXZhY3kgWm9uZVxuICAgICAgICAgICAgPC9oMT5cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImRhc2hFeHRyYXNCb2R5XCI+XG4gICAgICAgICAgICAgIFlvdSBjYW4gaGlkZSB0aGUgbG9jYXRpb24gb2YgeW91ciBob21lLCBcbiAgICAgICAgICAgICAgb2ZmaWNlIG9yIG90aGVyIHByaXZhdGUgcGxhY2VzIGluIHlvdXIgYWN0aXZpdGllcy5cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxNYWluRm9vdGVyLz5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEYXNoYm9hcmQ7XG4gIiwiaW1wb3J0IHtjb25uZWN0fSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBmZXRjaFdvcmtvdXRzIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy93b3Jrb3V0X2FjdGlvbnMnO1xuaW1wb3J0IHsgZmV0Y2hSb3V0ZXMgfSBmcm9tICcuLi8uLi9hY3Rpb25zL3JvdXRlc19hY3Rpb24nO1xuaW1wb3J0IGRhc2hib2FyZCBmcm9tICcuL2Rhc2hib2FyZCc7XG5cbmNvbnN0IG1zdHAgPSAoe3Nlc3Npb24sIGVudGl0aWVzfSkgPT4ge1xuICByZXR1cm4ge1xuICAgIHNlc3Npb246IHNlc3Npb24sXG4gICAgY3VycmVudFVzZXI6IGVudGl0aWVzLnVzZXJzW3Nlc3Npb24uaWRdLFxuICAgIGVtYWlsOiBlbnRpdGllcy51c2Vyc1tzZXNzaW9uLmlkXS5lbWFpbCxcbiAgICB3b3Jrb3V0Q291bnQ6IE9iamVjdC52YWx1ZXMoZW50aXRpZXMud29ya291dHMpLmxlbmd0aCxcbiAgICByb3V0ZUNvdW50OiBPYmplY3QudmFsdWVzKGVudGl0aWVzLnJvdXRlcykubGVuZ3RoLFxuICAgIHdvcmtvdXRzOiBPYmplY3QudmFsdWVzKGVudGl0aWVzLndvcmtvdXRzKSxcbiAgICByb3V0ZTogZW50aXRpZXMucm91dGVzXG4gIH07XG59O1xuXG5jb25zdCBtZHRwID0gZGlzcGF0Y2ggPT4ge1xuICByZXR1cm4ge1xuICAgIGZldGNoV29ya291dHM6IChpZCkgPT4gZGlzcGF0Y2goZmV0Y2hXb3Jrb3V0cyhpZCkpLFxuICAgIGZldGNoUm91dGVzOiAoaWQpID0+IGRpc3BhdGNoKGZldGNoUm91dGVzKGlkKSksXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtc3RwLG1kdHApKGRhc2hib2FyZCk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgTGluaywgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5cbmNsYXNzIFdvcmtvdXRJbmRleEl0ZW0gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQgeyBcbiAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuY2FwID0gdGhpcy5jYXAuYmluZCh0aGlzKVxuICB9XG5cbiAgICBjYXAocykge1xuICAgIHJldHVybiBzPy5jaGFyQXQoMCk/LnRvVXBwZXJDYXNlKCkgKyBzPy5zbGljZSgxKTtcbiAgICB9XG4gIHJlbmRlcigpe1xuICAgIGxldCB7d29ya291dCwgZGVsZXRlV29ya291dCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGxldCBuZXdIb3VyID0gd29ya291dC5ob3VycyA8IDEwID8gXG4gICAgICBgMCR7d29ya291dC5ob3Vyc31gIDogd29ya291dC5ob3Vyc1xuICAgIGxldCBuZXdNaW4gPSB3b3Jrb3V0Lm1pbnV0ZXMgPCAxMCA/IFxuICAgICAgYDAke3dvcmtvdXQubWludXRlc31gIDogd29ya291dC5taW51dGVzXG4gICAgbGV0IG5ld1NlYyA9IHdvcmtvdXQuc2Vjb25kcyA8IDEwID8gXG4gICAgICBgMCR7d29ya291dC5zZWNvbmRzfWA6IHdvcmtvdXQuc2Vjb25kc1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDx0ciBpZD1cIndvcmtPdXRSb3dcIj5cbiAgICAgICAgPHRkPnt0aGlzLmNhcCh3b3Jrb3V0LnJ1bl90eXBlKX08L3RkPlxuICAgICAgICA8dGQ+e3dvcmtvdXQuZGF0ZX08L3RkPlxuICAgICAgICA8dGQgY2xhc3NOYW1lPVwid29ya291dElkeExpbmtzXCI+PExpbmsgdG89e2Avd29ya291dHMvJHt3b3Jrb3V0LmlkfWB9Pnt0aGlzLmNhcCh3b3Jrb3V0LnRpdGxlKX08L0xpbms+PC90ZD5cbiAgICAgICAgPHRkPntuZXdIb3VyfTp7bmV3TWlufTp7bmV3U2VjfTwvdGQ+XG4gICAgICAgIDx0ZCBjbGFzc05hbWU9XCJ3b3Jrb3V0SWR4TGlua3NcIj48TGluayB0bz17YC93b3Jrb3V0cy8ke3dvcmtvdXQuaWR9L2VkaXRgfT5FZGl0PC9MaW5rPjwvdGQ+IFxuICAgICAgICA8dGQgY2xhc3NOYW1lPVwid29ya291dElkeExpbmtzXCIgb25DbGljaz17KCkgPT4gZGVsZXRlV29ya291dCh3b3Jrb3V0LmlkKX0+RGVsZXRlPC90ZD5cbiAgICAgIDwvdHI+XG4gIFxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCAgV29ya291dEluZGV4SXRlbTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBkZWxldGVXb3Jrb3V0IH0gZnJvbSAnLi4vLi4vdXRpbC93b3Jrb3V0X2FwaV91dGlsJ1xuaW1wb3J0IE1haW5OYXZDb250YWluZXIgZnJvbSAnLi4vbWFpbk5hdi9tYWluX25hdl9jb250YWluZXInXG5pbXBvcnQgV29ya291dEluZGV4SXRlbSBmcm9tICcuL3dvcmtvdXRfaW5kZXhfaXRlbSdcbmltcG9ydCBNYWluRm9vdGVyIGZyb20gJy4uL2Zvb3Rlci9tYWluX2Zvb3RlcidcblxuY2xhc3MgV29ya291dEluZGV4IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50e1xuICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgc3VwZXIocHJvcHMpXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpe1xuICAgIHRoaXMucHJvcHMuZmV0Y2hXb3Jrb3V0cyh0aGlzLnByb3BzLnNlc3Npb24uaWQpXG4gIH1cblxuICByZW5kZXIoKXtcbiAgICBjb25zdCB3b3Jrb3V0TGlzdCA9IHRoaXMucHJvcHMud29ya291dHMgIT09IHVuZGVmaW5lZCA/IHRoaXMucHJvcHMud29ya291dHMubWFwKHdvcmtvdXQgPT4ge1xuICAgICAgcmV0dXJuIDxXb3Jrb3V0SW5kZXhJdGVtIHdvcmtvdXQ9e3dvcmtvdXR9IGRlbGV0ZVdvcmtvdXQ9e3RoaXMucHJvcHMuZGVsZXRlV29ya291dH0vPiBcbiAgICB9KSA6bnVsbCBcblxuICAgIGNvbnN0IHdvcmtvdXRPcndvcmtvdXRzID0gdGhpcy5wcm9wcy53b3Jrb3V0Q291bnQgPT09IDEgP1xuICAgICBgV29ya291dGAgOiAnV29ya291dHMnXG4gIFxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8TWFpbk5hdkNvbnRhaW5lci8+XG4gICAgICB7Lyoge2NvbnNvbGUubG9nKCctLS0tLS0tLS0tLS1jb3VudCcsdGhpcy5wcm9wcy53b3Jrb3V0Q291bnQpfSAqL31cbiAgICAgIDxkaXYgaWQ9XCJ3b3Jrb3V0SWR4Qm9keVwiPlxuICAgICAgICA8ZGl2IGlkPVwid29ya291dElkeEJvZHlUb3BcIj5cbiAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwid29ya291dEluZGV4VGl0bGVcIj5NeSBXb3Jrb3V0czwvaDE+XG4gICAgICAgICAgPGgxIGNsYXNzTmFtZT1cIndvcmtvdXRDb3VudFwiPnt0aGlzLnByb3BzLndvcmtvdXRDb3VudH0ge3dvcmtvdXRPcndvcmtvdXRzfTwvaDE+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8dGFibGUgY2xhc3NOYW1lPVwid29ya291dFRhYmxlXCI+XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cIndvcmtvdXRJbmRleEhlYWRlclwiPlxuICAgICAgICAgICAgICA8dGg+U3BvcnQ8L3RoPlxuICAgICAgICAgICAgICA8dGg+RGF0ZTwvdGg+XG4gICAgICAgICAgICAgIDx0aD5UaXRsZTwvdGg+XG4gICAgICAgICAgICAgIDx0aD5UaW1lPC90aD5cbiAgICAgICAgICAgICAgPHRoPjwvdGg+XG4gICAgICAgICAgICAgIDx0aD48L3RoPlxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIHt3b3Jrb3V0TGlzdH1cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgPC9kaXY+XG4gICAgICA8TWFpbkZvb3Rlci8+XG4gICAgPC9kaXY+XG4gIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBXb3Jrb3V0SW5kZXg7XG5cblxuIiwiaW1wb3J0IHtjb25uZWN0fSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBmZXRjaFdvcmtvdXRzLCBkZWxldGVXb3Jrb3V0IH0gZnJvbSAnLi4vLi4vYWN0aW9ucy93b3Jrb3V0X2FjdGlvbnMnO1xuaW1wb3J0IFdvcmtvdXRJbmRleCBmcm9tICcuL3dvcmtvdXRfaW5kZXgnXG5cbmNvbnN0IG1zdHAgPSAoc3RvcmUpID0+IHtcbiAgLy8gY29uc29sZS5sb2coJy0tLS0tLS0tLS0tLS0tJyxzdG9yZSlcbiAgcmV0dXJuIHtcbiAgICBzZXNzaW9uOiBzdG9yZS5zZXNzaW9uLFxuICAgIHdvcmtvdXRzOiBPYmplY3QudmFsdWVzKHN0b3JlLmVudGl0aWVzLndvcmtvdXRzKSxcbiAgICB3b3Jrb3V0Q291bnQ6IE9iamVjdC52YWx1ZXMoc3RvcmUuZW50aXRpZXMud29ya291dHMpLmxlbmd0aCBcbiAgfTtcbn07XG5cbmNvbnN0IG1kdHAgPSBkaXNwYXRjaCA9PiB7XG4gIHJldHVybiB7XG4gICAgZmV0Y2hXb3Jrb3V0czogKGlkKSA9PiBkaXNwYXRjaChmZXRjaFdvcmtvdXRzKGlkKSksXG4gICAgZGVsZXRlV29ya291dDogKGlkKSA9PiBkaXNwYXRjaChkZWxldGVXb3Jrb3V0KGlkKSlcblxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobXN0cCxtZHRwKShXb3Jrb3V0SW5kZXgpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBNYWluTmF2IGZyb20gJy4uL21haW5OYXYvbWFpbl9uYXYnXG5pbXBvcnQgeyBMaW5rLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgTWFpbkZvb3RlciBmcm9tICcuLi9mb290ZXIvbWFpbl9mb290ZXInXG5cbmNsYXNzIFdvcmtvdXRGb3JtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50e1xuICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMucHJvcHMud29ya291dDsgXG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UgPSB0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlU3VibWl0ID0gdGhpcy5oYW5kbGVTdWJtaXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLnRvZ2dsZURpc2FibGUgPSB0aGlzLnRvZ2dsZURpc2FibGUuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCl7XG4gICAgdGhpcy5wcm9wcy5mZXRjaFJvdXRlcyh0aGlzLnByb3BzLnNlc3Npb24/LmlkKVxuICB9XG5cbiAgaGFuZGxlU3VibWl0KGUpe1xuICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gc3RvcHMgYSByZWZyZXNoIFxuICAgIHRoaXMucHJvcHMuYWN0aW9uKHRoaXMuc3RhdGUsIHRoaXMucHJvcHMuY3VycmVudFVzZXIpLnRoZW4odGhpcy5wcm9wcy5oaXN0b3J5Py5wdXNoKFwiL3dvcmtvdXRzXCIpKTtcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZShmaWVsZCl7XG4gICAgLy8gdGhpcy50b2dnbGVEaXNhYmxlKClcbiAgICByZXR1cm4gZSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1tmaWVsZF06IGUudGFyZ2V0LnZhbHVlfSlcbiAgICB9XG4gIH1cblxuICAgdG9nZ2xlRGlzYWJsZSgpe1xuICAgaWYoZS50YXJnZXQudmFsdWUubGVuZ3RoID4gMCl7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZGlzYWJsZWQ6IHRydWVcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCl7XG4gICAgbGV0IGxpbmsgPSB0aGlzLnByb3BzLmZvcm1UeXBlID09PSBcIkVkaXRcIiA/XG4gICAgYC93b3Jrb3V0c2AgOiBgL2BcblxuICAgIGxldCByb3V0ZXNMaXN0ID0gdGhpcy5wcm9wcz8ucm91dGVzPy5tYXAocm91dGUgPT4ge1xuICAgICAgcmV0dXJuIDxvcHRpb24gdmFsdWU9e3JvdXRlLmlkfT57cm91dGUudGl0bGV9PC9vcHRpb24+IFxuICAgIH0pXG5cbiAgICBsZXQgZm9ybU5hbWUgPSB0aGlzLnByb3BzLmZvcm1UeXBlID09PSBcIkVkaXRcIiA/XG4gICAgJ1VwZGF0ZScgOiAnQ3JlYXRlJ1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8TWFpbk5hdi8+XG4gICAgICAgIHsvKiB7Y29uc29sZS5sb2coJysrKysrKysrKysrKysrKysrKysrKysrKysrKysnLHRoaXMuc3RhdGUpfSAqL31cbiAgICAgICAgPGJvZHkgaWQ9XCJ3b3Jrb3V0Rm9ybUJvZHlcIj5cbiAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwid29Gb3JtVGl0bGVcIj5Xb3Jrb3V0IEVudHJ5PC9oMT5cbiAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVTdWJtaXR9PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0b3BXb3Jrb3V0Rm9ybVwiPlxuICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJ3b3Jrb3V0Rm9ybWxhYmVsXCI+Um91dGUgXG4gICAgICAgICAgICAgICAgICA8c2VsZWN0IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZSgncm91dGVfaWQnKX0gY2xhc3NOYW1lPVwicm91dGVPcHRpb25zXCIgPlxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIGNsYXNzTmFtZT1cInJvdXRlT3B0aW9uc2Nob2ljZXNcIiB2YWx1ZT17dGhpcy5zdGF0ZT8ucm91dGU/LnRpdGxlfSAgZGlzYWJsZWQgc2VsZWN0ZWQ+Q2hvb3NlIGEgcm91dGU8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAge3JvdXRlc0xpc3R9XG4gICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICA8L2Rpdj4gXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid29UaW1lRW50cnlcIiBjbGFzc05hbWU9XCJ3b3Jrb3V0Rm9ybWxhYmVsXCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsPlRpbWUgXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpbWVpbnB1dEFyZWFzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlKCdob3VycycpfSB2YWx1ZT17dGhpcy5zdGF0ZS5ob3Vyc30gcGxhY2Vob2xkZXI9eydocid9IGNsYXNzTmFtZT1cInRpbWVJbnB1dGVcIiBtaW49XCIwXCIgbWF4PVwiMTAwXCIvPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZSgnbWludXRlcycpfSB2YWx1ZT17dGhpcy5zdGF0ZS5taW51dGVzfSBwbGFjZWhvbGRlcj17J21pbid9IGNsYXNzTmFtZT1cInRpbWVJbnB1dGVcIiBtaW49XCIwXCIgbWF4PVwiNTlcIi8+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlKCdzZWNvbmRzJyl9IHZhbHVlPXt0aGlzLnN0YXRlLnNlY29uZHN9IHBsYWNlaG9sZGVyPXsncyd9IGNsYXNzTmFtZT1cInRpbWVJbnB1dGVcIiBtaW49XCIwXCIgbWF4PVwiNTlcIi8+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2xhYmVsPiBcbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWlkV29ya291dEZvcm1cIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtaWRXb3Jrb3V0Rm9ybS10b3BcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwid29ya291dEZvcm1sYWJlbFwiIGlkPVwicnVuX3R5cGVcIj5UeXBlXG4gICAgICAgICAgICAgICAgPHNlbGVjdCBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2UoJ3J1bl90eXBlJyl9IHZhbHVlPXt0aGlzLnN0YXRlLnJ1bl90eXBlfSBjbGFzc05hbWU9XCJ3T2Zvcm1pbnB1dFwiPlxuICAgICAgICAgICAgICAgICAgPG9wdGlvbj5ydW48L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxvcHRpb24+d2Fsazwvb3B0aW9uPlxuICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cIndvcmtvdXRGb3JtbGFiZWxcIj5EYXRlXG4gICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImRhdGVcIiBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2UoJ2RhdGUnKX0gY2xhc3NOYW1lPVwid09mb3JtaW5wdXRcIlxuICAgICAgICAgICAgICAgICAgbWluPVwiMjAyMS0wMS0wMVwiIG1heD1cIjIwMzAtMTItMzFcIiB2YWx1ZT17dGhpcy5zdGF0ZS5kYXRlfSBpZD1cImRhdGVfZW50cnlcIi8+XG4gICAgICAgICAgICAgICAgPC9sYWJlbD4gXG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwid29ya291dEZvcm1sYWJlbFwiPlRpdGxlIFxuICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJ3b3JraW5wdXRcIiB0eXBlPVwidGV4dFwiIHZhbHVlPXt0aGlzLnN0YXRlLnRpdGxlfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2UoJ3RpdGxlJyl9IGNsYXNzTmFtZT1cIndPZm9ybWlucHV0XCIgcGxhY2Vob2xkZXI9eydBZnRlcm5vb24gUnVuJ30vPlxuICAgICAgICAgICAgICA8L2xhYmVsPiA8YnIvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxvd1dvcmtvdXRGb3JtXCI+XG4gICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJ3b3Jrb3V0Rm9ybWxhYmVsXCI+RGVzY3JpcHRpb24gXG4gICAgICAgICAgICAgICAgPHRleHRhcmVhICBjbGFzc05hbWU9XCJ3b3JraW5wdXRcIiBpZD1cIndvcmtEZXNjQm94XCIgXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlKCdkZXNjcmlwdGlvbicpfSBcbiAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5kZXNjcmlwdGlvbn0gXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9eydIb3cgZGlkIGl0IGdvPyBXZXJlIHlvdSB0aXJlZCBvciByZXN0ZWQ/IEhvdyB3YXMgdGhlIHdlYXRoZXI/J31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cIndvcmtvdXRDcmVhdGVidXR0b25cIiBcbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e1xuICAgICAgICAgICAgICAgICF0aGlzLnN0YXRlLnRpdGxlIHx8IFxuICAgICAgICAgICAgICAgICF0aGlzLnN0YXRlLmRlc2NyaXB0aW9uIHx8IFxuICAgICAgICAgICAgICAgICF0aGlzLnN0YXRlLmhvdXJzIHx8XG4gICAgICAgICAgICAgICAgIXRoaXMuc3RhdGUubWludXRlcyB8fFxuICAgICAgICAgICAgICAgICF0aGlzLnN0YXRlLnNlY29uZHMgfHxcbiAgICAgICAgICAgICAgICAhdGhpcy5zdGF0ZS5ydW5fdHlwZSB8fFxuICAgICAgICAgICAgICAgICF0aGlzLnN0YXRlLmRhdGVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA+e2Zvcm1OYW1lfTwvYnV0dG9uPlxuICAgICAgICAgICAgPExpbmsgdG89e2xpbmt9IGNsYXNzTmFtZT1cImNhbmNlbEJ1dHRvblwiPkNhbmNlbDwvTGluaz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvYm9keT5cbiAgICAgICAgPE1haW5Gb290ZXIvPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFdvcmtvdXRGb3JtOyIsImltcG9ydCB7Y29ubmVjdH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgY3JlYXRlV29ya291dCB9IGZyb20gJy4uLy4uL2FjdGlvbnMvd29ya291dF9hY3Rpb25zJztcbmltcG9ydCB7IGZldGNoUm91dGVzIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9yb3V0ZXNfYWN0aW9uJztcbmltcG9ydCBXb3Jrb3V0Rm9ybSBmcm9tICcuL3dvcmtvdXRfZm9ybSdcblxuY29uc3QgbXN0cCA9IChzdG9yZSwgb3duUHJvcHMpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB3b3Jrb3V0OiB7dGl0bGU6ICcnLCBkZXNjcmlwdGlvbjogJycsIGRhdGU6ICcnLFxuICAgIGhvdXJzOiAnJywgbWludXRlczogJycsIHNlY29uZHM6ICcnLCBcbiAgICBydW5fdHlwZTogJ3J1bicsIHJvdXRlX2lkOicgJywgZGlzYWJsZWQ6IHRydWV9LFxuICAgIHJvdXRlczogT2JqZWN0LnZhbHVlcyhzdG9yZS5lbnRpdGllcy5yb3V0ZXMpLFxuICAgIHNlc3Npb246IHN0b3JlLnNlc3Npb24sXG4gICAgaGlzdG9yeTogb3duUHJvcHMuaGlzdG9yeSxcbiAgICBjdXJyZW50VXNlcjogc3RvcmUuZW50aXRpZXMudXNlcnMuaWRcbiAgfTtcbn07XG5cbmNvbnN0IG1kdHAgPSBkaXNwYXRjaCA9PiB7XG4gIHJldHVybiB7XG4gICAgYWN0aW9uOiB3b3Jrb3V0ID0+IGRpc3BhdGNoKGNyZWF0ZVdvcmtvdXQod29ya291dCkpLFxuICAgIGZldGNoUm91dGVzOiBpZCA9PiBkaXNwYXRjaChmZXRjaFJvdXRlcyhpZCkpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtc3RwLG1kdHApKFdvcmtvdXRGb3JtKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgTWFpbk5hdiBmcm9tICcuLi9tYWluTmF2L21haW5fbmF2J1xuXG5jbGFzcyBXb3Jrb3V0U2hvdyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudHtcbiAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgIHN1cGVyKHByb3BzKVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKXtcbiAgaWYoIXRoaXMucHJvcHMud29ya291dFt0aGlzLnByb3BzLm1hdGNoLnBhcmFtcy53b3Jrb3V0SWRdKVxuICAgIHRoaXMucHJvcHMuZmV0Y2hXb3Jrb3V0KHRoaXMucHJvcHMubWF0Y2gucGFyYW1zLndvcmtvdXRJZClcbiAgfVxuXG4gIHJlbmRlcigpe1xuICAgIGNvbnN0IHt3b3Jrb3V0LCByb3V0ZSwgY3VycmVudFVzZXJ9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4oXG4gICAgICA8ZGl2PlxuICAgICAgICA8TWFpbk5hdi8+XG4gICAgICAgIDxkaXYgaWQ9J3dvcmtvdXRTaG93Jz5cbiAgICAgICAgICA8Ym9keSBpZD1cIndvcmtTaG93Qm9keVwiPlxuICAgICAgICAgICAgPGRpdiBpZD1cIndvcmtTaG93aGVhZFwiPlxuICAgICAgICAgICAgICA8aDE+e3JvdXRlLmVtYWlsfSAtIHt3b3Jrb3V0LnJ1bl90eXBlfSA8L2gxPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndvcmtTaG93TWFpblwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndvcmtTaG93TWFpbkxlZnRcIj5cbiAgICAgICAgICAgICAgICA8aSBpZD1cInVzZXJXb3JrU2hvd1wiIGNsYXNzTmFtZT1cImZhcyBmYS11c2VyLWNpcmNsZVwiPjwvaT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndvcmtTaG93TWFpbkxlZnQtaW5uZXJcIj5cbiAgICAgICAgICAgICAgICAgIDxoMSBpZD0nd29ya1Nob3dUaXRsZSc+IHt3b3Jrb3V0LnRpdGxlfTwvaDE+XG4gICAgICAgICAgICAgICAgICA8aDE+e3dvcmtvdXQuZGVzY3JpcHRpb259PC9oMT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid29ya1Nob3dpdGVtXCI+XG4gICAgICAgICAgICAgICAgPGgxPnt3b3Jrb3V0LmRhdGV9PC9oMT5cbiAgICAgICAgICAgICAgICA8aDI+RGF0ZTwvaDI+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndvcmtTaG93aXRlbVwiPlxuICAgICAgICAgICAgICAgIDxoMT57d29ya291dC5ob3Vyc306e3dvcmtvdXQubWludXRlc306e3dvcmtvdXQuc2Vjb25kc308L2gxPlxuICAgICAgICAgICAgICAgIDxoMj5Nb3ZpbmcgVGltZTwvaDI+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndvcmtTaG93aXRlbVwiPlxuICAgICAgICAgICAgICA8aDE+e3JvdXRlPy50aXRsZX08L2gxPlxuICAgICAgICAgICAgICA8aDI+UnVuIE5hbWU8L2gyPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvYm9keT5cbiAgICAgICAgICA8ZGl2IGlkPSdtYXBDb250YWluZXInPlxuICAgICAgICAgIDxpbWcgaWQ9XCJ3b3JrU2hvd01hcFwiIHNyYz17cm91dGU/LmltYWdlfSAgYWx0PSdyb3V0ZSBpbWFnZScvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj4gXG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgV29ya291dFNob3ciLCJpbXBvcnQge2Nvbm5lY3R9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGZldGNoV29ya291dCwgZGVsZXRlV29ya291dCAgfSBmcm9tICcuLi8uLi9hY3Rpb25zL3dvcmtvdXRfYWN0aW9ucyc7XG5pbXBvcnQgV29ya291dFNob3cgZnJvbSAnLi93b3Jrb3V0X3Nob3cnXG5cbmNvbnN0IG1zdHAgPSAoc3RvcmUsIG93blByb3BzKSA9PiB7XG4gIC8vIGNvbnNvbGUubG9nKCdvd25wcm9wcy0tLS0tLS0tLS0tJyxvd25Qcm9wcylcbiAgLy8gY29uc29sZS5sb2coJ3N0b3JlLS0tLS0tLS0tLS0nLHN0b3JlKVxuICBjb25zdCB3b3Jrb3V0SWQgPSBvd25Qcm9wcy5tYXRjaC5wYXJhbXMud29ya291dElkXG4gIHJldHVybiB7XG4gICAgd29ya291dDogc3RvcmUuZW50aXRpZXMud29ya291dHNbd29ya291dElkXSB8fCB7fSxcbiAgICByb3V0ZTogc3RvcmUuZW50aXRpZXMud29ya291dHNbd29ya291dElkXT8ucm91dGV8fCB7fSxcbiAgfVxufVxuXG5jb25zdCBtZHRwID0gZGlzcGF0Y2ggPT4ge1xuICByZXR1cm4gKHtcbiAgICBmZXRjaFdvcmtvdXQ6IHdvcmtvdXRJZCA9PiBkaXNwYXRjaChmZXRjaFdvcmtvdXQod29ya291dElkKSksXG4gICAgZGVsZXRlV29ya291dDogd29ya291dElkID0+IGRpc3BhdGNoKGRlbGV0ZVdvcmtvdXQod29ya291dElkKSlcbiAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtc3RwLCBtZHRwKShXb3Jrb3V0U2hvdykiLCJpbXBvcnQge2Nvbm5lY3R9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGZldGNoV29ya291dCwgdXBkYXRlV29ya291dCB9IGZyb20gJy4uLy4uL2FjdGlvbnMvd29ya291dF9hY3Rpb25zJztcbmltcG9ydCBXb3Jrb3V0Rm9ybSBmcm9tICcuL3dvcmtvdXRfZm9ybSdcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGZldGNoUm91dGVzIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9yb3V0ZXNfYWN0aW9uJztcblxuXG5jbGFzcyBFZGl0V29ya291dEZvcm0gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnR7XG4gIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICBzdXBlcihwcm9wcylcbiAgfVxuICBjb21wb25lbnREaWRNb3VudCgpe1xuICAgIGNvbnN0IHdvcmtvdXRJZCA9IHRoaXMucHJvcHMubWF0Y2gucGFyYW1zLndvcmtvdXRJZDtcblx0XHRpZiAoIXRoaXMucHJvcHMud29ya291dFt3b3Jrb3V0SWRdKSB7XG5cdFx0XHR0aGlzLnByb3BzLmZldGNoV29ya291dCh3b3Jrb3V0SWQpO1xuXHRcdH1cbiAgfVxuICByZW5kZXIoKXtcbiAgICBjb25zdCB7IGN1cnJlbnRVc2VyLCB3b3Jrb3V0LCBmb3JtVHlwZSwgYWN0aW9uLCBoaXN0b3J5LCBcbiAgICAgICBmZXRjaFJvdXRlcywgc2Vzc2lvbiwgcm91dGVzLCByb3V0ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB3b3Jrb3V0SWQgPSB0aGlzLnByb3BzLm1hdGNoLnBhcmFtcz8ud29ya291dElkO1xuICAgIC8vIGRlYnVnZ2VyXG4gICAgcmV0dXJuIHdvcmtvdXRbd29ya291dElkXSA/IChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxXb3Jrb3V0Rm9ybSB3b3Jrb3V0PXt3b3Jrb3V0W3dvcmtvdXRJZF19IGZvcm1UeXBlPXtmb3JtVHlwZX0gYWN0aW9uPXthY3Rpb259IGhpc3Rvcnk9e2hpc3Rvcnl9XG4gICAgICAgICBmZXRjaFJvdXRlcz17ZmV0Y2hSb3V0ZXN9IGN1cnJlbnRVc2VyPXtjdXJyZW50VXNlcn0gc2Vzc2lvbj17c2Vzc2lvbiB9XG4gICAgICAgICAgcm91dGVzPXtyb3V0ZXN9IHJvdXRlPXtyb3V0ZX0gd29ya291dElkPXt3b3Jrb3V0SWR9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICApOiBudWxsO1xuICB9XG59O1xuXG5jb25zdCBtc3RwID0gKHN0b3JlLCBvd25Qcm9wcykgPT4ge1xuICByZXR1cm4ge1xuICAgIGlkOiBvd25Qcm9wcy5tYXRjaC5wYXJhbXMud29ya291dElkLFxuICAgIHdvcmtvdXQ6IHN0b3JlLmVudGl0aWVzLndvcmtvdXRzLFxuICAgIHJvdXRlOiBzdG9yZS5lbnRpdGllcy53b3Jrb3V0cy5yb3V0ZSxcbiAgICBmb3JtVHlwZTogXCJFZGl0XCIsXG4gICAgcm91dGVzOiBPYmplY3QudmFsdWVzKHN0b3JlLmVudGl0aWVzLnJvdXRlcyksXG4gICAgc2Vzc2lvbjogc3RvcmUuc2Vzc2lvbixcbiAgICBoaXN0b3J5OiBvd25Qcm9wcy5oaXN0b3J5LFxuICAgIGN1cnJlbnRVc2VyOiBzdG9yZS5lbnRpdGllcy51c2Vycy5pZFxuICB9XG59XG5cbmNvbnN0IG1kdHAgPSBkaXNwYXRjaCA9PiB7XG4gIHJldHVybiAoe1xuICAgIGZldGNoV29ya291dDogd29ya291dElkID0+IGRpc3BhdGNoKGZldGNoV29ya291dCh3b3Jrb3V0SWQpKSxcbiAgICBhY3Rpb246IHdvcmtvdXQgPT4gZGlzcGF0Y2godXBkYXRlV29ya291dCh3b3Jrb3V0KSksXG4gICAgZmV0Y2hSb3V0ZXM6IGlkID0+IGRpc3BhdGNoKGZldGNoUm91dGVzKGlkKSlcbiAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtc3RwLCBtZHRwKShFZGl0V29ya291dEZvcm0pIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgTGluaywgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5cbmNvbnN0IFJvdXRlc0luZGV4SXRlbSA9ICh7cm91dGUsIGRlbGV0ZVJvdXRlLCBzZXNzaW9ufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwicm91dGVJZHhJdGVtXCI+IFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3V0ZUlkeEl0ZW1JbWFnZVwiPlxuICAgICAgICB7LyogPGltZyBzcmM9e3JvdXRlLmltYWdlfS8+ICAqL31cbiAgICAgICAgPExpbmsgdG89e2Avcm91dGVzLyR7cm91dGUuaWR9YH0gY2xhc3NOYW1lPVwicm91dGVJbmRleEltYWdlXCI+XG4gICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJyb3V0ZUluZGV4SW1hZ2VcIiBzcmM9e3JvdXRlLmltYWdlfSBhbHQ9XCJyb3V0ZSBpbWFnZVwiLz4gXG4gICAgICAgIDwvTGluaz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93blJ0XCIgPlxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiZHJvcGJ0blJ0XCI+IDxpIGNsYXNzTmFtZT1cImZhcyBmYS13cmVuY2hcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bl9jb250ZW50UnRcIj5cbiAgICAgICAgICAgIDxhIG9uQ2xpY2s9eygpID0+IHtkZWxldGVSb3V0ZShyb3V0ZS5pZCl9fT5EZWxldGUgUm91dGU8L2E+XG4gICAgICAgICAgICA8TGluayB0bz17YC9yb3V0ZXMvJHtyb3V0ZS5pZH0vZWRpdGB9PkVkaXQgUm91dGU8L0xpbms+ICBcbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgaWQ9XCJyb3V0ZUNhcmRCb3R0b21cIj5cbiAgICAgICAgPExpbmsgdG89e2Avcm91dGVzLyR7cm91dGUuaWR9YH0gY2xhc3NOYW1lPVwicnRJZHhUaXRsZVwiPntyb3V0ZS50aXRsZX08L0xpbms+PGJyLz5cbiAgICAgICAgey8qIDxkaXYgaWQ9XCJydElkeERpc3RhbmNlR3JvdXBcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJ0SWR4RGlzdGFuY2VHcm91cFwiPlxuICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInJ0SWR4RGlzdGFuY2VOdW1cIj57cm91dGUuZGlzdGFuY2UgfHwgMH08L2gxPiBcbiAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJydElkeERpc3RhbmNlTWlcIj5taTwvaDE+XG4gICAgICAgICAgPC9kaXY+IFxuICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJydElkeERpc3RhbmNlXCI+RGlzdGFuY2U8L2gxPlxuICAgICAgICA8L2Rpdj4gKi99XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCAgUm91dGVzSW5kZXhJdGVtOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBNYWluTmF2Q29udGFpbmVyIGZyb20gJy4uL21haW5OYXYvbWFpbl9uYXZfY29udGFpbmVyJ1xuaW1wb3J0IFJvdXRlc0luZGV4SXRlbSBmcm9tICcuL3JvdXRlc19pbmRleF9pdGVtJ1xuaW1wb3J0IHsgTGluaywgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IE1haW5Gb290ZXIgZnJvbSAnLi4vZm9vdGVyL21haW5fZm9vdGVyJztcblxuY2xhc3MgUm91dGVzSW5kZXggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnR7XG4gIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICBzdXBlcihwcm9wcylcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCl7XG4gICAgLy8gZGVidWdnZXJcbiAgICB0aGlzLnByb3BzLmZldGNoUm91dGVzKHRoaXMucHJvcHMuc2Vzc2lvbi5pZClcbiAgfVxuXG4gIHJlbmRlcigpe1xuICBjb25zdCByb3V0ZXNMaXN0ID0gdGhpcy5wcm9wcy5yb3V0ZXMgIT09IHVuZGVmaW5lZCA/ICB0aGlzLnByb3BzLnJvdXRlcy5tYXAocm91dGUgPT4ge1xuICAgIHJldHVybiA8Um91dGVzSW5kZXhJdGVtIHJvdXRlPXtyb3V0ZX0gZGVsZXRlUm91dGU9e3RoaXMucHJvcHMuZGVsZXRlUm91dGV9IHNlc3Npb249e3RoaXMucHJvcHMuc2Vzc2lvbn0vPlxuICB9KSA6IG51bGxcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICB7Lyoge2NvbnNvbGUubG9nKCdjb21wb25lbnQgc3RvcmUtLS0tLS0tJyx0aGlzLnByb3BzLnJvdXRlcyl9ICovfVxuICAgICAgICA8TWFpbk5hdkNvbnRhaW5lciAvPlxuICAgICAgICA8Ym9keSBpZD1cInJ0SWR4Qm9keVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm91dGVJbmRleFRvcFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3V0ZUluZGV4VG9wTGVmdFwiPlxuICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwicm91dGVJbmRleFRpdGxlXCI+TXkgUm91dGVzPC9oMT5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJyb3V0ZUluZGV4Q3JlYXRlXCI+PExpbmsgdG89XCIvbmV3L3JvdXRlc1wiPkNyZWF0ZSBOZXcgUm91dGU8L0xpbms+PC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgaWQ9XCJyb3V0ZUluZGV4RmluZVByaW50XCI+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0ncm91dGVJbmRleEZpbmVQcmludCc+TGVhcm4gbW9yZSBhYm91dCBzaGFyaW5nICYgZXhwb3J0aW5nIHJvdXRlcyB0byBhIHZhcmlldHkgb2YgZGV2aWNlcy48L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxpbWcgc3JjPVwiaHR0cHM6Ly9kM25uODJ1YXhpanBtNi5jbG91ZGZyb250Lm5ldC9hc3NldHMvcm91dGVzL3JvdXRlLWxpc3QtbW9iaWxlLXVwc2VsbC1jMWFlYzU1NGQwMTBlM2M4NjQxMWFkNTYwNjE1ODAyMTYyMzE4ODc1ZjA4NmQxZTNlZDQ4NTBkNmM3MDE0YjhmLnBuZ1wiLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm91dGVJbmRleExpc3RcIj5cbiAgICAgICAgICAgIHtyb3V0ZXNMaXN0fVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2JvZHk+XG4gICAgICAgIDxNYWluRm9vdGVyLz5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZXNJbmRleDtcbiIsImltcG9ydCB7Y29ubmVjdH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgZmV0Y2hSb3V0ZXMsIHVwZGF0ZVJvdXRlLCBkZWxldGVSb3V0ZSB9IGZyb20gJy4uLy4uL2FjdGlvbnMvcm91dGVzX2FjdGlvbic7XG5pbXBvcnQgUm91dGVzSW5kZXggZnJvbSAnLi9yb3V0ZXNfaW5kZXgnXG5cblxuY29uc3QgbXN0cCA9IChzdG9yZSkgPT4ge1xuICAvLyBjb25zb2xlLmxvZygnc3RvcmUtLS0tLS0tLS0tLS0tLScsc3RvcmUpXG4gIHJldHVybiB7XG4gICAgc2Vzc2lvbjogc3RvcmUuc2Vzc2lvbixcbiAgICByb3V0ZXM6IE9iamVjdC52YWx1ZXMoc3RvcmUuZW50aXRpZXMucm91dGVzKVxuICB9O1xufTtcblxuY29uc3QgbWR0cCA9IGRpc3BhdGNoID0+IHtcbiAgcmV0dXJuIHtcbiAgICBmZXRjaFJvdXRlczogKGlkKSA9PiBkaXNwYXRjaChmZXRjaFJvdXRlcyhpZCkpLFxuICAgIGRlbGV0ZVJvdXRlOiAoaWQpID0+IGRpc3BhdGNoKGRlbGV0ZVJvdXRlKGlkKSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1zdHAsbWR0cCkoUm91dGVzSW5kZXgpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcblxuY2xhc3MgTWFwTW9kYWwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnR7XG4gIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdGl0bGU6IHRoaXMucHJvcHM/LnRpdGxlLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMucHJvcHM/LmRlc2NyaXB0aW9uLFxuICAgICAgZGlzYWJsZWQ6IHRydWUsXG4gICAgICBpZDogdGhpcy5wcm9wcz8ucm91dGVJZFxuICAgIH1cbiAgICB0aGlzLm9wZW5Nb2RhbCA9IHRoaXMub3Blbk1vZGFsLmJpbmQodGhpcyk7XG4gICAgdGhpcy50b2dnbGVEaXNhYmxlID0gdGhpcy50b2dnbGVEaXNhYmxlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVTdWJtaXQgPSB0aGlzLmhhbmRsZVN1Ym1pdC5iaW5kKHRoaXMpO1xuICAgIFxuICB9XG5cbiAgaGFuZGxlU3VibWl0KGUpe1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnByb3BzLmFjdGlvbih7XG4gICAgICB0aXRsZTogdGhpcy5zdGF0ZS50aXRsZSxcbiAgICAgIHN0YXJ0X2xvbmc6dGhpcy5wcm9wcy5jb3Jkc1swXT8ubG5nLFxuICAgICAgc3RhcnRfbGF0OnRoaXMucHJvcHMuY29yZHNbMF0/LmxhdCxcbiAgICAgIGVuZF9sb25nOnRoaXMucHJvcHMuY29yZHNbMV0/LmxuZyxcbiAgICAgIGVuZF9sYXQ6dGhpcy5wcm9wcy5jb3Jkc1sxXT8ubGF0LFxuICAgICAgdXNlcl9pZDogdGhpcy5wcm9wcy5zZXNzaW9uPy5pZCxcbiAgICAgIGltYWdlOiB0aGlzLnByb3BzPy5pbWFnZSxcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLnN0YXRlLmRlc2NyaXB0aW9uLFxuICAgICAgZGlzdGFuY2U6IDQsXG4gICAgICBpZDogdGhpcy5zdGF0ZT8uaWRcbiAgICB9KS50aGVuKHRoaXMucHJvcHMuaGlzdG9yeT8ucHVzaChcIi9yb3V0ZXNcIikpO1xuICB9XG5cbiAgaGFuZGxlQ2hhbmdlKGZpZWxkKXtcbiAgICByZXR1cm4gZSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1tmaWVsZF06IGUuY3VycmVudFRhcmdldC52YWx1ZX0pXG4gICAgfVxuICB9XG5cbiAgb3Blbk1vZGFsKCl7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsJykuY2xhc3NMaXN0LnRvZ2dsZSgnb3Blbi1tb2RhbCcpO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC1iYWNrZ3JvdW5kJykuY2xhc3NMaXN0LnRvZ2dsZSgnb3Blbi1tb2RhbCcpO1xuICB9XG5cbiAgdG9nZ2xlRGlzYWJsZShlKXtcbiAgICBpZihlLnRhcmdldC52YWx1ZS5sZW5ndGggPiAwKXtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBkaXNhYmxlZDogZmFsc2VcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBkaXNhYmxlZDogdHJ1ZVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKXtcbiAgICBsZXQgYmVnaW5Qb2ludCA9IHRoaXMucHJvcHMuY29yZHNbMF07XG4gICAgbGV0IGVuZFBvaW50ID0gdGhpcy5wcm9wcy5jb3Jkc1sxXTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWZvcm1cIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J21vZGFsLXRvcCc+XG4gICAgICAgICAgPGgxIGNsYXNzTmFtZT1cIm15Um91dGVcIj5NeSBSb3V0ZTwvaDE+IFxuICAgICAgICAgIDxpIGlkPSdydW5uaW5nTWFpbicgY2xhc3NOYW1lPVwiZmFzIGZhLXJ1bm5pbmdcIj48L2k+XG4gICAgICAgICAgPGkgIGlkPSdzdGFyJ2NsYXNzTmFtZT1cImZhcyBmYS1zdGFyXCI+PC9pPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGZvcm0gaWQ9XCJyb3V0ZU1vZGFsRm9ybVwiIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdH0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J21vZGFsLXRleHQnPlxuICAgICAgICAgICAgPGxhYmVsPiBSb3V0ZSBuYW1lIChyZXF1aXJlZCkgPGJyLz5cbiAgICAgICAgICAgIDxpbnB1dCBpZD1cIm1vZGFsVGl0bGVcIiBjbGFzc05hbWU9XCJpbnB1dC1hcmVhXCIgdHlwZT1cInRleHRcIiBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2UoJ3RpdGxlJyl9IHZhbHVlPXt0aGlzLnN0YXRlLnRpdGxlfSAvPlxuICAgICAgICAgICAgPC9sYWJlbD4gXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J21vZGFsLXRleHQnPlxuICAgICAgICAgICAgPGxhYmVsID4gRGVzY3JpcHRpb24gPGJyLz5cbiAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzTmFtZT1cImlucHV0LWFyZWFcIiBpZD1cIm1vZGFsLWRlc2NyaXB0aW9uXCIgdHlwZT1cInRleHRcIiBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2UoJ2Rlc2NyaXB0aW9uJyl9IHBsYWNlaG9sZGVyPXsnQWRkIHNvbWUgbW9yZSBkZXRhaWxzIG9yIG5vdGVzJ30gdmFsdWU9e3RoaXMucHJvcHMuZGVzY3JpcHRpb259Lz5cbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1maW5lcHJpbnRcIj5cbiAgICAgICAgICAgIFB1YmxpYyByb3V0ZXMgYXJlIGZvciB0aGUgd2hvbGUgVHJhY2UgY29tbXVuaXR5IHRvIGVuam95LiBcbiAgICAgICAgICAgIElmIHlvdSBldmVyIGRlY2lkZSB0byBkZWxldGUgeW91ciBhY2NvdW50LCBcbiAgICAgICAgICAgIHBsZWFzZSBrbm93IHRoYXQgcHVibGljIHJvdXRlIHlvdSBjcmVhdGUgbWF5IHJlbWFpbi4gXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J21vZGFsLWJ1dHRvbnMnPlxuICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cIm1vZGFsLWVkaXQtYnV0dG9uXCIgb25DbGljaz17dGhpcy5vcGVuTW9kYWx9PkVkaXQgUm91dGU8L2gxPlxuICAgICAgICAgICAgPGJ1dHRvbiBpZD1cIm1vZGFsU2F2ZVwiIGNsYXNzTmFtZT1cIm1vZGFsLXNhdmUtYnV0dG9uXCIgZGlzYWJsZWQ9eyF0aGlzLnN0YXRlLnRpdGxlfT5TYXZlIHRvIE15IFJvdXRlczwvYnV0dG9uPlxuICAgICAgICAgICAgey8qIHtjb25zb2xlLmxvZyh7XG4gICAgICAgICAgICAgIHRpdGxlOiB0aGlzLnN0YXRlLnRpdGxlLFxuICAgICAgICAgICAgICBzdGFydF9sb25nOnRoaXMucHJvcHMuY29yZHNbMF0/LmxuZyxcbiAgICAgICAgICAgICAgc3RhcnRfbGF0OnRoaXMucHJvcHMuY29yZHNbMF0/LmxhdCxcbiAgICAgICAgICAgICAgZW5kX2xvbmc6dGhpcy5wcm9wcy5jb3Jkc1sxXT8ubG5nLFxuICAgICAgICAgICAgICBlbmRfbGF0OnRoaXMucHJvcHMuY29yZHNbMV0/LmxhdCxcbiAgICAgICAgICAgICAgdXNlcl9pZDogdGhpcy5wcm9wcy5zZXNzaW9uPy5pZCxcbiAgICAgICAgICAgICAgaW1hZ2U6IHRoaXMucHJvcHM/LmltYWdlLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5zdGF0ZT8uZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgIGRpc3RhbmNlOiA0LFxuICAgICAgICAgICAgICBpZDogdGhpcy5zdGF0ZT8uaWRcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9LCdhY3Rpb24tLS0tLS0tLS0nLHRoaXMucHJvcHM/LmFjdGlvbil9ICovfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Zvcm0+XG4gICAgICAgIHsvKiB7Y29uc29sZS5sb2coJ21vZGFsIHN0YXJ0Y29yZHMtLS0tLS0tLS0tJyxiZWdpblBvaW50Py5sbmcpfSAqL31cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNYXBNb2RhbDtcblxuLy8gY29uc3QgZnVuY05hbWUgPSAoKSA9PiB7IFxuLy8gICBvcGVuTW9kYWwoKVxuLy8gfVxuLy8gY29uc3Qgb3Blbk1vZGFsID0gKCkgPT4ge1xuLy8gICByZXR1cm4gN1xuLy8gfVxuLy8gZnVuY05hbWUgLy8gPT4gN1xuLy8gb3Blbk1vZGFsIC8vID0+IDdcblxuLy8gY29uc3QgY2xpY2sgPSAoY2FsbGJhY2spID0+IHtcbi8vICAgY2FsbGJhY2soKSBcbi8vIH0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBMaW5rLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmNvbnN0IFJvdXRlTmF2ID0gKHByb3BzKSA9PiB7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdXRlX25hdl9oZWFkXCI+IFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJuYXYtcm91dGVzLWxlZnRcIj5cbiAgICAgICAgPExpbmsgY2xhc3NOYW1lPSduYXZfbWFpbl9sb2dvJyB0bz1cIi9kYXNoYm9hcmRcIj4gVFJBQ0UgPC9MaW5rPlxuICAgICAgICA8aDEgY2xhc3NOYW1lPVwibmF2LXJvdXRlcy1sZWZ0LXJvdXRlXCI+Um91dGVzPC9oMT5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJuYXYtcm91dGVzLXJpZ2h0XCI+XG4gICAgICA8TGluayB0bz1cIi9yb3V0ZXNcIj5CYWNrIHRvIE15IFJvdXRlczwvTGluaz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlTmF2O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IE1hcE1vZGFsIGZyb20gJy4vbWFwX21vZGFsJztcbmltcG9ydCBSb3V0ZU5hdiBmcm9tICcuL3JvdXRlc19uYXYnO1xuaW1wb3J0IE1haW5Gb290ZXIgZnJvbSAnLi4vZm9vdGVyL21haW5fZm9vdGVyJ1xuXG5jbGFzcyBNYXBzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHNob3doMTogZmFsc2UsXG4gICAgICB0aXRsZTogdGhpcy5wcm9wcz8ucm91dGU/LnRpdGxlLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMucHJvcHM/LnJvdXRlPy5kZXNjcmlwdGlvbixcbiAgICAgIGRpc2FibGVkOiB0cnVlLFxuICAgICAgbG9jYXRpb246ICcnLFxuICAgICAgYWRkcmVzczogJycsXG4gICAgICBpbWFnZTogJycsXG4gICAgICBtYXJrczogXG4gICAgICB0aGlzLnByb3BzLmZvcm1UeXBlID09PSBcIkVkaXQgUm91dGVcIiA/XG4gICAgICBbe2xhdDogdGhpcy5wcm9wcy5yb3V0ZS5zdGFydF9sYXQsXG4gICAgICAgIGxuZzogdGhpcy5wcm9wcy5yb3V0ZS5zdGFydF9sb25nXG4gICAgICB9LHtsYXQ6IHRoaXMucHJvcHMucm91dGUuZW5kX2xhdCxcbiAgICAgICBsbmc6IHRoaXMucHJvcHMucm91dGUuZW5kX2xvbmdcbiAgICAgIH1dIDpbXVxuICAgIH1cbiAgICB0aGlzLnBvaW50cyA9IHRoaXMuc3RhdGU/Lm1hcmtzO1xuICAgIHRoaXMuZGlyZWN0aW9uc1NlcnZpY2UgPSBuZXcgZ29vZ2xlLm1hcHMuRGlyZWN0aW9uc1NlcnZpY2UoKTtcbiAgICB0aGlzLmRpcmVjdGlvbnNSZW5kZXJlciA9IG5ldyBnb29nbGUubWFwcy5EaXJlY3Rpb25zUmVuZGVyZXIoKTtcbiAgICB0aGlzLmdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7XG4gICAgdGhpcy5yZW5kZXJNYXJrZXJzID0gdGhpcy5yZW5kZXJNYXJrZXJzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZW1vdmVMYXN0UG9pbnQgPSB0aGlzLnJlbW92ZUxhc3RQb2ludC5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVtb3ZlQWxsUG9pbnRzID0gdGhpcy5yZW1vdmVBbGxQb2ludHMuYmluZCh0aGlzKTtcbiAgICB0aGlzLmlkID0gdGhpcy5wcm9wcz8uc2Vzc2lvbj8uaWQ7XG4gICAgdGhpcy5vcGVuTW9kYWwgPSB0aGlzLm9wZW5Nb2RhbC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2VhcmNoQWRkcmVzcyA9IHRoaXMuc2VhcmNoQWRkcmVzcy5iaW5kKHRoaXMpO1xuICAgIHRoaXMudXBkYXRlID0gdGhpcy51cGRhdGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmdldFRodW1ibmFpbCA9IHRoaXMuZ2V0VGh1bWJuYWlsLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zdGFydExhdCA9IHRoaXM/LnBvaW50c1swXT8ubGF0XG4gICAgdGhpcy5zdGFydExuZyA9IHRoaXM/LnBvaW50c1swXT8ubG5nXG4gICAgdGhpcy5lbmRMYXQgPSB0aGlzPy5wb2ludHNbMV0/LmxhdFxuICAgIHRoaXMuZW5kTGFuZyA9IHRoaXM/LnBvaW50c1sxXT8ubG5nXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpe1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBjZW50ZXI6IHtsYXQ6IDQwLjYzMDI5MjMsIGxuZzogLTc0LjEwNzcwNDV9LFxuICAgICAgem9vbTogMTUsXG4gICAgICBtYXBJZDogJzJjZjlkZmY0MDFkMjBjZWYnLFxuICAgICAgY2xpY2thYmxlSWNvbnM6IGZhbHNlLFxuICAgICAgbWF4Wm9vbTogMTVcbiAgICB9O1xuICAgIHRoaXMubWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcCh0aGlzLm1hcHN0YXJ0LCBvcHRpb25zKTtcbiAgICB0aGlzLmRpcmVjdGlvbnNSZW5kZXJlci5zZXRNYXAodGhpcy5tYXApXG4gICAgLy8gICAgICAgICAgd2hlcmUgdGhlIG1hcCBpcyBnb2luZyAvIG9wdGlvbnNcbiAgICB0aGlzLm1hcC5hZGRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG5cdFx0XHQvLyBhZGRzIGxhdC9sbmcgb2JqZWN0IHRvIHdheXBvaW50cyBhcnJheVxuICAgICAgaWYodGhpcy5wb2ludHMubGVuZ3RoID4gMSkgdGhpcy5wb2ludHMucG9wKClcblx0XHRcdHRoaXMucG9pbnRzLnB1c2goeyBsYXQ6IGUubGF0TG5nLmxhdCgpLCBsbmc6IGUubGF0TG5nLmxuZygpIH0pO1xuICAgICAgLy8gY29uc29sZS5sb2coXCJwb2ludHMtLS0tLS0tLS0tXCIsdGhpcy5wb2ludHMpXG4gICAgICAvLyBjb25zb2xlLmxvZyhcImlkLS0tLS0tLS0tLVwiLHRoaXMuaWQpXG4gICAgICB0aGlzLnRvZ2dsZURpc2FibGUoKVxuXHRcdFx0dGhpcy5yZW5kZXJNYXJrZXJzKCk7XG5cdFx0fSk7XG5cbiAgaWYgKHRoaXMucHJvcHMuZm9ybVR5cGUgPT09IFwiRWRpdCBSb3V0ZVwiKSB7XG4gICAgICAvLyB0aGlzLnBvaW50cy5wdXNoKHtcbiAgICAgIC8vICAgbGF0OiB0aGlzLnByb3BzLnJvdXRlLnN0YXJ0X2xhdCxcbiAgICAgIC8vICAgbG5nOiB0aGlzLnByb3BzLnJvdXRlLnN0YXJ0X2xvbmdcbiAgICAgIC8vIH0se2xhdDogdGhpcy5wcm9wcy5yb3V0ZS5lbmRfbGF0LFxuICAgICAgLy8gIGxuZzogdGhpcy5wcm9wcy5yb3V0ZS5lbmRfbG9uZ1xuICAgICAgLy8gfSlcblx0XHRcdHRoaXMucmVuZGVyTWFya2VycygpO1xuICAgICAgdGhpcy50b2dnbGVEaXNhYmxlKClcbiAgfVxufVxuXG4gIHJlbmRlck1hcmtlcnMoKXtcbiAgICBjb25zdCBiZWdpblBvaW50ID0gdGhpcy5wb2ludHNbMF07XG4gICAgLy8gY29uc29sZS5sb2coJ2JlZ2luUG9pdG49PT09PT09PT09PScsYmVnaW5Qb2ludClcbiAgICBsZXQgZW5kUG9pbnQgPSB0aGlzLnBvaW50c1t0aGlzLnBvaW50cy5sZW5ndGggLSAxXTtcbiAgICB0aGlzLnNldFN0YXRlKHtbXCJtYXJrc1wiXTogdGhpcy5wb2ludHN9KVxuXG4gICAgdGhpcy5kaXJlY3Rpb25zU2VydmljZS5yb3V0ZSh7XG4gICAgICBvcmlnaW46IGJlZ2luUG9pbnQsXG4gICAgICBkZXN0aW5hdGlvbjogZW5kUG9pbnQsXG4gICAgICB0cmF2ZWxNb2RlOiBnb29nbGUubWFwcy5UcmF2ZWxNb2RlLldBTEtJTkcsXG4gICAgICB1bml0U3lzdGVtOiBnb29nbGUubWFwcy5Vbml0U3lzdGVtLklNUEVSSUFMXG4gICAgfSxcbiAgICAocmVzcG9uc2UsIHN0YXR1cykgPT4ge1xuICAgICAgaWYgKHN0YXR1cyA9PT0gJ09LJykge1xuICAgICAgICAvLyBjb25zdCBkaXN0YW5jZSA9IHJlc3BvbnNlLnJvdXRlc1swXS5sZWdzWzBdLmRpc3RhbmNlLnRleHQ7XG4gICAgICAgIGxldCB0aHVtYm5haWwgPSB0aGlzLmdldFRodW1ibmFpbChyZXNwb25zZSk7XG4gICAgICAgIC8vIGxldCBib3VuZHMgPSByZXNwb25zZS5yb3V0ZXNbMF0uYm91bmRzO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbnNSZW5kZXJlci5zZXREaXJlY3Rpb25zKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaW1hZ2U6IHRodW1ibmFpbFxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmFsZXJ0KFwiRGlyZWN0aW9ucyByZXF1ZXN0IGZhaWxlIGR1ZSB0byBcIiArIHN0YXR1cyk7XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHVwZGF0ZShmaWVsZCkge1xuXHRcdHJldHVybiAoZSkgPT4ge1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7IFtmaWVsZF06IGUuY3VycmVudFRhcmdldC52YWx1ZSB9KTtcblx0XHR9O1xuXHR9XG5cbiAgc2VhcmNoQWRkcmVzcyhhZGRyZXNzKSB7XG5cdFx0dGhpcy5nZW9jb2Rlci5nZW9jb2RlKHsgYWRkcmVzczogYWRkcmVzcyB9LCAocmVzLCBzdGF0dXMpID0+IHtcblx0XHRcdGNvbnN0IGxvY2F0aW9uTmFtZSA9IHJlc1swXTtcblx0XHRcdGlmIChzdGF0dXMgPT09IFwiT0tcIikge1xuXHRcdFx0XHR0aGlzLm1hcC5zZXRDZW50ZXIocmVzWzBdLmdlb21ldHJ5LmxvY2F0aW9uKTtcblx0XHRcdFx0dGhpcy5zZXRTdGF0ZSh7IFtcImxvY2F0aW9uXCJdOiByZXNbMF0gfSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuICByZW1vdmVMYXN0UG9pbnQoKXtcbiAgICB0aGlzLnBvaW50cy5wb3AoKTtcbiAgICB0aGlzLnJlbmRlck1hcmtlcnMoKTtcbiAgICBpZiAodGhpcy5wb2ludHMubGVuZ3RoID09PSAxKXtcbiAgICAgIHRoaXMucG9pbnRzID0gW11cbiAgICAgIHRoaXMucmVuZGVyTWFya2VycygpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7ZGlzYWJsZWQ6IHRydWV9KVxuICAgIH1cbiAgICB0aGlzLmRpcmVjdGlvbnNSZW5kZXJlci5zZXREaXJlY3Rpb25zKHsgcm91dGVzOiBbXSB9KTtcbiAgfVxuXG4gICBnZXRUaHVtYm5haWwocmVzKXtcbiAgICBjb25zdCBzdGFydCA9ICdodHRwczovL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvc3RhdGljbWFwPyc7XG4gICAgY29uc3Qgc2l6ZSA9ICdzaXplPTIwMHgyMDAnXG4gICAgY29uc3Qgc2NhbGUgPSAnc2NhbGU9MidcbiAgICBjb25zdCBtYXJrZXJzID0gYG1hcmtlcnM9c2l6ZTp0aW55fCR7dGhpcz8ucG9pbnRzWzBdPy5sYXR9LCR7dGhpcz8ucG9pbnRzWzBdPy5sbmd9fCR7dGhpcz8ucG9pbnRzWzFdPy5sYXR9LCR7dGhpcz8ucG9pbnRzWzFdPy5sbmd9YFxuICAgIGNvbnN0IHBhdGggPSBgcGF0aD1jb2xvcjoweGZmMDAwMGZmfCR7dGhpcz8ucG9pbnRzWzBdPy5sYXR9LCR7dGhpcz8ucG9pbnRzWzBdPy5sbmd9fCR7dGhpcz8ucG9pbnRzWzFdPy5sYXR9LCR7dGhpcz8ucG9pbnRzWzFdPy5sbmd9YFxuICAgIC8vIGxldCBsb2NhdGlvbiA9IHJlcy5yb3V0ZXNbMF0ub3ZlcnZpZXdfcG9seWxpbmU7XG4gICAgLy8gbGV0IGxvY2F0aW9uID0gdGhpcz8uc3RhcnRMYXR8dGhpcz8uc3RhcnRMbmd8dGhpcz8uZW5kTGF0fHRoaXM/LmVuZExhbmdcbiAgICAvLyBsb2NhdGlvbiA9IFwicGF0aD1lbmM6XCIuY29uY2F0KGxvY2F0aW9uKVxuICAgIGxldCBrZXkgPSBga2V5PUFJemFTeUQtelVJYXdBZ3RRM3FYSDcxZWt0WXlEbV9EQm8tQ1pHb2BcbiAgICBsZXQgdXJsID0gW11cbiAgICB1cmwucHVzaChzdGFydCxzaXplLHNjYWxlLG1hcmtlcnMscGF0aCxrZXkpXG4gICAgdXJsID0gdXJsLmpvaW4oXCImXCIpXG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHJlbW92ZUFsbFBvaW50cygpe1xuICAgIGlmICh0aGlzLnBvaW50cy5sZW5ndGggPiAwKXtcbiAgICAgIHRoaXMucG9pbnRzID0gW11cbiAgICAgIHRoaXMuc2V0U3RhdGUoe2Rpc2FibGVkOiB0cnVlfSlcbiAgICB9XG4gICAgdGhpcy5kaXJlY3Rpb25zUmVuZGVyZXIuc2V0RGlyZWN0aW9ucyh7IHJvdXRlczogW10gfSk7XG4gIH1cblxuICBvcGVuTW9kYWwoKXtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWwnKS5jbGFzc0xpc3QudG9nZ2xlKCdvcGVuLW1vZGFsJyk7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsLWJhY2tncm91bmQnKS5jbGFzc0xpc3QudG9nZ2xlKCdvcGVuLW1vZGFsJyk7XG4gIH1cblxuICAgdG9nZ2xlRGlzYWJsZSgpe1xuICAgICBpZih0aGlzLnByb3BzLmZvcm1UeXBlID09PSAnRWRpdCBSb3V0ZScgJiYgdGhpcy5wb2ludHMubGVuZ3RoID09PSAyKXtcbiAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgIH0pXG4gICAgIH1cbiAgICBpZih0aGlzLnBvaW50cy5sZW5ndGggPT09IDIpe1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGRpc2FibGVkOiB0cnVlXG4gICAgICB9KVxuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKXtcbiAgICByZXR1cm4oXG4gICAgICA8ZGl2PlxuICAgICAgICB7Y29uc29sZS5sb2coJ3BvaW50MDAwMDAwMDAwMDAwMCcsdGhpcz8ucG9pbnRzWzBdPy5sYXQrJywnK3RoaXM/LnBvaW50c1swXT8ubG5nKSB8fCAnJ31cbiAgICAgICA8Um91dGVOYXYgLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFwQnV0dG9uc1wiPlxuICAgICAgICA8ZGl2IGlkPVwic2VhcmNoQmFyTWFpblwiPlxuICAgICAgICAgIDxmb3JtIGNsYXNzTmFtZT1cInNlYXJjaC1iYXJcIiBvblN1Ym1pdD17KCkgPT4gdGhpcy5zZWFyY2hBZGRyZXNzKGFkZHJlc3MpfT5cbiAgICAgICAgICAgIDxpbnB1dCBpZD1cInNlYXJjaC1iYXJcIlxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJpbnB1dCBnZW9jb2RlclwiXG4gICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJDb21pbmcgU29vbiAoU2VhcmNoIGFkZHJlc3MpIC0gQ2xpY2sgb24gbWFwIHRvIGFkZCBtYXJrZXJzIC0gMiBNYXJrZXJzIG5lZWRlZCB0byBtYWtlIHJvdXRlXCJcbiAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuYWRkcmVzc31cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMudXBkYXRlKFwiYWRkcmVzc1wiKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7LyogPGJ1dHRvbiBpZD1cImdlb2NvZGVyLXN1Ym1pdFwiPlNlYXJjaDwvYnV0dG9uPiAqL31cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGlkPVwibWFwQnV0dG9uc1JpZ2h0XCI+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJtYXBPdGhlckJ1dHRvbnNcIiBvbkNsaWNrPXt0aGlzLnJlbW92ZUxhc3RQb2ludH0+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLXVuZG8tYWx0XCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwibWFwT3RoZXJCdXR0b25zXCIgb25DbGljaz17dGhpcy5yZW1vdmVBbGxQb2ludHN9PjxpIGNsYXNzTmFtZT1cImZhciBmYS10cmFzaC1hbHRcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJtYXBTYXZlQnV0dG9uc1wiIG9uQ2xpY2s9e3RoaXMub3Blbk1vZGFsfSBkaXNhYmxlZD17dGhpcy5zdGF0ZS5kaXNhYmxlZH0+U2F2ZTwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBpZD0nbWFwJyByZWY9eyhtYXApID0+ICh0aGlzLm1hcHN0YXJ0ID0gbWFwKX0+PC9kaXY+IFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1iYWNrZ3JvdW5kXCIgb25DbGljaz17KCkgPT4gdGhpcy5vcGVuTW9kYWwoKX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdtb2RhbCcgb25DbGljaz17KGUpID0+IGUuc3RvcFByb3BhZ2F0aW9uKCl9ID5cbiAgICAgICAgICA8TWFwTW9kYWwgIGFjdGlvbj17dGhpcy5wcm9wcz8uYWN0aW9ufSBjb3Jkcz17dGhpcy5zdGF0ZS5tYXJrc30gXG4gICAgICAgICAgc2Vzc2lvbj17dGhpcy5wcm9wcy5zZXNzaW9ufSBpbWFnZT17dGhpcy5zdGF0ZS5pbWFnZX0gdGl0bGU9e3RoaXMuc3RhdGUudGl0bGV9IFxuICAgICAgICAgIGRlc2NyaXB0aW9uPXt0aGlzLnByb3BzPy5yb3V0ZT8uZGVzY3JpcHRpb259IGhpc3Rvcnk9e3RoaXMucHJvcHM/Lmhpc3Rvcnl9XG4gICAgICAgICAgcm91dGU9e3RoaXMucHJvcHMucm91dGV9IGZvcm1UeXBlPXt0aGlzLnByb3BzLmZvcm1UeXBlfSByb3V0ZUlkPXt0aGlzLnByb3BzLnJvdXRlSWR9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxNYWluRm9vdGVyLz5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNYXBzOyIsImltcG9ydCB7Y29ubmVjdH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgY3JlYXRlUm91dGUgfSBmcm9tICcuLi8uLi9hY3Rpb25zL3JvdXRlc19hY3Rpb24nO1xuaW1wb3J0IFJvdXRlRm9ybSBmcm9tICcuL3JvdXRlc19mb3JtJ1xuXG5jb25zdCBtc3RwID0gKHN0b3JlLCBvd25Qcm9wcykgPT4ge1xuICByZXR1cm4ge1xuICAgIHRpdGxlOiAnJyxcbiAgICBzZXNzaW9uOiBzdG9yZS5zZXNzaW9uLFxuICAgIGZvcm1UeXBlOiBcIkNyZWF0ZSBSb3V0ZVwiLFxuICAgIGhpc3Rvcnk6IG93blByb3BzLmhpc3RvcnlcbiAgfTtcbn07XG5cbmNvbnN0IG1kdHAgPSBkaXNwYXRjaCA9PiB7XG4gIHJldHVybiB7XG4gICAgYWN0aW9uOiByb3V0ZSA9PiBkaXNwYXRjaChjcmVhdGVSb3V0ZShyb3V0ZSkpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtc3RwLG1kdHApKFJvdXRlRm9ybSk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgTWFwcyBmcm9tICcuL21hcCdcblxuY29uc3QgUm91dGVGb3JtID0gKHtzZXNzaW9uLCBhY3Rpb24sIGhpc3Rvcnl9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxici8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdXRlRm9ybVRvcFwiPlxuICAgICAgPC9kaXY+XG4gICAgICB7Lyoge2NvbnNvbGUubG9nKCdyb3V0ZWZvcm0tLS0tLS0tJyxzZXNzaW9uKX0gKi99XG4gICAgICA8TWFwcyBzZXNzaW9uPXtzZXNzaW9ufSBhY3Rpb249e2FjdGlvbn0gaGlzdG9yeT17aGlzdG9yeX0gLz4gXG4gICAgICA8YnIvPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlRm9ybTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBMaW5rLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgTWFpbk5hdiBmcm9tICcuLy4uL21haW5OYXYvbWFpbl9uYXYnO1xuaW1wb3J0IE1haW5Gb290ZXIgZnJvbSAnLi4vZm9vdGVyL21haW5fZm9vdGVyJ1xuaW1wb3J0IHsgZGVsZXRlUm91dGUgfSBmcm9tICcuLi8uLi91dGlsL3JvdXRlX2FwaV91dGlsJztcblxuXG5jbGFzcyBSb3V0ZVNob3cgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnR7XG4gIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICBzdXBlcihwcm9wcylcbiAgfVxuICBjb21wb25lbnREaWRNb3VudCgpe1xuICBpZighdGhpcy5wcm9wcy5yb3V0ZVt0aGlzLnByb3BzLm1hdGNoLnBhcmFtcy5yb3V0ZUlkXSlcbiAgICB0aGlzLnByb3BzLmZldGNoUm91dGUodGhpcy5wcm9wcy5tYXRjaC5wYXJhbXMucm91dGVJZClcbiAgfVxuICByZW5kZXIoKXtcbiAgICBjb25zdCB7cm91dGUsIGN1cnJlbnRVc2VyLCBkZWxldGVSb3V0ZX0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybihcbiAgICAgIDxkaXY+XG4gICAgICAgIDxNYWluTmF2Lz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3V0ZVNob3dBbGxcIiA+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3V0ZVNob3dUb3BcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm91dGVTaG93VGl0bGVcIj5cbiAgICAgICAgICAgIDxMaW5rIHRvPScvcm91dGVzLycgY2xhc3NOYW1lPVwicm91dGVTaG93VGl0bGVMaW5rXCI+PGgxID5NeSBSdW5uaW5nIFJvdXRlcy8gICA8L2gxPjwvTGluaz4gXG4gICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwicm91dGVTaG93VGl0bGVyb3V0ZVwiPntyb3V0ZS50aXRsZX08L2gxPlxuICAgICAgICAgICAgPC9kaXY+IFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3V0ZVNob3dIZWFkZXJcIj5cbiAgICAgICAgICAgICAgPGkgaWQ9J3N0YXInY2xhc3M9XCJmYXMgZmEtc3RhclwiPjwvaT4gIFxuICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwicm91dGVTaG93SGVhZGVyVGl0bGVcIj4ge3JvdXRlLnRpdGxlfTwvaDE+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxMaW5rIHRvPXtgL3JvdXRlcy9gfT4gPGJ1dHRvbiBjbGFzc05hbWU9XCJyb3V0ZXNTaG93RWRpdFwiIG9uQ2xpY2s9eygpPT4gZGVsZXRlUm91dGUocm91dGUuaWQpfT5EZWxldGU8L2J1dHRvbj48L0xpbms+XG4gICAgICAgICAgICA8TGluayB0bz17YC9yb3V0ZXMvJHtyb3V0ZS5pZH0vZWRpdGB9ID48YnV0dG9uIGNsYXNzTmFtZT1cInJvdXRlc1Nob3dFZGl0XCI+RWRpdDwvYnV0dG9uPjwvTGluaz5cbiAgICAgICAgICA8L2Rpdj4gXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3V0ZXNTaG93TWFpblwiPlxuICAgICAgICAgICAgey8qIDxpbWcgY2xhc3NOYW1lPVwicm91dGVTaG93TWFwXCIgc3JjPXtyb3V0ZS5pbWFnZX0gLz4gKi99XG4gICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cInJvdXRlU2hvd01hcFwiIHNyYz17cm91dGUuaW1hZ2V9IC8+XG4gICAgICAgICAgICA8ZGl2IGlkPVwicnRTaG93RXh0cmFcIj5cbiAgICAgICAgICAgICAgPGgxPiA8aSBjbGFzc05hbWU9XCJpY29uXCIgaWQ9J3Nob3dVc2VySWNvbicgY2xhc3NOYW1lPVwiZmFzIGZhLXVzZXItY2lyY2xlXCI+PC9pPiBCeSB7Y3VycmVudFVzZXIuZW1haWx9PC9oMT5cbiAgICAgICAgICAgICAgPGgxIGlkPSdydFNob3dEZXNjJz57cm91dGUuZGVzY3JpcHRpb259PC9oMT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPE1haW5Gb290ZXIvPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlU2hvd1xuIiwiaW1wb3J0IHtjb25uZWN0fSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge2ZldGNoUm91dGUsIGRlbGV0ZVJvdXRlIH0gZnJvbSBcIi4uLy4uL2FjdGlvbnMvcm91dGVzX2FjdGlvblwiXG5pbXBvcnQgUm91dGVTaG93IGZyb20gXCIuL3JvdXRlc19zaG93XCJcblxuXG5jb25zdCBtc3RwID0gKHN0b3JlLCBvd25Qcm9wcykgPT4ge1xuICBjb25zdCByb3V0ZUlkID0gb3duUHJvcHMubWF0Y2gucGFyYW1zLnJvdXRlSWRcbiAgcmV0dXJuIHsgXG4gICAgcm91dGU6IHN0b3JlLmVudGl0aWVzLnJvdXRlc1tyb3V0ZUlkXSB8fCB7fSxcbiAgICBjdXJyZW50VXNlcjogc3RvcmUuZW50aXRpZXMudXNlcnNbc3RvcmUuc2Vzc2lvbi5pZF0sXG4gIH07XG59O1xuXG5jb25zdCBtZHRwID0gZGlzcGF0Y2ggPT4ge1xuICByZXR1cm4ge1xuICAgIGZldGNoUm91dGU6IChyb3V0ZUlkKSA9PiBkaXNwYXRjaChmZXRjaFJvdXRlKHJvdXRlSWQpKSxcbiAgICBkZWxldGVSb3V0ZTogKHJvdXRlSWQpID0+IGRpc3BhdGNoKGRlbGV0ZVJvdXRlKHJvdXRlSWQpKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobXN0cCxtZHRwKShSb3V0ZVNob3cpOyIsImltcG9ydCB7Y29ubmVjdH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgdXBkYXRlUm91dGUsIGZldGNoUm91dGUgfSBmcm9tICcuLi8uLi9hY3Rpb25zL3JvdXRlc19hY3Rpb24nO1xuaW1wb3J0IE1hcCBmcm9tICcuL21hcCdcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuXG5jbGFzcyBFZGl0Um91dGVGb3JtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50e1xuICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgc3VwZXIocHJvcHMpXG4gIH1cbiAgY29tcG9uZW50RGlkTW91bnQoKXtcbiAgICBjb25zdCByb3V0ZUlkID0gdGhpcy5wcm9wcy5tYXRjaC5wYXJhbXMucm91dGVJZDtcblx0XHRpZiAoIXRoaXMucHJvcHMucm91dGVzW3JvdXRlSWRdKSB7XG5cdFx0XHR0aGlzLnByb3BzLmZldGNoUm91dGUocm91dGVJZCk7XG5cdFx0fVxuICB9XG4gIHJlbmRlcigpe1xuICAgIGNvbnN0IHsgcm91dGVzLCBmb3JtVHlwZSwgYWN0aW9uLCBoaXN0b3J5IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHJvdXRlSWQgPSB0aGlzLnByb3BzLm1hdGNoLnBhcmFtcy5yb3V0ZUlkO1xuICAgIC8vIGRlYnVnZ2VyXG4gICAgcmV0dXJuIHJvdXRlc1tyb3V0ZUlkXSA/IChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxNYXAgcm91dGU9e3JvdXRlc1tyb3V0ZUlkXX0gZm9ybVR5cGU9e2Zvcm1UeXBlfSBhY3Rpb249e2FjdGlvbn0gcm91dGVJZD17cm91dGVJZH0gaGlzdG9yeT17aGlzdG9yeX0vPlxuICAgICAgPC9kaXY+XG4gICAgKTogbnVsbDtcbiAgfVxufTtcblxuY29uc3QgbXN0cCA9IChzdG9yZSwgb3duUHJvcHMpID0+IHtcbiAgLy8gY29uc29sZS5sb2coJ2NvbnRhaW5lci0tLS0tLScsc3RvcmUpXG4gIC8vIGRlYnVnZ2VyXG4gIGNvbnN0IHJvdXRlSWQgPSBvd25Qcm9wcy5tYXRjaC5wYXJhbXMucm91dGVJZFxuICByZXR1cm4ge1xuICAgIHJvdXRlczogc3RvcmUuZW50aXRpZXMucm91dGVzLFxuICAgIGZvcm1UeXBlOiAnRWRpdCBSb3V0ZScsXG4gICAgaGlzdG9yeTogb3duUHJvcHMuaGlzdG9yeVxuICB9O1xufTtcblxuY29uc3QgbWR0cCA9IGRpc3BhdGNoID0+IHtcbiAgLy8gZGVidWdnZXJcbiAgcmV0dXJuIHtcbiAgICBmZXRjaFJvdXRlOiByb3V0ZUlkID0+IGRpc3BhdGNoKGZldGNoUm91dGUocm91dGVJZCkpLFxuICAgIGFjdGlvbjogcm91dGVJZCA9PiBkaXNwYXRjaCh1cGRhdGVSb3V0ZShyb3V0ZUlkKSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1zdHAsbWR0cCkoRWRpdFJvdXRlRm9ybSk7IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcbiAgUm91dGUsXG4gIFJlZGlyZWN0LFxuICBTd2l0Y2gsXG4gIExpbmssXG4gIEhhc2hSb3V0ZXJcbn0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBBdXRoUm91dGUsIFByb3RlY3RlZFJvdXRlIH0gZnJvbSAnLi4vdXRpbC9yb3V0ZV91dGlsJztcbmltcG9ydCBTaWduVXBGb3JtQ29udGFpbmVyIGZyb20gJy4vc2Vzc2lvbl9mb3JtL3NpZ251cF9mb3JtX2NvbnRhaW5lcic7XG5pbXBvcnQgTG9nSW5Gb3JtQ29udGFpbmVyIGZyb20gJy4vc2Vzc2lvbl9mb3JtL2xvZ2luX2Zvcm1fY29udGFpbmVyJztcbmltcG9ydCBTcGxhc2hDb250YWluZXIgZnJvbSAnLi9zZXNzaW9uX2Zvcm0vc3BsYXNoX2NvbnRhaW5lcic7XG5pbXBvcnQgRGFzaGJvYXJkQ29udGFpbmVyIGZyb20gJy4vZGFzaGJvYXJkL2Rhc2hib2FyZF9jb250YWluZXInO1xuaW1wb3J0IFdvcmtPdXRJbmRleCBmcm9tICcuL3dvcmtvdXRzL3dvcmtvdXRfaW5kZXhfY29udGFpbmVyJztcbmltcG9ydCBXb3Jrb3V0Rm9ybSBmcm9tICcuL3dvcmtvdXRzL3dvcmtvdXRfZm9ybV9jb250YWluZXInO1xuaW1wb3J0IFdvcmtvdXRTaG93IGZyb20gJy4vd29ya291dHMvd29ya291dF9zaG93X2NvbnRhaW5lcic7XG5pbXBvcnQgV29ya291dEVkaXRGb3JtQ29udGFpbmVyIGZyb20gJy4vd29ya291dHMvd29ya291dF9lZGl0X2Zvcm1fY29udGFpbmVyJztcbmltcG9ydCBSb3V0ZXNJbmRleENvbnRhaW5lciBmcm9tICcuL3JvdXRlcy9yb3V0ZXNfaW5kZXhfY29udGFpbmVyJ1xuaW1wb3J0IFJvdXRlRm9ybSBmcm9tICcuL3JvdXRlcy9yb3V0ZXNfZm9ybV9jb250YWluZXInXG5pbXBvcnQgUm91dGVzU2hvd0NvbnRhaW5lciBmcm9tICcuL3JvdXRlcy9yb3V0ZXNfc2hvd19jb250YWluZXInXG5pbXBvcnQgUm91dGVzRWRpdENvbnRhaW5lciBmcm9tICcuL3JvdXRlcy9yb3V0ZXNfZWRpdF9jb250YWluZXInXG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcblx0cmV0dXJuKFxuXHRcdDxkaXY+XG4gICAgICA8aGVhZGVyIGNsYXNzTmFtZT1cImhlYWRlclwiPlxuICAgICAgICB7LyogPGgxIGNsYXNzTmFtZT1cImxvZ29cIj5UcmFjZTwvaDE+ICovfVxuICAgICAgPC9oZWFkZXI+XG4gICAgICA8QXV0aFJvdXRlIGV4YWN0IHBhdGg9XCIvXCIgY29tcG9uZW50PXtTcGxhc2hDb250YWluZXJ9Lz5cbiAgICAgIDxBdXRoUm91dGUgZXhhY3QgcGF0aD1cIi9sb2dpblwiICBjb21wb25lbnQ9e0xvZ0luRm9ybUNvbnRhaW5lcn0vPlxuICAgICAgPEF1dGhSb3V0ZSBleGFjdCBwYXRoPVwiL3NpZ251cFwiICBjb21wb25lbnQ9e1NpZ25VcEZvcm1Db250YWluZXJ9Lz5cbiAgICAgIDxQcm90ZWN0ZWRSb3V0ZSBleGFjdCBwYXRoPVwiL25ldy93b3Jrb3V0c1wiIGNvbXBvbmVudD17V29ya291dEZvcm19Lz5cbiAgICAgIDxQcm90ZWN0ZWRSb3V0ZSBleGFjdCBwYXRoPVwiL2Rhc2hib2FyZFwiIGNvbXBvbmVudD17RGFzaGJvYXJkQ29udGFpbmVyfS8+XG4gICAgICA8UHJvdGVjdGVkUm91dGUgZXhhY3QgcGF0aD1cIi93b3Jrb3V0c1wiIGNvbXBvbmVudD17V29ya091dEluZGV4fS8+XG4gICAgICA8UHJvdGVjdGVkUm91dGUgZXhhY3QgcGF0aD1cIi93b3Jrb3V0cy86d29ya291dElkXCIgY29tcG9uZW50PXtXb3Jrb3V0U2hvd30vPlxuICAgICAgPFByb3RlY3RlZFJvdXRlIGV4YWN0IHBhdGg9XCIvd29ya291dHMvOndvcmtvdXRJZC9lZGl0XCIgY29tcG9uZW50PXtXb3Jrb3V0RWRpdEZvcm1Db250YWluZXJ9Lz5cbiAgICAgIDxQcm90ZWN0ZWRSb3V0ZSBleGFjdCBwYXRoPVwiL3JvdXRlc1wiIGNvbXBvbmVudD17Um91dGVzSW5kZXhDb250YWluZXJ9Lz5cbiAgICAgIDxQcm90ZWN0ZWRSb3V0ZSBleGFjdCBwYXRoPVwiL3JvdXRlcy86cm91dGVJZFwiIGNvbXBvbmVudD17Um91dGVzU2hvd0NvbnRhaW5lcn0vPlxuICAgICAgPFByb3RlY3RlZFJvdXRlIGV4YWN0IHBhdGg9XCIvcm91dGVzLzpyb3V0ZUlkL2VkaXRcIiBjb21wb25lbnQ9e1JvdXRlc0VkaXRDb250YWluZXJ9Lz5cbiAgICAgIDxQcm90ZWN0ZWRSb3V0ZSBleGFjdCBwYXRoPVwiL25ldy9yb3V0ZXNcIiBjb21wb25lbnQ9e1JvdXRlRm9ybX0vPlxuICAgICAgey8qIDxQcm90ZWN0ZWRSb3V0ZSBleGFjdCBwYXRoPVwiL2Rhc2hib2FyZC86dXNlcklkXCIgY29tcG9uZW50PXtEYXNoYm9hcmRDb250YWluZXJ9Lz5cbiAgICAgIDxQcm90ZWN0ZWRSb3V0ZSBleGFjdCBwYXRoPVwiL3JvdXRlcy86cm91dGVJZFwiIGNvbXBvbmVudD17Um91dGVTaG93Q29udGFpbmVyfS8+ICovfVxuXHRcdDwvZGl2PlxuXHQpXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBIYXNoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgQXBwIGZyb20gXCIuL2FwcFwiXG5cbmNvbnN0IFJvb3QgPSAoeyBzdG9yZSB9KSA9PiAoXG4gICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgICAgIDxIYXNoUm91dGVyPlxuICAgICAgICAgIDxBcHAgLz5cbiAgICAgICAgPC9IYXNoUm91dGVyPlxuICAgIDwvUHJvdmlkZXI+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBSb290OyIsImZ1bmN0aW9uIGNyZWF0ZVRodW5rTWlkZGxld2FyZShleHRyYUFyZ3VtZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2gsXG4gICAgICAgIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIHRodW5rID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKCk7XG50aHVuay53aXRoRXh0cmFBcmd1bWVudCA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZTtcblxuZXhwb3J0IGRlZmF1bHQgdGh1bms7IiwiaW1wb3J0IHtcbiAgUkVDRUlWRV9ST1VURSxcbiAgUkVDRUlWRV9BTExfUk9VVEVTLFxuICBSRU1PVkVfUk9VVEUsXG4gIENMRUFSX1JPVVRFU1xufSBmcm9tICcuLi9hY3Rpb25zL3JvdXRlc19hY3Rpb24nO1xuXG5pbXBvcnQge1xuICAgIExPR09VVF9DVVJSRU5UX1VTRVIsXG59IGZyb20gJy4uL2FjdGlvbnMvc2Vzc2lvbl9hY3Rpb25zJztcblxuXG5cbmNvbnN0IHJvdXRlUmVkdWNlciA9IChzdGF0ZSA9IHt9LCBhY3Rpb24pID0+IHtcbiAgT2JqZWN0LmZyZWV6ZShzdGF0ZSlcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgUkVDRUlWRV9ST1VURTpcbiAgICAgIHJldHVybiBhY3Rpb24ucm91dGVcbiAgICBjYXNlIFJFQ0VJVkVfQUxMX1JPVVRFUzpcbiAgICAgIC8vIGRlYnVnZ2VyXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIGFjdGlvbi5yb3V0ZXMpXG4gICAgY2FzZSBSRU1PVkVfUk9VVEU6XG4gICAgICAvLyBkZWJ1Z2dlclxuICAgICAgY29uc3QgbmV3U3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgYWN0aW9uLnJvdXRlcyk7XG4gICAgICBkZWxldGUgbmV3U3RhdGVbYWN0aW9uLnJvdXRlSWRdO1xuICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgIGNhc2UgTE9HT1VUX0NVUlJFTlRfVVNFUjpcbiAgICAgIHJldHVybiAge31cbiAgICBjYXNlIENMRUFSX1JPVVRFUzpcbiAgICAgIC8vIGRlYnVnZ2VyXG4gICAgICByZXR1cm4gIHt9XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCByb3V0ZVJlZHVjZXI7IiwiaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSBcInJlZHV4XCI7XG5pbXBvcnQgdXNlcnMgZnJvbSBcIi4vdXNlcnNfcmVkdWNlclwiO1xuaW1wb3J0IHdvcmtvdXRzIGZyb20gXCIuL3dvcmtvdXRfcmVkdWNlclwiO1xuaW1wb3J0IHJvdXRlcyBmcm9tIFwiLi9yb3V0ZV9yZWR1Y2VyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbWJpbmVSZWR1Y2Vycyh7XG4gIHVzZXJzLFxuICB3b3Jrb3V0cyxcbiAgcm91dGVzXG59KTtcbiIsImltcG9ydCB7IFN3aXRjaCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgUkVDRUlWRV9DVVJSRU5UX1VTRVIsIExPR09VVF9DVVJSRU5UX1VTRVIgfSBmcm9tICcuLi9hY3Rpb25zL3Nlc3Npb25fYWN0aW9ucyc7XG5cbmNvbnN0IFVzZXJzUmVkdWNlcnMgPSAoc3RhdGUgPSB7fSwgYWN0aW9uKSA9PiB7XG5cdE9iamVjdC5mcmVlemUoc3RhdGUpXG5cdHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcblx0XHRjYXNlIFJFQ0VJVkVfQ1VSUkVOVF9VU0VSOlxuXHRcdFx0cmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7W2FjdGlvbi51c2VyLmlkXTogYWN0aW9uLnVzZXJ9KVxuICAgIGNhc2UgTE9HT1VUX0NVUlJFTlRfVVNFUjpcbiAgICAgIHJldHVybiB7fTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIHN0YXRlXG5cdH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBVc2Vyc1JlZHVjZXJzOyIsImltcG9ydCB7XG4gIFJFQ0VJVkVfV09SS09VVCxcbiAgUkVDRUlWRV9BTExfV09SS09VVFMsXG4gIFJFTU9WRV9XT1JLT1VULFxuICBDTEVBUl9XT1JLT1VUU1xufSBmcm9tICcuLi9hY3Rpb25zL3dvcmtvdXRfYWN0aW9ucyc7XG5cbmltcG9ydCB7XG4gICAgTE9HT1VUX0NVUlJFTlRfVVNFUixcbn0gZnJvbSAnLi4vYWN0aW9ucy9zZXNzaW9uX2FjdGlvbnMnO1xuXG5cblxuY29uc3Qgd29ya291dFJlZHVjZXIgPSAoc3RhdGUgPSB7fSwgYWN0aW9uKSA9PiB7XG4gIE9iamVjdC5mcmVlemUoc3RhdGUpXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFJFQ0VJVkVfV09SS09VVDpcbiAgICAgIHJldHVybiBhY3Rpb24ud29ya291dFxuICAgIGNhc2UgUkVDRUlWRV9BTExfV09SS09VVFM6XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIGFjdGlvbi53b3Jrb3V0cyApXG4gICAgY2FzZSBSRU1PVkVfV09SS09VVDpcbiAgICAgIGNvbnN0IG5ld1N0YXRlID0gT2JqZWN0LmFzc2lnbih7fSxzdGF0ZSwgYWN0aW9uLndvcmtvdXRzKTtcbiAgICAgIGRlbGV0ZSBuZXdTdGF0ZSBbYWN0aW9uLndvcmtvdXRJZF07XG4gICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgY2FzZSBMT0dPVVRfQ1VSUkVOVF9VU0VSOlxuICAgICAgcmV0dXJuICB7fVxuICAgIGNhc2UgQ0xFQVJfV09SS09VVFM6XG4gICAgICAvLyBkZWJ1Z2dlclxuICAgICAgcmV0dXJuICB7fVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgd29ya291dFJlZHVjZXI7IiwiaW1wb3J0IHtcbiAgICBSRUNFSVZFX0NVUlJFTlRfVVNFUixcbiAgICBMT0dPVVRfQ1VSUkVOVF9VU0VSLFxufSBmcm9tICcuLi9hY3Rpb25zL3Nlc3Npb25fYWN0aW9ucyc7XG5cbmNvbnN0IF9OVUxMX1NUQVRFID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGlkOiBudWxsXG59KTtcblxuY29uc3QgU2Vzc2lvblJlZHVjZXIgPSAoc3RhdGUgPSBfTlVMTF9TVEFURSwgYWN0aW9uKSA9PiB7XG5cdE9iamVjdC5mcmVlemUoc3RhdGUpXG5cdHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcblx0XHRjYXNlIFJFQ0VJVkVfQ1VSUkVOVF9VU0VSOlxuXHRcdFx0cmV0dXJuIHtpZDogYWN0aW9uLnVzZXIuaWR9XG5cdFx0Y2FzZSBMT0dPVVRfQ1VSUkVOVF9VU0VSOlxuICAgICAgLy8gY29uc29sZS5sb2coJyEhISEhISEhISEhISEhISEhIScpXG5cdFx0XHRyZXR1cm4gX05VTExfU1RBVEVcblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIHN0YXRlO1xuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2Vzc2lvblJlZHVjZXI7IiwiaW1wb3J0IHNlc3Npb24gZnJvbSAnLi9zZXNzaW9uX2Vycm9yc19yZWR1Y2VyJztcbmltcG9ydCB7Y29tYmluZVJlZHVjZXJzfSBmcm9tIFwicmVkdXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29tYmluZVJlZHVjZXJzKHtcbiAgc2Vzc2lvblxufSk7XG5cblxuIiwiaW1wb3J0IHtcblx0UkVDRUlWRV9TRVNTSU9OX0VSUk9SUyxcbiAgUkVDRUlWRV9DVVJSRU5UX1VTRVIsXG4gIFJFTU9WRV9TRVNTSU9OX0VSUk9SXG59IGZyb20gJy4uL2FjdGlvbnMvc2Vzc2lvbl9hY3Rpb25zJztcblxuY29uc3Qgc2Vzc2lvbkVycm9yc1JlZHVjZXIgPSAoc3RhdGUgPSB7fSwgYWN0aW9uKSA9PiB7XG4gICAgT2JqZWN0LmZyZWV6ZShzdGF0ZSlcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG5cdFx0XHRjYXNlIFJFQ0VJVkVfU0VTU0lPTl9FUlJPUlM6XG5cdFx0XHRcdHJldHVybiBhY3Rpb24uZXJyb3JzO1xuXHRcdFx0Y2FzZSBSRUNFSVZFX0NVUlJFTlRfVVNFUjpcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgY2FzZSBSRU1PVkVfU0VTU0lPTl9FUlJPUjpcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gc3RhdGU7XG4gICAgICAgXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBzZXNzaW9uRXJyb3JzUmVkdWNlcjsiLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XG5cbmltcG9ydCBlbnRpdGllcyBmcm9tICcuL2VudGl0aWVzX3JlZHVjZXInO1xuaW1wb3J0IHNlc3Npb24gZnJvbSAnLi9zZXNzaW9uX3JlZHVjZXInO1xuaW1wb3J0IGVycm9ycyBmcm9tICcuL2Vycm9yc19yZWR1Y2VyJztcblxuY29uc3Qgcm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMoe1xuICBlbnRpdGllcyxcbiAgc2Vzc2lvbixcbiAgZXJyb3JzXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm9vdFJlZHVjZXI7IiwiaW1wb3J0IHsgY3JlYXRlU3RvcmUsIGFwcGx5TWlkZGxld2FyZSB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB0aHVuayBmcm9tICdyZWR1eC10aHVuayc7XG5pbXBvcnQgcm9vdFJlZHVjZXIgZnJvbSAnLi4vcmVkdWNlcnMvcm9vdF9yZWR1Y2VyJztcblxuY29uc3QgY29uZmlndXJlU3RvcmUgPSAocHJlbG9hZGVkU3RhdGUgPSB7fSkgPT4ge1xuICAgcmV0dXJuICBjcmVhdGVTdG9yZShcbiAgICAgICAgcm9vdFJlZHVjZXIsXG4gICAgICAgIHByZWxvYWRlZFN0YXRlLFxuICAgICAgICBhcHBseU1pZGRsZXdhcmUodGh1bmspXG4gICAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25maWd1cmVTdG9yZTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUm9vdCBmcm9tICcuL2NvbXBvbmVudHMvcm9vdCc7XG5pbXBvcnQge2xvZ2luLCBzaWdudXAsIGxvZ291dH0gZnJvbSAnLi91dGlsL3Nlc3Npb25fYXBpX3V0aWwuanMnXG5pbXBvcnQgY29uZmlndXJlU3RvcmUgZnJvbSAnLi9zdG9yZS9zdG9yZSc7XG5cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHJvb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpO1xuICAgIGxldCBzdG9yZTtcbiAgICBpZiAod2luZG93LmN1cnJlbnRVc2VyKSB7XG4gICAgICBjb25zdCBwcmVsb2FkZWRTdGF0ZSA9IHtcbiAgICAgICAgZW50aXRpZXM6IHtcbiAgICAgICAgICB1c2VyczogeyBbd2luZG93LmN1cnJlbnRVc2VyLmlkXTogd2luZG93LmN1cnJlbnRVc2VyIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2Vzc2lvbjogeyBpZDogd2luZG93LmN1cnJlbnRVc2VyLmlkIH1cbiAgICAgIH07XG4gICAgICBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKHByZWxvYWRlZFN0YXRlKTtcbiAgICAgIGRlbGV0ZSB3aW5kb3cuY3VycmVudFVzZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0b3JlID0gY29uZmlndXJlU3RvcmUoKTtcbiAgICB9XG5cbiAgICAvLyB3aW5kb3cuZ2V0U3RhdGUgPSBzdG9yZS5nZXRTdGF0ZTtcbiAgICAvLyB3aW5kb3cuZGlzcGF0Y2ggPSBzdG9yZS5kaXNwYXRjaDtcbiAgICBcbiAgICAvLyB3aW5kb3cubG9naW4gPSBsb2dpbjtcbiAgICAvLyB3aW5kb3cuc2lnbnVwID0gc2lnbnVwO1xuICAgIC8vIHdpbmRvdy5sb2dvdXQgPSBsb2dvdXQ7XG4gICAgUmVhY3RET00ucmVuZGVyKDxSb290IHN0b3JlPXtzdG9yZX0vPiwgcm9vdCk7XG59KSJdLCJzb3VyY2VSb290IjoiIn0=